{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Start here","text":"<p>The wp-browser library provides a set of Codeception modules and middleware to enable the testing of WordPress sites, plugins and themes.</p> <p>This is the documentation for version 4 of the project, the current version. Documentation for the previous version of the project, version 3, can be found here.</p>"},{"location":"#installation","title":"Installation","text":"<p>Add wp-browser to your project as a development dependency using Composer</p> <pre><code>cd my-wordrpess-project\ncomposer require --dev lucatume/wp-browser\n</code></pre> <p>Initialize wp-browser to quickly configured to suite your project and setup:</p> <pre><code>vendor/bin/codecept init wpbrowser\n</code></pre> <p>The command will set up your project to run integration and end-to-end tests using:</p> <ul> <li>SQLite as the database engine, leveraging the SQLite Database Integration plugin</li> <li>PHP built-in web server to serve the WordPress site on localhost (e.g. <code>http://localhost:8080</code>)</li> <li>Chromedriver to drive the local version of Chrome installed on your machine</li> </ul> <p>If you're working on a plugin or theme project, the default configuration will add some extra steps:</p> <ul> <li>install the latest version of WordPress in the <code>tests/_wordpress</code> directory</li> <li>create a <code>tests/_plugins</code> directory: any file or directory in this directory will be symlinked into the WordPress   installation in <code>tests/_wordpress/wp-content/plugins</code></li> <li>create a <code>tests/_themes</code> directory: any file or directory in this directory will be symlinked into the WordPress   installation in <code>tests/_wordpress/wp-content/themes</code></li> </ul> <p>For most projects this configuration will be enough to get started with testing.</p> <p>You can run your tests immediately using the <code>vendor/bin/codecept run</code> command.</p> <p>Read more about the commands provided by the library here.</p>"},{"location":"#using-a-custom-configuration","title":"Using a custom configuration","text":"<p>If you decide to skip the default configuration, you will be able to set up <code>wp-browser</code> to suit your needs and local setup by editing the <code>tests/.env</code> file. The inline documentation in the file will guide you through the configuration process.</p> <p>Read more about using a custom configuration here.</p>"},{"location":"#getting-support-for-wp-browser-configuration-and-usage","title":"Getting support for wp-browser configuration and usage","text":"<p>The best place to get support for wp-browser is this documentation. Since this project builds on top of PHPUnit and Codeception, you can also refer to their documentation.</p> <p>If you can't find the answer to your question here you can ask on the \"Issues\" section of the wp-browser repository taking care to provide as much information as possible.</p> <p>Finally, you can contact me directly to set up a call to discuss your project needs and how wp-browser can help you.</p> <p>Table of contents:</p> <ul> <li>The default configuration</li> <li>Using a custom configuration</li> <li>Modules<ul> <li>WPBrowser</li> <li>WPCLI</li> <li>WPDb</li> <li>WPFilesystem</li> <li>WPLoader</li> <li>WPQueries</li> <li>WPWebDriver</li> </ul> </li> <li>Extensions<ul> <li>BuiltInServerController</li> <li>ChromeDriverController</li> <li>DockerComposeController</li> </ul> </li> <li>Commands<ul> <li><code>run</code> and <code>codeception:run</code></li> <li><code>dev:start</code></li> <li><code>dev:stop</code></li> <li><code>dev:restart</code></li> <li><code>wp:db:import</code></li> <li><code>wp:db:export</code></li> <li><code>chromedriver:update</code></li> <li><code>generate:wpunit</code></li> </ul> </li> </ul>"},{"location":"commands/","title":"Commands","text":""},{"location":"commands/#codeception-commands-provided-by-the-library","title":"Codeception commands provided by the library","text":"<p>The library provides some custom commands that can be added to the project Codeception configuration file ( either <code>codeception.yml</code> or <code>codeception.dist.yml</code>).</p>"},{"location":"commands/#run-and-codeceptionrun","title":"<code>run</code> and <code>codeception:run</code>","text":"<p>WordPress extensive use of global variables, constants and side effectes makes it difficult to run multiple test suites in the same process without running into conflicts due to leaking state and side effects. For this reason the project replaces Codeception <code>run</code> command with one that will run each suite in a separate process. You can invoke the original Codeception command using the <code>codeception:run</code> command. Just like the original, the <code>run</code> command accepts all the arguments and options of the original Codeception command.</p> <p>Run all the suites, each one in a separate process:</p> <pre><code>vendor/bin/codecept run\n</code></pre> <p>Run only the <code>Integration</code> suite:</p> <pre><code>vendor/bin/codecept run Integration\n</code></pre> <p>Run a specific test file:</p> <pre><code>vendor/bin/codecept run Integration tests/Integration/MyTest.php\n</code></pre> <p>Run a specific test method:</p> <pre><code>vendor/bin/codecept run Integration tests/Integration/MyTest.php:testMyMethod\n</code></pre> <p>Read the Codeception documentation for more information about the <code>run</code> command.</p>"},{"location":"commands/#devstart","title":"<code>dev:start</code>","text":"<p>If not already running, start the services required to run the tests. The started services are read from the Codeception configuration file (either <code>codeception.yml</code> or <code>codeception.dist.yml</code>), from the <code>extensions</code> section, under the <code>config</code> key.</p> <p>Given the following configuration:</p> <pre><code>extensions:\n  enabled:\n    - lucatume\\WPBrowser\\Extension\\ChromeDriverController\n    - lucatume\\WPBrowser\\Extension\\BuiltInServerController\n    - lucatume\\WPBrowser\\Extension\\DockerComposeController\n  config:\n    lucatume\\WPBrowser\\Extension\\ChromeDriverController:\n      port: '%CHROMEDRIVER_PORT%'\n    lucatume\\WPBrowser\\Extension\\BuiltInServerController:\n      docRoot: '%WORDPRESS_ROOT_DIR%'\n      workers: 5\n      port: '%BUILT_IN_SERVER_PORT%'\n    lucatume\\WPBrowser\\Extension\\DockerComposeController:\n      compose-file: 'tests/docker-compose.yml'\n      env-file: 'tests/.env'\n</code></pre> <p>Running the command will start ChromeDriver, the built-in PHP server and Docker Compose.</p>"},{"location":"commands/#devstop","title":"<code>dev:stop</code>","text":"<p>If running, stop the services required to run the tests. The stopped services are read from the Codeception configuration file (either <code>codeception.yml</code> or <code>codeception.dist.yml</code>), from the <code>extensions</code> section, under the <code>config</code> key.</p> <p>Given the following configuration:</p> <pre><code>extensions:\n  enabled:\n    - lucatume\\WPBrowser\\Extension\\ChromeDriverController\n    - lucatume\\WPBrowser\\Extension\\BuiltInServerController\n    - lucatume\\WPBrowser\\Extension\\DockerComposeController\n  config:\n    lucatume\\WPBrowser\\Extension\\ChromeDriverController:\n      port: '%CHROMEDRIVER_PORT%'\n    lucatume\\WPBrowser\\Extension\\BuiltInServerController:\n      docRoot: '%WORDPRESS_ROOT_DIR%'\n      workers: 5\n      port: '%BUILT_IN_SERVER_PORT%'\n    lucatume\\WPBrowser\\Extension\\DockerComposeController:\n      compose-file: 'tests/docker-compose.yml'\n      env-file: 'tests/.env'\n</code></pre> <p>Running the command will stop ChromeDriver, the built-in PHP server and Docker Compose.</p>"},{"location":"commands/#devrestart","title":"<code>dev:restart</code>","text":"<p>This command is just a shortcut to run <code>dev:stop</code> and <code>dev:start</code> in sequence.</p>"},{"location":"commands/#devinfo","title":"<code>dev:info</code>","text":"<p>Provides information about the local testing stack managed by the DockerComposeController, BuiltInServerController and ChromeDriverController extensions.</p>"},{"location":"commands/#wpdbimport","title":"<code>wp:db:import</code>","text":"<p>You can use WP CLI to interact with your WordPress installation, but WP CLI does not support SQLite databases in the context of the <code>wp db import</code> command. This command fills that gap by providing a database dump file import command that will support MySQL and SQLite databases.</p>"},{"location":"commands/#wpdbexport","title":"<code>wp:db:export</code>","text":"<p>You can use WP CLI to interact with your WordPress installation, but WP CLI does not support SQLite databases in the context of the <code>wp db export</code> command. This command fills that gap by providing a database dump file export command that will support MySQL and SQLite databases.</p>"},{"location":"commands/#chromedriverupdate","title":"<code>chromedriver:update</code>","text":"<p>If you're using Chromedriver as a binary installed in the Composer vendor directory (<code>vendor/bin</code> by default), you can use this command to update it. This command will download the latest version of Chromedriver compatible with the Chrome version installed on your machine in the Composer vendor directory.</p>"},{"location":"commands/#generatewpunit","title":"<code>generate:wpunit</code>","text":"<p>Generate a test case extending the <code>lucatume\\WPBrowser\\TestCase\\WPTestCase</code> class. The class incorporates the WordPress test case from the <code>wordpress-develop</code> repository and adds some utility methods to make testing easier in the context of Codeception.</p> <p>The <code>lucatume\\WPBrowser\\TestCase\\WPTestCase</code> class is the one that should be used when writing tests for WordPress code when using the <code>WPLoader</code> module.</p> <p>Together with the <code>WPLoader</code> module, the <code>WPTestCase</code> class provides a number of functionalities to clean up the database after each test method and to reset the global state of WordPress.</p>"},{"location":"commands/#every-test-method-runs-in-a-transaction","title":"Every test method runs in a transaction","text":"<p>Database queries running in the context of test methods of a test case extending the <code>WPTestCase</code> class will run in a transaction that is rolled back after the test method is run. This means that any database change happening in the context of a test method will not appear in the database while the test is running and after the test is run.</p>"},{"location":"custom-configuration/","title":"Custom configuration","text":""},{"location":"custom-configuration/#custom-testing-configuration","title":"Custom testing configuration","text":"<p>Any non default configuration is considered a custom configuration. If your project requires a tailored set up, this is the configuration for you.</p>"},{"location":"custom-configuration/#using-a-custom-configuration-to-run-tests","title":"Using a custom configuration to run tests","text":"<p>If you decide to skip the default configuration, or are working on a project that cannot use the default configuration you will be able to set up <code>wp-browser</code> to suit your needs using a custom configuration.</p> <p>Choose \"no\", to not use the default configuration, when running the <code>vendor/bin/codecept init wpbrowser</code> command.</p> <p>The command will set up the file structure to be able to run integration and end-to-end tests and will leverage Codeception dynamic configuration using parameters to control the testing stack using the <code>tests/.env</code> file.</p>"},{"location":"custom-configuration/#walkthrough-of-the-testsenv-file","title":"Walkthrough of the <code>tests/.env</code> file","text":"<ul> <li><code>WORDPRESS_ROOT_DIR</code> - the path to the root WordPress installation directory. This is the directory that contains   WordPress files, like <code>wp-load.php</code>. This path can be absolute or relative to the root project directory;   e.g. <code>vendor/wordpress</code> (relative) or <code>/var/www/wordpress</code> (absolute) will work.</li> <li><code>WORDPRESS_URL</code> - the URL of the WordPress installation. This is the URL that will be used by the browser to access   the WordPress   installation in the context of end-to-end tests; e.g. <code>http://localhost:8080</code> or <code>https://wordpress.local</code>.</li> <li><code>WORDPRESS_DOMAIN</code> - the domain of the WordPress installation; this value should follow the <code>WORDPRESS_URL</code> value.   E.g. if <code>WORDPRESS_URL</code> is <code>http://localhost:8080</code> the <code>WORDPRESS_DOMAIN</code> value should be <code>localhost:8080</code>;   if <code>WORDPRESS_URL</code> is <code>https://wordpress.local</code> the <code>WORDPRESS_DOMAIN</code> value should be <code>wordpress.local</code>.</li> <li><code>WORDPRESS_DB_URL</code> - the user, password, host, and name of the database used by the tests. If the database is a MySQL   database, the value should be in the form <code>mysql://user:password@host:port/database_name</code>.   If the database is a SQLite database, the value should be in the form <code>sqlite://path/to/database/file</code>.</li> <li><code>WORDPRESS_TABLE_PREFIX</code> - the database table prefix used by the WordPress installation, the one served   at <code>WORDPRESS_URL</code>.   This value is usually <code>wp_</code> but can be different if the WordPress installation has been configured to use a different   prefix.</li> <li><code>TEST_TABLE_PREFIX</code> - the database table prefix used by the WPLoader module to   install WordPress and run the tests. This value is usually <code>test_</code> and should be different from   the <code>WORDPRESS_TABLE_PREFIX</code> value.</li> <li><code>WORDPRESS_ADMIN_USER</code> - the username of the WordPress administrator user. E.g. <code>admin</code>.</li> <li><code>WORDPRESS_ADMIN_PASSWORD</code> - the password of the WordPress administrator user. E.g. <code>secret!password</code>.</li> <li><code>CHROMEDRIVER_HOST</code> - the host of the Chromedriver server. This value is usually <code>localhost</code> if you're running   Chromedriver on the same machine as the tests. If you're running your tests using a container stack, it will be the   name of the container running Chromedriver, e.g. <code>chromedriver</code>.</li> <li><code>CHROMEDRIVER_PORT</code> - the port of the Chromedriver server. This value is usually <code>9515</code> if you're running Chromedriver   on the same machine as the tests. If you're running your tests using a container stack, it will be the port exposed by   the container running Chromedriver, e.g. <code>4444</code>. Note the default configuration will set   this value to a random port during set up to avoid conflicts with other services running on the same machine.</li> </ul>"},{"location":"custom-configuration/#handling-custom-file-structures","title":"Handling custom file structures","text":"<p>If your site uses a customized file structure to manage WordPress, you will need to further configure the WPLoader module to correctly look for the site content. Read more about setting up WPLoader to correctly load plugins and themes from custom locations here.</p>"},{"location":"default-configuration/","title":"Default configuration","text":""},{"location":"default-configuration/#default-testing-configuration","title":"Default testing configuration","text":"<p>The recommended configuration for most projects. It allows you to get into WordPress integration and end-to-end testing quickly and easily.</p>"},{"location":"default-configuration/#requirements","title":"Requirements","text":"<p>The default configuration will set up Codeception and wp-browser to use SQLite as the database engine, PHP built-in server to serve the test site on localhost and your local version of Chrome, driven by Chromedriver, to run end-to-end tests.</p> <p>As such, the default configuration has the following requirements:</p> <ul> <li>the <code>sqlite3</code> PHP extension; you can check if if's installed by running <code>php -m | grep sqlite3</code> in your terminal</li> <li>the <code>pdo_sqlite</code> PHP extension; you can check if if's installed by running <code>php -m | grep pdo_sqlite</code> in your terminal</li> <li>PHP built-in server can work with only one thread, but it will be faster using multiple threads; multiple threads are   not supported on Windows, but they are supported on WSL.</li> <li>the Chrome browser installed on your machine</li> </ul>"},{"location":"default-configuration/#overview-plugin-and-theme-project","title":"Overview - plugin and theme project","text":"<p>If you're configuring wp-browser for a plugin or theme project, the default configuration will install WordPress in the <code>tests/_wordpress</code> directory and configure the installation to run using SQLite as a database engine. The SQLite Database Integration plugin) will be placed in the installation must-use plugins directory.</p> <p>If your plugin or theme project requires additional plugins or theme to work, you can place them in the <code>tests/_worpdress/wp-content/plugins</code> and <code>tests/_wordpress/wp-content/themes</code> directories respectively.</p> <p>When adding, or removing, plugin and themes, remember to update the WPLoader module configuration to load the correct plugins and themes in your integration tests.</p> <p>On the same note, update the database dump used by the WPDb module to reflect the changes in the dump loaded in the end-to-end tests. The easiest way to update the database fixture is to load the current database dump using the <code>wp:db:import</code> command, manually setting up the site interacting with it and then exporting the database dump using the <code>wp:db:export</code> command.</p> <p>You can find out about the URL of the site served by the PHP built-in web server by running the <code>dev:info</code> command.</p>"},{"location":"default-configuration/#overview-site-project","title":"Overview - site project","text":"<p>If you're configuring wp-browser for a site project, the default configuration will use a combination of PHP built-in web server and the SQLite Database Integration plugin to run the tests and serve your site.</p> <p>The router file used by the PHP built-in web server will force the site, when served on localhost, to use SQLite as database engine leaving your existing local MySQL database untouched.</p> <p>Your existing WordPress installation will be picked up as it is, with all the plugins and themes found in the contents directory.</p> <p>Existing plugins and themes are not added to WPLoader module configuration by wp-browser, you have to do that manually.</p> <p>Similarly, the database dump used by the WPDb module is, by default, an empty WordPress installation where no plugins and themes are active. You have to update the database dump used by the module to reflect the state of your site. You can do that by loading the current database dump using the <code>wp:db:import</code> command, manually setting up the site interacting with it and then exporting the database dump using the <code>wp:db:export</code> command.</p> <p>You can find out about the URL of the site served by the PHP built-in web server by running the <code>dev:info</code> command.</p>"},{"location":"default-configuration/#when-not-to-use-the-default-configuration","title":"When not to use the default configuration","text":"<p>The default configuration is the recommended one for most projects, but some projects might require you to use a custom configuration to make the most out of wp-browser.</p>"},{"location":"default-configuration/#database-drop-in","title":"Database drop-in","text":"<p>The default configuration will use the SQLite Database Integration plugin to use SQLite as the database engine. This requires placing a <code>db.php</code> drop-in file in the WordPress content directory.</p> <p>If your project already requires a <code>db.php</code> drop-in file, you will have to use a custom configuration.</p>"},{"location":"default-configuration/#multisite-with-sub-domains","title":"Multisite with sub-domains","text":"<p>While Chrome will handle sub-domains correctly, even on <code>localhost</code>, WordPress will not. If you're testing a multisite installation with sub-domains, you will have to use a custom configuration.</p>"},{"location":"default-configuration/#custom-site-structure","title":"Custom site structure","text":"<p>If your site uses a customized file structure to manage WordPress, you will need to configure wp-browser using a custom configuration. This is usually true for some site projects, and will most likely not be an issue for plugin and theme projects.</p> <p>Using a custom configuration is not that difficult though: read more about using a custom configuration here.</p>"},{"location":"extensions/","title":"Extensions","text":""},{"location":"extensions/#codeception-extensions-provided-by-the-library","title":"Codeception Extensions provided by the library","text":"<p>The library provides some custom Codeception extensions that can be added to the project Codeception configuration file, in the <code>extensions</code> section.</p>"},{"location":"extensions/#builtinservercontroller","title":"<code>BuiltInServerController</code>","text":"<p>This extension will start and stop the PHP built-in web server before and after the tests run.</p> <p>The extension can be configured with the following parameters:</p> <ul> <li>required<ul> <li><code>docRoot</code> - the document root to use for the PHP Built-in server; it can be either an absolute path or a path   relative to the Codeception root directory.</li> </ul> </li> <li>optional<ul> <li><code>suites</code> - an array of Codeception suites to run the server for; if not set the server will be started for all the   suites.</li> <li><code>port</code> - the port to use for the PHP Built-in server, if not set the server will use port <code>2389</code>.</li> <li><code>workers</code> - the number of workers to use for the PHP Built-in server, if not set the server will use <code>5</code> workers.   This is the equivalent of the <code>PHP_CLI_SERVER_WORKERS</code> environment variable.</li> </ul> </li> </ul> <p>Note: if you run PHP built-in server on Windows, the <code>workers</code> parameter will be ignored and the server will always run with a single worker. This limit is not present in WSL.</p> <p>Example configuration starting the server for all suites:</p> <pre><code>extensions:\n  enabled:\n    - lucatume\\WPBrowser\\Extension\\BuiltInServerController\n  config:\n    lucatume\\WPBrowser\\Extension\\BuiltInServerController:\n      docRoot: /var/www/html\n      workers: 5\n</code></pre> <p>The extension can access environment variables defined in the tests configuration file:</p> <pre><code>extensions:\n  enabled:\n    - lucatume\\WPBrowser\\Extension\\BuiltInServerController\n  config:\n    lucatume\\WPBrowser\\Extension\\BuiltInServerController:\n      suites:\n        - EndToEnd\n        - WebApp\n      docRoot: '%WORDPRESS_ROOT_DIR%'\n      port: '%BUILT_IN_SERVER_PORT%'\n      workers: '%BUILT_IN_SERVER_WORKERS%'\n</code></pre> <p>This is a service extension that will be started and stopped by the <code>dev:start</code> and <code>dev:stop</code> commands.</p>"},{"location":"extensions/#chromedrivercontroller","title":"<code>ChromeDriverController</code>","text":"<p>This extension will start and stop the ChromeDriver before and after the tests are run.</p> <p>The extension can be configured with the following parameters:</p> <ul> <li>optional<ul> <li><code>suites</code> - an array of Codeception suites to run the server for; if not set the server will be started for all the   suites.</li> <li><code>port</code> - the port to use for the ChromeDriver, if not set the server will use port <code>9515</code>.</li> <li><code>binary</code> - the path to the ChromeDriver binary, if not set the server will use the <code>chromedriver</code> binary in the   Composer <code>bin</code> directory.</li> </ul> </li> </ul> <p>Example configuration starting the server for all suites:</p> <pre><code>extensions:\n  enabled:\n    - lucatume\\WPBrowser\\Extension\\ChromeDriverController\n  config:\n    lucatume\\WPBrowser\\Extension\\ChromeDriverController:\n      port: 4444\n      binary: /usr/local/bin/chromedriver\n</code></pre> <p>The extension can access environment variables defined in the tests configuration file:</p> <pre><code>extensions:\n  enabled:\n    - lucatume\\WPBrowser\\Extension\\ChromeDriverController\n  config:\n    suites:\n      - EndToEnd\n      - WebApp\n    lucatume\\WPBrowser\\Extension\\ChromeDriverController:\n      port: '%CHROMEDRIVER_PORT%'\n      binary: '%CHROMEDRIVER_BINARY%'\n</code></pre> <p>You can use the <code>chromedriver:update</code> command to download the latest version of ChromeDriver compatible with your Chrome browser version and place it in the Composer <code>bin</code> directory.</p> <p>This is a service extension that will be started and stopped by the <code>dev:start</code> and <code>dev:stop</code> commands.</p>"},{"location":"extensions/#dockercomposecontroller","title":"<code>DockerComposeController</code>","text":"<p>This extension will start and stop a <code>docker compose</code> stack before and after the tests are run.</p> <p>The extension can be configured with the following parameters:</p> <ul> <li>required<ul> <li><code>compose-file</code> - the path to the <code>docker compose</code> file to use; it can be either an absolute path or a path   relative to the Codeception root directory.</li> </ul> </li> <li>optional<ul> <li><code>env-file</code>- the path to the environment file to use; it can be either an absolute path or a path.</li> </ul> </li> </ul> <p>Example configuration starting the server for all suites:</p> <pre><code>extensions:\n  enabled:\n    - lucatume\\WPBrowser\\Extension\\DockerComposeController\n  config:\n    lucatume\\WPBrowser\\Extension\\DockerComposeController:\n      compose-file: /var/www/html/docker-compose.yml\n      env-file: /var/www/html/.env\n</code></pre> <p>The extension can access environment variables defined in the tests configuration file:</p> <pre><code>extensions:\n  enabled:\n    - lucatume\\WPBrowser\\Extension\\DockerComposeController\n  config:\n    suites:\n      - EndToEnd\n      - WebApp\n    lucatume\\WPBrowser\\Extension\\DockerComposeController:\n      compose-file: '%DOCKER_COMPOSE_FILE%'\n      env-file: '%DOCKER_COMPOSE_ENV_FILE%'\n</code></pre> <p>This is a service extension that will be started and stopped by the <code>dev:start</code> and <code>wp:dev-stop</code> commands.</p>"},{"location":"modules/WPBrowser/","title":"WPBrowser","text":""},{"location":"modules/WPBrowser/#wpbrowser-module","title":"WPBrowser module","text":"<p>Browse and test the site HTML with a fast browser without Javascript support.</p> <p>This module trades the WPWebDriver module Javascript support for speed and stability. It is a good choice for testing sites that don't use Javascript or to make assertions that do not require Javascript support like:</p> <ul> <li>testing HTTP return codes</li> <li>testing HTML structure</li> <li>testing JSON and XML responses from APIs</li> </ul> <p>This module is used together with the WPDb module and the WPFilesystem module to control the site state, the database, and the site file structure.</p> <p>This module is an extension of the Codeception PHPBrowser module, you can reference to the Codeception module documentation for more information on the module configuration and usage.</p> <p>This module should be with Cest and Cept test cases.</p>"},{"location":"modules/WPBrowser/#configuration","title":"Configuration","text":"<ul> <li><code>url</code> - required; the start URL of your WordPress project.</li> <li><code>adminUsername</code> - required; the site administrator username to use in actions like <code>loginAsAdmin</code>.</li> <li><code>adminPassword</code> - required; the site administrator password to use in actions like <code>loginAsAdmin</code>.</li> <li><code>adminPath</code> - the path to the WordPress admin directory; defaults to <code>/wp-admin</code>.</li> </ul> <p>More Guzzle request options are available like:</p> <p><code>headers</code> - default headers are set before each test. <code>cookies</code> - default cookies are set before each test. <code>auth</code> - default authentication to be set before each test.</p> <p>... and more.</p> <p>The following is an example of the module configuration to run tests on the<code>http://localhost:8080</code> site:</p> <pre><code>modules:\n  enabled:\n    lucatume\\WPBrowser\\Module\\WPBrowser:\n      url: 'http://localhost:8080'\n      adminUsername: 'admin'\n      adminPassword: 'password'\n      adminPath: '/wp-admin'\n      headers:\n        X_WPBROWSER_REQUEST: 1\n        X_TEST_REQUEST: 1\n        X_APM_REQUEST: 1\n</code></pre> <p>The following configuration uses dynamic configuration parameters to set the module configuration:</p> <pre><code>modules:\n  enabled:\n    lucatume\\WPBrowser\\Module\\WPBrowser:\n      url: '%WORDPRESS_URL%'\n      adminUsername: '%WORDPRESS_ADMIN_USER%'\n      adminPassword: '%WORDPRESS_ADMIN_PASSWORD%'\n      adminPath: '/wp-admin'\n      headers:\n        X_WPBROWSER_REQUEST: 1\n        X_TEST_REQUEST: 1\n        X_APM_REQUEST: 1\n</code></pre>"},{"location":"modules/WPBrowser/#methods","title":"Methods","text":"<p>The module provides the following methods:</p> <ul> <li><code>activatePlugin(array|string $pluginSlug)</code> : <code>void</code></li> <li><code>amEditingPostWithId(int $id)</code> : <code>void</code></li> <li><code>amHttpAuthenticated($username, $password)</code> : <code>void</code></li> <li><code>amOnAdminAjaxPage(array|string|null [$queryVars])</code> : <code>void</code></li> <li><code>amOnAdminPage(string $page)</code> : <code>void</code></li> <li><code>amOnCronPage(array|string|null [$queryVars])</code> : <code>void</code></li> <li><code>amOnPage(string $page)</code> : <code>void</code></li> <li><code>amOnPagesPage()</code> : <code>void</code></li> <li><code>amOnPluginsPage()</code> : <code>void</code></li> <li><code>amOnSubdomain($subdomain)</code> : <code>void</code></li> <li><code>amOnUrl($url)</code> : <code>void</code></li> <li><code>attachFile($field, string $filename)</code> : <code>void</code></li> <li><code>checkOption($option)</code> : <code>void</code></li> <li><code>click($link, [$context])</code> : <code>void</code></li> <li><code>deactivatePlugin(array|string $pluginSlug)</code> : <code>void</code></li> <li><code>deleteHeader(string $name)</code> : <code>void</code></li> <li><code>dontSee(string $text, [$selector])</code> : <code>void</code></li> <li><code>dontSeeCheckboxIsChecked($checkbox)</code> : <code>void</code></li> <li><code>dontSeeCookie($cookie, [$params])</code> : <code>void</code></li> <li><code>dontSeeCurrentUrlEquals(string $uri)</code> : <code>void</code></li> <li><code>dontSeeCurrentUrlMatches(string $uri)</code> : <code>void</code></li> <li><code>dontSeeElement($selector, array [$attributes])</code> : <code>void</code></li> <li><code>dontSeeInCurrentUrl(string $uri)</code> : <code>void</code></li> <li><code>dontSeeInField($field, $value)</code> : <code>void</code></li> <li><code>dontSeeInFormFields($formSelector, array $params)</code> : <code>void</code></li> <li><code>dontSeeInSource(string $raw)</code> : <code>void</code></li> <li><code>dontSeeInTitle($title)</code> : <code>void</code></li> <li><code>dontSeeLink(string $text, string [$url])</code> : <code>void</code></li> <li><code>dontSeeOptionIsSelected($selector, $optionText)</code> : <code>void</code></li> <li><code>dontSeePluginInstalled(string $pluginSlug)</code> : <code>void</code></li> <li><code>dontSeeResponseCodeIs(int $code)</code> : <code>void</code></li> <li><code>executeInGuzzle(Closure $function)</code> : <code>void</code></li> <li><code>fillField($field, $value)</code> : <code>void</code></li> <li><code>followRedirect()</code> : <code>void</code></li> <li><code>grabAttributeFrom($cssOrXpath, string $attribute)</code> : <code>mixed</code></li> <li><code>grabCookie(string $cookie, array [$params])</code> : <code>mixed</code></li> <li><code>grabCookiesWithPattern(string $cookiePattern)</code> : <code>?array</code></li> <li><code>grabFromCurrentUrl(?string [$uri])</code> : <code>mixed</code></li> <li><code>grabMultiple($cssOrXpath, ?string [$attribute])</code> : <code>array</code></li> <li><code>grabPageSource()</code> : <code>string</code></li> <li><code>grabTextFrom($cssOrXPathOrRegex)</code> : <code>mixed</code></li> <li><code>grabValueFrom($field)</code> : <code>mixed</code></li> <li><code>grabWordPressTestCookie(?string [$name])</code> : <code>?Symfony\\Component\\BrowserKit\\Cookie</code></li> <li><code>haveHttpHeader(string $name, string $value)</code> : <code>void</code></li> <li><code>haveServerParameter(string $name, string $value)</code> : <code>void</code></li> <li><code>logOut(string|bool [$redirectTo])</code> : <code>void</code></li> <li><code>loginAs(string $username, string $password)</code> : <code>void</code></li> <li><code>loginAsAdmin()</code> : <code>void</code></li> <li><code>makeHtmlSnapshot(?string [$name])</code> : <code>void</code></li> <li><code>moveBack(int [$numberOfSteps])</code> : <code>void</code></li> <li><code>resetCookie($cookie, [$params])</code> : <code>void</code></li> <li><code>see(string $text, [$selector])</code> : <code>void</code></li> <li><code>seeCheckboxIsChecked($checkbox)</code> : <code>void</code></li> <li><code>seeCookie($cookie, [$params])</code> : <code>void</code></li> <li><code>seeCurrentUrlEquals(string $uri)</code> : <code>void</code></li> <li><code>seeCurrentUrlMatches(string $uri)</code> : <code>void</code></li> <li><code>seeElement($selector, array [$attributes])</code> : <code>void</code></li> <li><code>seeErrorMessage(array|string [$classes])</code> : <code>void</code></li> <li><code>seeInCurrentUrl(string $uri)</code> : <code>void</code></li> <li><code>seeInField($field, $value)</code> : <code>void</code></li> <li><code>seeInFormFields($formSelector, array $params)</code> : <code>void</code></li> <li><code>seeInSource(string $raw)</code> : <code>void</code></li> <li><code>seeInTitle($title)</code> : <code>void</code></li> <li><code>seeLink(string $text, ?string [$url])</code> : <code>void</code></li> <li><code>seeMessage(array|string [$classes])</code> : <code>void</code></li> <li><code>seeNumberOfElements($selector, $expected)</code> : <code>void</code></li> <li><code>seeOptionIsSelected($selector, $optionText)</code> : <code>void</code></li> <li><code>seePageNotFound()</code> : <code>void</code></li> <li><code>seePluginActivated(string $pluginSlug)</code> : <code>void</code></li> <li><code>seePluginDeactivated(string $pluginSlug)</code> : <code>void</code></li> <li><code>seePluginInstalled(string $pluginSlug)</code> : <code>void</code></li> <li><code>seeResponseCodeIs(int $code)</code> : <code>void</code></li> <li><code>seeResponseCodeIsBetween(int $from, int $to)</code> : <code>void</code></li> <li><code>seeResponseCodeIsClientError()</code> : <code>void</code></li> <li><code>seeResponseCodeIsRedirection()</code> : <code>void</code></li> <li><code>seeResponseCodeIsServerError()</code> : <code>void</code></li> <li><code>seeResponseCodeIsSuccessful()</code> : <code>void</code></li> <li><code>seeWpDiePage()</code> : <code>void</code></li> <li><code>selectOption($select, $option)</code> : <code>void</code></li> <li><code>sendAjaxGetRequest(string $uri, array [$params])</code> : <code>void</code></li> <li><code>sendAjaxPostRequest(string $uri, array [$params])</code> : <code>void</code></li> <li><code>sendAjaxRequest(string $method, string $uri, array [$params])</code> : <code>void</code></li> <li><code>setCookie($name, $val, [$params])</code> : <code>void</code></li> <li><code>setHeader(string $name, string $value)</code> : <code>void</code></li> <li><code>setMaxRedirects(int $maxRedirects)</code> : <code>void</code></li> <li><code>setServerParameters(array $params)</code> : <code>void</code></li> <li><code>startFollowingRedirects()</code> : <code>void</code></li> <li><code>stopFollowingRedirects()</code> : <code>void</code></li> <li><code>submitForm($selector, array $params, ?string [$button])</code> : <code>void</code></li> <li><code>switchToIframe(string $name)</code> : <code>void</code></li> <li><code>uncheckOption($option)</code> : <code>void</code></li> </ul> <p>Read more in Codeception documentation.</p>"},{"location":"modules/WPCLI/","title":"WPCLI","text":""},{"location":"modules/WPCLI/#wpcli-module","title":"WPCLI module","text":"<p>Use WP-CLI to interact with the WordPress installation under test and issue commands.</p> <p>This module is used in the context of end-to-end testing, together with, or as a replacement for the WPDb module to manipulate the database and the WPFilesystem module to manipulate the site file structure.</p> <p>This module should be with Cest and Cept test cases.</p>"},{"location":"modules/WPCLI/#configuration","title":"Configuration","text":"<ul> <li><code>path</code> - required; the path to the WordPress installation under test. This can be a relative path to the   codeception root directory, or an absolute path to the WordPress installation directory. The WordPress installation   directory is the directory that contains the <code>wp-load.php</code> file.</li> <li><code>url</code> - the URL of the WordPress installation under test. Equivalent to the <code>--url</code> option of the <code>wp</code> command.</li> <li><code>user</code> - the user to use to run the <code>wp</code> command. Equivalent to the <code>--user</code> option of the <code>wp</code> command.</li> <li><code>skip-plugins</code> - a boolean value to indicate if the <code>wp</code> command should skip loading plugins. Equivalent to the   <code>--skip-plugins</code> option of the <code>wp</code> command.</li> <li><code>skip-themes</code> - a boolean value to indicate if the <code>wp</code> command should skip loading themes. Equivalent to the   <code>--skip-themes</code> option of the <code>wp</code> command.</li> <li><code>skip-packages</code> - a boolean value to indicate if the <code>wp</code> command should skip loading packages. Equivalent to the   <code>--skip-packages</code> option of the <code>wp</code> command.</li> <li><code>require</code> - a list of PHP files to require before running the <code>wp</code> command. Equivalent to the <code>--require</code> option of   the <code>wp</code> command.</li> <li><code>exec</code> - PHP code to execute before running the <code>wp</code> command. Equivalent to the <code>--exec</code> option of the <code>wp</code> command.</li> <li><code>context</code> - the context to use when running the <code>wp</code> command. Equivalent to the <code>--context</code> option of the <code>wp</code>   command.</li> <li><code>color</code> - a boolean value to indicate if the <code>wp</code> command should output in color. Equivalent to the <code>--color</code> option   of the <code>wp</code> command.</li> <li><code>no-color</code> - a boolean value to indicate if the <code>wp</code> command should not output in color. Equivalent to the   <code>--no-color</code> option of the <code>wp</code> command.</li> <li><code>debug</code> - a boolean value to indicate if the <code>wp</code> command should output debug information. Equivalent to the   <code>--debug</code> option of the <code>wp</code> command.</li> <li><code>quiet</code> - a boolean value to indicate if the <code>wp</code> command should suppress informational messages. Equivalent to the   <code>--quiet</code> option of the <code>wp</code> command.</li> <li><code>throw</code> - a boolean value to indicate if the <code>wp</code> command should throw an exception if the command fails.</li> <li><code>timeout</code> - the timeout to use when running the <code>wp</code> command. When the timeout is reached the command will be   terminated as a failure.</li> <li><code>cache-dir</code> - the directory to use to cache the files WPCLI might downloads. Equivalent to setting   the <code>WP_CLI_CACHE_DIR</code>   environment variable.</li> <li><code>config-path</code> - the path to the <code>wp-cli.yml</code> file to use. Equivalent to setting the <code>WP_CLI_CONFIG_PATH</code>   environment variable.</li> <li><code>custom-shell</code> - the shell to use to run the <code>wp</code> command. Equivalent to setting the <code>WP_CLI_SHELL</code> environment   variable.</li> <li><code>packages-dir</code> - the directory to use to store the packages downloaded by the <code>wp package</code> command. Equivalent to   setting the <code>WP_CLI_PACKAGES_DIR</code> environment variable.</li> </ul> <p>The following is an example of the module configuration to run WPCLI commands on the <code>/var/wordpress</code> directory:</p> <pre><code>modules:\n  enabled:\n    lucatume\\WPBrowser\\Module\\WPCLI:\n      path: /var/wordpress\n      throw: true\n</code></pre> <p>The following configuration uses dynamic configuration parameters to set the module configuration:</p> <pre><code>modules:\n  enabled:\n    lucatume\\WPBrowser\\Module\\WPCLI:\n      path: '%WP_ROOT_DIR%'\n      throw: true\n</code></pre>"},{"location":"modules/WPCLI/#methods","title":"Methods","text":"<p>The module provides the following methods:</p> <ul> <li><code>cli(array|string [$command], ?array [$env], mixed [$input])</code> : <code>int</code></li> <li><code>cliToArray(array $command, ?callable [$splitCallback], ?array [$env], mixed [$input])</code> : <code>array</code></li> <li><code>cliToString(array $command, ?array [$env], mixed [$input])</code> : <code>string</code></li> <li><code>dontSeeInShellOutput(string $text)</code> : <code>void</code></li> <li><code>dontSeeShellOutputMatches(string $regex)</code> : <code>void</code></li> <li><code>grabLastCliProcess()</code> : <code>lucatume\\WPBrowser\\WordPress\\CliProcess</code></li> <li><code>grabLastShellErrorOutput()</code> : <code>string</code></li> <li><code>grabLastShellOutput()</code> : <code>string</code></li> <li><code>seeInShellOutput(string $text)</code> : <code>void</code></li> <li><code>seeResultCodeIs(int $code)</code> : <code>void</code></li> <li><code>seeResultCodeIsNot(int $code)</code> : <code>void</code></li> <li><code>seeShellOutputMatches(string $regex)</code> : <code>void</code></li> </ul> <p>Explore the WP-CLI documentation for more information on the available commands.</p>"},{"location":"modules/WPDb/","title":"WPDb","text":""},{"location":"modules/WPDb/#wpdb-module","title":"WPDb module","text":"<p>This module allows to manipulate the database of the WordPress installation under test directly, without using the WordPress API.</p> <p>The module is used together with the WPBrowser module, WPWebDriver and WPFilesystem modules to control the site state, the database, and the site file structure.</p> <p>Note about interaction with the WPLoader module: both this module and the WPLoader one can be used to control the state of the database before tests and set up fixtures: use either this or WPLoader, do not use both. This module should be used in end-to-end testing, the WPLoader module should be used in integration testing. If you're using this module to load a database dump before integration tests, use the WPLoader module <code>dump</code> configuration parameter instead.</p> <p>This module should be with Cest and Cept test cases.</p>"},{"location":"modules/WPDb/#configuration","title":"Configuration","text":"<p>This module extends the Codeception Db module adding some configuration options and functions that are specific to WordPress.</p> <ul> <li><code>dbUrl</code> - required; the URL to use to connect to the database. The URL must be in the form   <code>mysql://user:password@host:port/database</code> if you're using a MySQL database for your tests, or in the form   <code>sqlite://path/to/database/file</code> if you're using a SQLite database for your tests (   like the default configuration does)</li> <li><code>dsn</code> - required; the DSN to use to connect to the database; required if not using the <code>dbUrl</code> parameter.</li> <li><code>user</code> - required; the user to use to connect to the database; required if not using the <code>dbUrl</code> parameter.</li> <li><code>password</code> - required; the password to use to connect to the database; required if not using the <code>dbUrl</code>   parameter.</li> <li><code>url</code> - required;the URL of the WordPress installation under test. E.g. <code>http://localhost:8080</code>   or <code>https://wordpress.test</code>.</li> <li><code>tablePrefix</code> - the table prefix to use when interacting with the database; defaults to <code>wp_</code>.</li> <li><code>dump</code> - the path to a database dump file, or a set of database files, to load before running tests. The path can be   relative to the project root directory, e.g. <code>tests/_data/dump.sql</code>, or absolute.</li> <li><code>populate</code> - a boolean value to indicate if the database should be populated importing the dump file(s) at the start   of the suite.</li> <li><code>cleanup</code> - a boolean value to indicate if the database should be populated importing the dump file(s) before each   test.</li> <li><code>reconnect</code> - a boolean value to indicate if the database connection should be re-established before each test.</li> <li><code>populator</code> - a command to use to populate the database instead of using   PHP; read more on the Codeception documentation.</li> <li><code>urlReplacement</code> - a boolean value to indicate if the database dump file(s) should be searched for the <code>siteurl</code>   and <code>home</code> options and replaced with the <code>url</code> parameter value. This is required since WordPress hard-codes URLs in   the database, the original URL is inferred, if the <code>originalUrl</code> parameter is not provided.</li> <li><code>originalUrl</code> - if provided together with the <code>urlReplacement</code> parameter, the module will not try to infer the   original URL from the database dump file(s) but use the provided value instead.</li> <li><code>waitlock</code> - the number of seconds to wait for a database lock to be released before failing the test. Defaults to   <code>10</code> meaning that the test will fail if the database lock is not released after 10 seconds.</li> <li><code>createIfNotExists</code> - a boolean value to indicate if the database should be created if it does not exist. Defaults to   <code>false</code>.</li> </ul> <p>The following is an example of the module configuration to run tests on the<code>http://localhost:8080</code> site:</p> <pre><code>modules:\n  enabled:\n    - lucatume\\WPBrowser\\Module\\WPDb:\n        dbUrl: 'mysql://root:password@localhost:3306/wordpress'\n        url: 'http://localhost:8080'\n        tablePrefix: 'wp_'\n        dump: 'tests/_data/dump.sql'\n        populate: true\n        cleanup: true\n        reconnect: false\n        urlReplacement: true\n        originalUrl: http://wordpress.test\n        waitlock: 10\n        createIfNotExists: true\n</code></pre> <p>The following configuration uses dynamic configuration parameters to set the module configuration:</p> <pre><code>modules:\n  enabled:\n    - lucatume\\WPBrowser\\Module\\WPDb:\n        dbUrl: '%DB_URL%'\n        url: '%WORDPRESS_URL%'\n        tablePrefix: '%WORDPRESS_TABLE_PREFIX%'\n        dump: '%DB_DUMP%'\n        populate: true\n        cleanup: true\n        reconnect: false\n        urlReplacement: true\n        originalUrl: '%WORDPRESS_ORIGINAL_URL%'\n        waitlock: 10\n        createIfNotExists: true\n</code></pre> <p>The following configuration uses a SQLite database:</p> <pre><code>modules:\n  enabled:\n    - lucatume\\WPBrowser\\Module\\WPDb:\n        dbUrl: 'sqlite://tests/database.sqlite'\n        url: 'http://localhost:8080'\n        tablePrefix: 'wp_'\n        dump: 'tests/_data/dump.sql'\n        populate: true\n        cleanup: true\n        reconnect: false\n        urlReplacement: true\n        originalUrl: http://wordpress.test\n        waitlock: 10\n        createIfNotExists: true\n</code></pre>"},{"location":"modules/WPDb/#methods","title":"Methods","text":"<p>The module provides the following methods:</p> <ul> <li><code>amConnectedToDatabase(string $databaseKey)</code> : <code>void</code></li> <li><code>countRowsInDatabase(string $table, array [$criteria])</code> : <code>int</code></li> <li><code>dontHaveAttachmentFilesInDatabase(array|int $attachmentIds)</code> : <code>void</code></li> <li><code>dontHaveAttachmentInDatabase(array $criteria, bool [$purgeMeta], bool [$removeFiles])</code> : <code>void</code></li> <li><code>dontHaveBlogInDatabase(array $criteria, bool [$removeTables], bool [$removeUploads])</code> : <code>void</code></li> <li><code>dontHaveCommentInDatabase(array $criteria, bool [$purgeMeta])</code> : <code>void</code></li> <li><code>dontHaveCommentMetaInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontHaveInDatabase(string $table, array $criteria)</code> : <code>void</code></li> <li><code>dontHaveLinkInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontHaveOptionInDatabase(string $key, mixed [$value])</code> : <code>void</code></li> <li><code>dontHavePostInDatabase(array $criteria, bool [$purgeMeta])</code> : <code>void</code></li> <li><code>dontHavePostMetaInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontHavePostThumbnailInDatabase(int $postId)</code> : <code>void</code></li> <li><code>dontHaveSiteOptionInDatabase(string $key, mixed [$value])</code> : <code>void</code></li> <li><code>dontHaveSiteTransientInDatabase(string $key)</code> : <code>void</code></li> <li><code>dontHaveTableInDatabase(string $fullTableName)</code> : <code>void</code></li> <li><code>dontHaveTermInDatabase(array $criteria, bool [$purgeMeta])</code> : <code>void</code></li> <li><code>dontHaveTermMetaInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontHaveTermRelationshipInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontHaveTermTaxonomyInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontHaveTransientInDatabase(string $transient)</code> : <code>void</code></li> <li><code>dontHaveUserInDatabase(string|int $userIdOrLogin, bool [$purgeMeta])</code> : <code>void</code></li> <li><code>dontHaveUserInDatabaseWithEmail(string $userEmail, bool [$purgeMeta])</code> : <code>array</code></li> <li><code>dontHaveUserMetaInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontSeeAttachmentInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontSeeBlogInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontSeeCommentInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontSeeCommentMetaInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontSeeInDatabase(string $table, array [$criteria])</code> : <code>void</code></li> <li><code>dontSeeLinkInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontSeeOptionInDatabase(array|string $criteriaOrName, mixed [$value])</code> : <code>void</code></li> <li><code>dontSeePageInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontSeePostInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontSeePostMetaInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontSeePostWithTermInDatabase(int $post_id, int $term_taxonomy_id, ?int [$term_order], ?string [$taxonomy])</code> : <code>void</code></li> <li><code>dontSeeSiteOptionInDatabase(array|string $criteriaOrName, mixed [$value])</code> : <code>void</code></li> <li><code>dontSeeTableInDatabase(string $table)</code> : <code>void</code></li> <li><code>dontSeeTermInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontSeeTermMetaInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontSeeTermTaxonomyInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontSeeUserInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>dontSeeUserMetaInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>getSiteDomain()</code> : <code>string</code></li> <li><code>getUsersTableName()</code> : <code>string</code></li> <li><code>grabAllFromDatabase(string $table, string $column, array $criteria)</code> : <code>array</code></li> <li><code>grabAttachmentAttachedFile(int $attachmentPostId)</code> : <code>string</code></li> <li><code>grabAttachmentMetadata(int $attachmentPostId)</code> : <code>array</code></li> <li><code>grabBlogDomain(int $blogId)</code> : <code>string</code></li> <li><code>grabBlogPath(int $blogId)</code> : <code>string</code></li> <li><code>grabBlogTableName(int $blogId, string $table)</code> : <code>string</code></li> <li><code>grabBlogTableNames(int $blogId)</code> : <code>array</code></li> <li><code>grabBlogTablePrefix(int $blogId)</code> : <code>string</code></li> <li><code>grabBlogVersionsTableName()</code> : <code>string</code></li> <li><code>grabBlogsTableName()</code> : <code>string</code></li> <li><code>grabColumnFromDatabase(string $table, string $column, array [$criteria])</code> : <code>array</code></li> <li><code>grabCommentmetaTableName()</code> : <code>string</code></li> <li><code>grabCommentsTableName()</code> : <code>string</code></li> <li><code>grabEntriesFromDatabase(string $table, array [$criteria])</code> : <code>array</code></li> <li><code>grabEntryFromDatabase(string $table, array [$criteria])</code> : <code>array</code></li> <li><code>grabFromDatabase(string $table, string $column, array [$criteria])</code> : <code>void</code></li> <li><code>grabLatestEntryByFromDatabase(string $tableName, string [$idColumn])</code> : <code>int</code></li> <li><code>grabLinksTableName()</code> : <code>string</code></li> <li><code>grabNumRecords(string $table, array [$criteria])</code> : <code>int</code></li> <li><code>grabOptionFromDatabase(string $option_name)</code> : <code>mixed</code></li> <li><code>grabPostFieldFromDatabase(int $postId, string $field)</code> : <code>mixed</code></li> <li><code>grabPostMetaFromDatabase(int $postId, string $metaKey, bool [$single])</code> : <code>mixed</code></li> <li><code>grabPostmetaTableName()</code> : <code>string</code></li> <li><code>grabPostsTableName()</code> : <code>string</code></li> <li><code>grabPrefixedTableNameFor(string [$tableName])</code> : <code>string</code></li> <li><code>grabRegistrationLogTableName()</code> : <code>string</code></li> <li><code>grabSignupsTableName()</code> : <code>string</code></li> <li><code>grabSiteMetaFromDatabase(int $blogId, string $key, bool $single)</code> : <code>mixed</code></li> <li><code>grabSiteMetaTableName()</code> : <code>string</code></li> <li><code>grabSiteOptionFromDatabase(string $key)</code> : <code>mixed</code></li> <li><code>grabSiteTableName()</code> : <code>string</code></li> <li><code>grabSiteTransientFromDatabase(string $key)</code> : <code>mixed</code></li> <li><code>grabSiteUrl(?string [$path])</code> : <code>string</code></li> <li><code>grabTablePrefix()</code> : <code>string</code></li> <li><code>grabTermIdFromDatabase(array $criteria)</code> : <code>int|false</code></li> <li><code>grabTermMetaTableName()</code> : <code>string</code></li> <li><code>grabTermRelationshipsTableName()</code> : <code>string</code></li> <li><code>grabTermTaxonomyIdFromDatabase(array $criteria)</code> : <code>int|false</code></li> <li><code>grabTermTaxonomyTableName()</code> : <code>string</code></li> <li><code>grabTermsTableName()</code> : <code>string</code></li> <li><code>grabUserIdFromDatabase(string $userLogin)</code> : <code>int|false</code></li> <li><code>grabUserMetaFromDatabase(int $userId, string $meta_key, bool [$single])</code> : <code>mixed</code></li> <li><code>grabUsermetaTableName()</code> : <code>string</code></li> <li><code>grabUsersTableName()</code> : <code>string</code></li> <li><code>haveAttachmentInDatabase(string $file, string|int [$date], array [$overrides], ?array [$imageSizes])</code> : <code>int</code></li> <li><code>haveBlogInDatabase(string $domainOrPath, array [$overrides], bool [$subdomain])</code> : <code>int</code></li> <li><code>haveCommentInDatabase(int $comment_post_ID, array [$data])</code> : <code>int</code></li> <li><code>haveCommentMetaInDatabase(int $comment_id, string $meta_key, mixed $meta_value)</code> : <code>int</code></li> <li><code>haveInDatabase(string $table, array $data)</code> : <code>int</code></li> <li><code>haveLinkInDatabase(array [$overrides])</code> : <code>int</code></li> <li><code>haveManyBlogsInDatabase(int $count, array [$overrides], bool [$subdomain])</code> : <code>array</code></li> <li><code>haveManyCommentsInDatabase(int $count, int $comment_post_ID, array [$overrides])</code> : <code>array</code></li> <li><code>haveManyLinksInDatabase(int $count, array [$overrides])</code> : <code>array</code></li> <li><code>haveManyPostsInDatabase(int $count, array [$overrides])</code> : <code>array</code></li> <li><code>haveManyTermsInDatabase(int $count, string $name, string $taxonomy, array [$overrides])</code> : <code>array</code></li> <li><code>haveManyUsersInDatabase(int $count, string $user_login, string [$role], array [$overrides])</code> : <code>array</code></li> <li><code>haveMenuInDatabase(string $slug, string $location, array [$overrides])</code> : <code>array</code></li> <li><code>haveMenuItemInDatabase(string $menuSlug, string $title, ?int [$menuOrder], array [$meta])</code> : <code>int</code></li> <li><code>haveOptionInDatabase(string $option_name, mixed $option_value, string [$autoload])</code> : <code>int</code></li> <li><code>havePageInDatabase(array [$overrides])</code> : <code>int</code></li> <li><code>havePostInDatabase(array [$data])</code> : <code>int</code></li> <li><code>havePostThumbnailInDatabase(int $postId, int $thumbnailId)</code> : <code>int</code></li> <li><code>havePostmetaInDatabase(int $postId, string $meta_key, mixed $meta_value)</code> : <code>int</code></li> <li><code>haveSiteMetaInDatabase(int $blogId, string $string, mixed $value)</code> : <code>int</code></li> <li><code>haveSiteOptionInDatabase(string $key, mixed $value)</code> : <code>int</code></li> <li><code>haveSiteTransientInDatabase(string $key, mixed $value)</code> : <code>int</code></li> <li><code>haveTermInDatabase(string $name, string $taxonomy, array [$overrides])</code> : <code>array</code></li> <li><code>haveTermMetaInDatabase(int $term_id, string $meta_key, mixed $meta_value)</code> : <code>int</code></li> <li><code>haveTermRelationshipInDatabase(int $object_id, int $term_taxonomy_id, int [$term_order])</code> : <code>void</code></li> <li><code>haveTransientInDatabase(string $transient, mixed $value)</code> : <code>int</code></li> <li><code>haveUserCapabilitiesInDatabase(int $userId, array|string $role)</code> : <code>array</code></li> <li><code>haveUserInDatabase(string $user_login, array|string [$role], array [$overrides])</code> : <code>int</code></li> <li><code>haveUserLevelsInDatabase(int $userId, array|string $role)</code> : <code>array</code></li> <li><code>haveUserMetaInDatabase(int $userId, string $meta_key, mixed $meta_value)</code> : <code>array</code></li> <li><code>importSql(array $sql)</code> : <code>void</code></li> <li><code>importSqlDumpFile(?string [$dumpFile])</code> : <code>void</code></li> <li><code>performInDatabase($databaseKey, $actions)</code> : <code>void</code></li> <li><code>seeAttachmentInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>seeBlogInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>seeCommentInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>seeCommentMetaInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>seeInDatabase(string $table, array [$criteria])</code> : <code>void</code></li> <li><code>seeLinkInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>seeNumRecords(int $expectedNumber, string $table, array [$criteria])</code> : <code>void</code></li> <li><code>seeOptionInDatabase(array|string $criteriaOrName, mixed [$value])</code> : <code>void</code></li> <li><code>seePageInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>seePostInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>seePostMetaInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>seePostWithTermInDatabase(int $post_id, int $term_taxonomy_id, ?int [$term_order], ?string [$taxonomy])</code> : <code>void</code></li> <li><code>seeSiteOptionInDatabase(array|string $criteriaOrName, mixed [$value])</code> : <code>void</code></li> <li><code>seeSiteSiteTransientInDatabase(string $key, mixed [$value])</code> : <code>void</code></li> <li><code>seeTableInDatabase(string $table)</code> : <code>void</code></li> <li><code>seeTermInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>seeTermMetaInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>seeTermRelationshipInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>seeTermTaxonomyInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>seeUserInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>seeUserMetaInDatabase(array $criteria)</code> : <code>void</code></li> <li><code>updateInDatabase(string $table, array $data, array [$criteria])</code> : <code>void</code></li> <li><code>useBlog(int [$blogId])</code> : <code>void</code></li> <li><code>useMainBlog()</code> : <code>void</code></li> <li><code>useTheme(string $stylesheet, ?string [$template], ?string [$themeName])</code> : <code>void</code></li> </ul> <p>Read more in Codeception documentation for the Db module.</p>"},{"location":"modules/WPFilesystem/","title":"WPFilesystem","text":""},{"location":"modules/WPFilesystem/#wpfilesystem-module","title":"WPFilesystem module","text":"<p>Interact and make assertions on the WordPress file structure.</p> <p>This module is used together with the WPDb module to manage the state of the WordPress installation in the context of end-to-end tests.</p> <p>This module extends the Filesystem module from Codeception, you can reference to the Codeception documentation to find out more about the module configuration and usage.</p> <p>This module should be with Cest and Cept test cases.</p>"},{"location":"modules/WPFilesystem/#configuration","title":"Configuration","text":"<p><code>wpRootFolder</code> - required; the path to the WordPress installation root folder. This can be a relative path to the codeception root directory, or an absolute path to the WordPress installation directory. The WordPress installation directory is the directory that contains the <code>wp-load.php</code> file. <code>themes</code> - the path, relative to the path specified in the <code>wpRootFolder</code> parameter, to the themes directory. By default, it's <code>/wp-content/themes</code>. <code>plugins</code> - the path, relative to the path specified in the <code>wpRootFolder</code> parameter, to the plugins directory. By default, it's <code>/wp-content/plugins</code>. <code>mu-plugins</code> - the path, relative to the path specified in the <code>wpRootFolder</code> parameter, to the must-use plugins. By default, it's <code>/wp-content/mu-plugins</code>. directory. <code>uploads</code> - the path, relative to the path specified in the <code>wpRootFolder</code> parameter, to the uploads directory. By default, it's <code>/wp-content/uploads</code>.</p> <p>The following is an example of the module configuration to run tests on the <code>/var/wordpress</code> site:</p> <pre><code>modules:\n  enabled:\n    lucatume\\WPBrowser\\Module\\WPFilesystem:\n      wpRootFolder: /var/wordpress\n      themes: wp-content/themes\n      plugins: wp-content/plugins\n      mu-plugins: wp-content/mu-plugins\n      uploads: wp-content/uploads\n</code></pre> <p>The following configuration uses dynamic configuration parameters to set the module configuration:</p> <pre><code>modules:\n  enabled:\n    lucatume\\WPBrowser\\Module\\WPFilesystem:\n      wpRootFolder: '%WP_ROOT_FOLDER%'\n</code></pre>"},{"location":"modules/WPFilesystem/#methods","title":"Methods","text":"<p>The module provides the following methods:</p> <ul> <li><code>amInMuPluginPath(string $path)</code> : <code>void</code></li> <li><code>amInPath(string $path)</code> : <code>void</code></li> <li><code>amInPluginPath(string $path)</code> : <code>void</code></li> <li><code>amInThemePath(string $path)</code> : <code>void</code></li> <li><code>amInUploadsPath(?string [$path])</code> : <code>void</code></li> <li><code>assertDirectoryExists(string $directory, string [$message])</code> : <code>void</code></li> <li><code>cleanDir(string $dirname)</code> : <code>void</code></li> <li><code>cleanMuPluginDir(string $dir)</code> : <code>void</code></li> <li><code>cleanPluginDir(string $dir)</code> : <code>void</code></li> <li><code>cleanThemeDir(string $dir)</code> : <code>void</code></li> <li><code>cleanUploadsDir(?string [$dir], DateTime|string|int|null [$date])</code> : <code>void</code></li> <li><code>copyDir(string $src, string $dst)</code> : <code>void</code></li> <li><code>copyDirToMuPlugin(string $src, string $pluginDst)</code> : <code>void</code></li> <li><code>copyDirToPlugin(string $src, string $pluginDst)</code> : <code>void</code></li> <li><code>copyDirToTheme(string $src, string $themeDst)</code> : <code>void</code></li> <li><code>copyDirToUploads(string $src, string $dst, DateTime|string|int|null [$date])</code> : <code>void</code></li> <li><code>deleteDir(string $dirname)</code> : <code>void</code></li> <li><code>deleteFile(string $filename)</code> : <code>void</code></li> <li><code>deleteMuPluginFile(string $file)</code> : <code>void</code></li> <li><code>deletePluginFile(string $file)</code> : <code>void</code></li> <li><code>deleteThemeFile(string $file)</code> : <code>void</code></li> <li><code>deleteThisFile()</code> : <code>void</code></li> <li><code>deleteUploadedDir(string $dir, DateTime|string|int|null [$date])</code> : <code>void</code></li> <li><code>deleteUploadedFile(string $file, string|int|null [$date])</code> : <code>void</code></li> <li><code>dontSeeFileFound(string $filename, string [$path])</code> : <code>void</code></li> <li><code>dontSeeInMuPluginFile(string $file, string $contents)</code> : <code>void</code></li> <li><code>dontSeeInPluginFile(string $file, string $contents)</code> : <code>void</code></li> <li><code>dontSeeInThemeFile(string $file, string $contents)</code> : <code>void</code></li> <li><code>dontSeeInThisFile(string $text)</code> : <code>void</code></li> <li><code>dontSeeInUploadedFile(string $file, string $contents, string|int|null [$date])</code> : <code>void</code></li> <li><code>dontSeeMuPluginFileFound(string $file)</code> : <code>void</code></li> <li><code>dontSeePluginFileFound(string $file)</code> : <code>void</code></li> <li><code>dontSeeThemeFileFound(string $file)</code> : <code>void</code></li> <li><code>dontSeeUploadedFileFound(string $file, string|int|null [$date])</code> : <code>void</code></li> <li><code>getBlogUploadsPath(int $blogId, string [$file], DateTimeImmutable|DateTime|string|null [$date])</code> : <code>string</code></li> <li><code>getUploadsPath(string [$file], mixed [$date])</code> : <code>string</code></li> <li><code>getWpRootFolder()</code> : <code>string</code></li> <li><code>haveMuPlugin(string $filename, string $code)</code> : <code>void</code></li> <li><code>havePlugin(string $path, string $code)</code> : <code>void</code></li> <li><code>haveTheme(string $folder, string $indexFileCode, string [$functionsFileCode])</code> : <code>void</code></li> <li><code>makeUploadsDir(string $path)</code> : <code>string</code></li> <li><code>openFile(string $filename)</code> : <code>void</code></li> <li><code>openUploadedFile(string $filename, DateTime|string|int|null [$date])</code> : <code>void</code></li> <li><code>seeFileContentsEqual(string $text)</code> : <code>void</code></li> <li><code>seeFileFound(string $filename, string [$path])</code> : <code>void</code></li> <li><code>seeInMuPluginFile(string $file, string $contents)</code> : <code>void</code></li> <li><code>seeInPluginFile(string $file, string $contents)</code> : <code>void</code></li> <li><code>seeInThemeFile(string $file, string $contents)</code> : <code>void</code></li> <li><code>seeInThisFile(string $text)</code> : <code>void</code></li> <li><code>seeInUploadedFile(string $file, string $contents, string|int|null [$date])</code> : <code>void</code></li> <li><code>seeMuPluginFileFound(string $file)</code> : <code>void</code></li> <li><code>seeNumberNewLines(int $number)</code> : <code>void</code></li> <li><code>seePluginFileFound(string $file)</code> : <code>void</code></li> <li><code>seeThemeFileFound(string $file)</code> : <code>void</code></li> <li><code>seeThisFileMatches(string $regex)</code> : <code>void</code></li> <li><code>seeUploadedFileFound(string $filename, string|int|null [$date])</code> : <code>void</code></li> <li><code>writeToFile(string $filename, string $contents)</code> : <code>void</code></li> <li><code>writeToMuPluginFile(string $file, string $data)</code> : <code>void</code></li> <li><code>writeToPluginFile(string $file, string $data)</code> : <code>void</code></li> <li><code>writeToThemeFile(string $file, string $data)</code> : <code>void</code></li> <li><code>writeToUploadedFile(string $filename, string $data, DateTime|string|int|null [$date])</code> : <code>string</code></li> </ul> <p>Read more in Codeception documentation.</p>"},{"location":"modules/WPLoader/","title":"WPLoader","text":""},{"location":"modules/WPLoader/#wploader-module","title":"WPLoader module","text":"<p>A module to load WordPress and make its code available in tests.</p> <p>Depending on the value of the <code>loadOnly</code> configuration parameter, the module will behave differently:</p> <ul> <li><code>loadOnly: false</code> - The module will load WordPress like the Core PHPUnit suite does to run integration tests in a   controlled environment. Use the module in this mode with test cases generated   using the <code>generate:wpunit</code> command.</li> <li><code>loadOnly: true</code> - The module will load WordPress to make it available in the context of tests. Use the module in this   mode in Cest, Cept and Codeception unit test cases.</li> </ul>"},{"location":"modules/WPLoader/#configuration-with-loadonly-false","title":"Configuration with loadOnly: false","text":"<p>The module will load WordPress like the Core PHPUnit suite does to run integration tests in a controlled environment. Together with the test case generated by the <code>generate:wpunit</code> command the module will:</p> <ul> <li>take care of running any test method in a database transaction rolled back after each test</li> <li>manage and clean up the global environment and context between tests</li> </ul> <p>When used in this mode, the module supports the following configuration parameters:</p> <ul> <li><code>loadOnly</code> - <code>false</code> to load WordPress and run tests in a controlled environment.</li> <li><code>wpRootFolder</code> - required; the path to the WordPress installation root folder. This can be a relative path to the   codeception root directory, or an absolute path to the WordPress installation directory. The WordPress installation   directory is the directory that contains the <code>wp-load.php</code> file.</li> <li><code>dbUrl</code> - required; the URL to the database to use to run tests. The URL must be in the form   <code>mysql://username:password@host:port/database</code> to use a MySQL database, or in the form <code>sqlite://path/to/database</code> to   use a SQLite database. Alternatively, you can use the <code>dbName</code>, <code>dbUser</code>, <code>dbPassword</code>, <code>dbHost</code> configuration   parameters to specify the database connection details.</li> <li><code>dump</code> - the path to a database dump, or a set of database dumps, to load before running tests. The dump will be   loaded only once, after the tests run.</li> <li><code>tablePrefix</code> - the database table prefix to use when loading WordPress, defaults to <code>wp_</code>.</li> <li><code>multisite</code> - a boolean value to indicate if WordPress should be loaded and initialized in multisite mode.</li> <li><code>dbCharset</code> - the database charset to use when loading WordPress.</li> <li><code>dbCollate</code> - the database collate to use when loading WordPress.</li> <li><code>domain</code> - the domain to use when loading WordPress. Equivalent to defining the <code>WP_TESTS_DOMAIN</code> constant.</li> <li><code>adminEmail</code> - the administrator email to use when loading WordPress. Equivalent to defining the <code>WP_TESTS_EMAIL</code>   constant.</li> <li><code>title</code> - the site title to use when loading WordPress. Equivalent to defining the <code>WP_TESTS_TITLE</code> constant.</li> <li><code>phpBinary</code> - the path to the PHP binary to use to run tests. Defaults to the <code>WP_PHP_BINARY</code> constant.</li> <li><code>language</code> - the language to use when loading WordPress. Equivalent to defining the <code>WPLANG</code> constant.</li> <li><code>configFile</code> - a configuration file, or a set of configuration files, to load before the tests to further customize   and control the WordPress testing environment.</li> <li><code>pluginsFolder</code> - the path to the plugins folder to use when loading WordPress. Equivalent to defining the   <code>WP_PLUGIN_DIR</code> constant.</li> <li><code>plugins</code> - a list of plugins to activate and load in the WordPress installation. Each plugin must be specified in a   format like <code>hello.php</code> or <code>my-plugin/my-plugin.php</code> format.</li> <li><code>bootstrapActions</code> - a list of actions or callbacks to call after WordPress is loaded and before the tests run.</li> <li><code>theme</code> - the theme to activate and load in the WordPress installation. The theme must be specified in slug format   like   <code>twentytwentythree</code>.</li> <li><code>AUTH_KEY</code> - the <code>AUTH_KEY</code> constant value to use when loading WordPress. If the <code>wpRootFolder</code> path points at a   configured installation, containing the <code>wp-config.php</code> file, then the value of the constant in the configuration file   will be used, else it will be randomly generated.</li> <li><code>SECURE_AUTH_KEY</code> - the <code>SECURE_AUTH_KEY</code> constant value to use when loading WordPress. If the <code>wpRootFolder</code> path   points at a configured installation, containing the <code>wp-config.php</code> file, then the value of the constant in the   configuration file will be used, else it will be randomly generated.</li> <li><code>LOGGED_IN_KEY</code> - the <code>LOGGED_IN_KEY</code> constant value to use when loading WordPress. If the <code>wpRootFolder</code> path points   at a configured installation, containing the <code>wp-config.php</code> file, then the value of the constant in the configuration   file will be used, else it will be randomly generated.</li> <li><code>NONCE_KEY</code> - the <code>NONCE_KEY</code> constant value to use when loading WordPress. If the <code>wpRootFolder</code> path points at a   configured installation, containing the <code>wp-config.php</code> file, then the value of the constant in the configuration file   will be used, else it will be randomly generated.</li> <li><code>AUTH_SALT</code> - the <code>AUTH_SALT</code> constant value to use when loading WordPress. If the <code>wpRootFolder</code> path points at a   configured installation, containing the <code>wp-config.php</code> file, then the value of the constant in the configuration file   will be used, else it will be randomly generated.</li> <li><code>SECURE_AUTH_SALT</code> - the <code>SECURE_AUTH_SALT</code> constant value to use when loading WordPress. If the <code>wpRootFolder</code> path   points at a configured installation, containing the <code>wp-config.php</code> file, then the value of the constant in the   configuration file will be used, else it will be randomly generated.</li> <li><code>LOGGED_IN_SALT</code> - the <code>LOGGED_IN_SALT</code> constant value to use when loading WordPress. If the <code>wpRootFolder</code> path   points at a configured installation, containing the <code>wp-config.php</code> file, then the value of the constant in the   configuration file will be used, else it will be randomly generated.</li> <li><code>NONCE_SALT</code> - the <code>NONCE_SALT</code> constant value to use when loading WordPress. If the <code>wpRootFolder</code> path points at a   configured installation, containing the <code>wp-config.php</code> file, then the value of the constant in the configuration file   will be used, else it will be randomly generated.</li> <li><code>AUTOMATIC_UPDATER_DISABLED</code> - the <code>AUTOMATIC_UPDATER_DISABLED</code> constant value to use when loading WordPress. If   the <code>wpRootFolder</code> path points at a configured installation, containing the <code>wp-config.php</code> file, then the value of   the constant in the configuration file will be used, else it will be randomly generated.</li> <li><code>WP_HTTP_BLOCK_EXTERNAL</code> - the <code>WP_HTTP_BLOCK_EXTERNAL</code> constant value to use when loading WordPress. If   the <code>wpRootFolder</code> path points at a configured installation, containing the <code>wp-config.php</code> file, then the value of   the constant in the configuration file will be used, else it will be randomly generated.</li> </ul> <p>This is an example of an integration suite configured to use the module:</p> <pre><code>actor: IntegrationTester\nbootstrap: _bootstrap.php\nmodules:\n  enabled:\n    - \\Helper\\Integration\n    - lucatume\\WPBrowser\\Module\\WPLoader:\n        wpRootFolder: /var/wordpress\n        dbUrl: mysql://root:root@mysql:3306/wordpress\n        tablePrefix: test_\n        domain: wordpress.test\n        adminEmail: admin@wordpress.test\n        title: 'Integration Tests'\n        plugins:\n          - hello.php\n          - woocommerce/woocommerce.php\n          - my-plugin/my-plugin.php\n        theme: twentytwentythree\n</code></pre> <p>The following configuration uses dynamic configuration parameters to set the module configuration:</p> <pre><code>actor: IntegrationTester\nbootstrap: _bootstrap.php\nmodules:\n  enabled:\n    - \\Helper\\Integration\n    - lucatume\\WPBrowser\\Module\\WPLoader:\n        wpRootFolder: '%WP_ROOT_FOLDER%'\n        dbUrl: '%WP_DB_URL%'\n        tablePrefix: '%WP_TABLE_PREFIX%'\n        domain: '%WP_DOMAIN%'\n        adminEmail: '%WP_ADMIN_EMAIL%'\n        title: '%WP_TITLE%'\n        plugins:\n          - hello.php\n          - woocommerce/woocommerce.php\n          - my-plugin/my-plugin.php\n        theme: twentytwentythree\n</code></pre> <p>The following example configuration uses a SQLite database and loads a database fixture before the tests run:</p> <pre><code>actor: IntegrationTester\nbootstrap: _bootstrap.php\nmodules:\n  enabled:\n    - \\Helper\\Integration\n    - lucatume\\WPBrowser\\Module\\WPLoader:\n        wpRootFolder: /var/wordpress\n        dbUrl: sqlite:///var/wordpress/wp-tests.sqlite\n        dump:\n          - tests/_data/products.sql\n          - tests/_data/users.sql\n          - tests/_data/orders.sql\n        tablePrefix: test_\n        domain: wordpress.test\n        adminEmail: admin@wordpress.test\n        title: 'Integration Tests'\n        plugins:\n          - hello.php\n          - woocommerce/woocommerce.php\n          - my-plugin/my-plugin.php\n        theme: twentytwentythree\n</code></pre>"},{"location":"modules/WPLoader/#handling-a-custom-site-structure","title":"Handling a custom site structure","text":"<p>If you're working on a site project using a custom file structure, e.g. [Bedrock][4], you should use a custom configuration and, together with that, configure the <code>WPLoader</code> module to load WordPress, plugins and themes code from the correct locations. Take care to point the <code>wpRootFolder</code> parameter to the directory containing the <code>wp-load.php</code> file, the <code>/var/my-site/web/wp</code> one in the following example, and the module will read the project configuration file to load the WordPress code from the correct location.</p> <p>Here's an example of how the module should be configured to run integration tests on a Bedrock installation:</p> <pre><code>actor: IntegrationTester\nbootstrap: _bootstrap.php\nmodules:\n  enabled:\n    - \\Helper\\Integration\n    - lucatume\\WPBrowser\\Module\\WPLoader:\n        wpRootFolder: /var/my-site/web/wp\n        dbUrl: mysql://root:root@mysql:3306/wordpress\n        tablePrefix: test_\n        domain: my-project.test\n        adminEmail: admin@my-project.test\n        title: 'Integration Tests'\n        plugins:\n          - hello.php\n          - woocommerce/woocommerce.php\n          - my-plugin/my-plugin.php\n        theme: twentytwentythree\n</code></pre> <p>In general, pointing the <code>wpRootFolder</code> parameter to the directory containing the <code>wp-load.php</code> file should take care of loading WordPress code from the correct location. Should that not be the case, use the <code>configFile</code> parameter to point the module to the project test configuration file: a PHP file defining the constants and environment variables to use to load WordPress, plugins and themes correctly.</p>"},{"location":"modules/WPLoader/#configuration-with-loadonly-true","title":"Configuration with loadOnly: true","text":"<p>The module will load WordPress from the location specified by the <code>wpRootFodler</code> parameter, relying on the WPDb module to manage the database state.</p> <p>When used in this mode, the module supports the following configuration parameters:</p> <ul> <li><code>loadOnly</code> - <code>true</code> to load WordPress and make it available in the context of tests.</li> <li><code>wpRootFolder</code> - required; the path to the WordPress installation root folder. This can be a relative path to the   codeception root directory, or an absolute path to the WordPress installation directory. The WordPress installation   directory is the directory that contains the <code>wp-load.php</code> file.</li> <li><code>dbUrl</code> - required; the URL to the database to use to run tests. The URL must be in the form   <code>mysql://username:password@host:port/database</code> to use a MySQL database, or in the form <code>sqlite://path/to/database</code> to   use a SQLite database. Alternatively, you can use the <code>dbName</code>, <code>dbUser</code>, <code>dbPassword</code>, <code>dbHost</code> configuration   parameters to specify the database connection details.</li> <li><code>domain</code> - the domain to use when loading WordPress. Equivalent to defining the <code>WP_TESTS_DOMAIN</code> constant.</li> </ul> <p>The following is an example of the module configuration to run end-to-end tests on the site served at <code>http://localhost:8080</code> URL and served from the  <code>/var/wordpress</code> directory:</p> <pre><code>actor: EndToEndTester\nbootstrap: _bootstrap.php\nmodules:\n  enabled:\n    - \\Helper\\Integration\n    - lucatume\\WPBrowser\\Module\\WPDb:\n        dbUrl: 'mysql://root:password@localhost:3306/wordpress'\n        url: 'http://localhost:8080'\n        tablePrefix: 'wp_'\n        dump: 'tests/_data/dump.sql'\n        populate: true\n        cleanup: true\n        reconnect: false\n        urlReplacement: true\n        originalUrl: http://wordpress.test\n        waitlock: 10\n        createIfNotExists: true\n    - lucatume\\WPBrowser\\Module\\WPLoader:\n        loadOnly: true\n        wpRootFolder: /var/wordpress\n        dbUrl: sqlite:///var/wordpress/wp-tests.sqlite\n        domain: wordpress.test\n</code></pre>"},{"location":"modules/WPLoader/#methods","title":"Methods","text":"<p>The module provides the following methods:</p> <ul> <li><code>factory()</code> : <code>lucatume\\WPBrowser\\Module\\WPLoader\\FactoryStore</code></li> <li><code>getContentFolder(string [$path])</code> : <code>string</code></li> <li><code>getInstallation()</code> : <code>lucatume\\WPBrowser\\WordPress\\Installation</code></li> <li><code>getPluginsFolder(string [$path])</code> : <code>string</code></li> <li><code>getThemesFolder(string [$path])</code> : <code>string</code></li> <li><code>getWpRootFolder(?string [$path])</code> : <code>string</code></li> </ul> <p>[4]:  </p>"},{"location":"modules/WPQueries/","title":"WPQueries","text":""},{"location":"modules/WPQueries/#wpqueries-module","title":"WPQueries module","text":"<p>This module provides assertions for WordPress queries.</p> <p>This module can be used in any test context where the global <code>$wpdb</code> variable is defined, this usually means in any suite where [the WPLoader module] is used.</p>"},{"location":"modules/WPQueries/#configuration","title":"Configuration","text":"<p>The method does not require configuration.</p>"},{"location":"modules/WPQueries/#methods","title":"Methods","text":"<p>The module provides the following methods:</p> <ul> <li><code>assertCountQueries(int $n, string [$message])</code> : <code>void</code></li> <li><code>assertNotQueries(string [$message])</code> : <code>void</code></li> <li><code>assertNotQueriesByAction(string $action, string [$message])</code> : <code>void</code></li> <li><code>assertNotQueriesByFilter(string $filter, string [$message])</code> : <code>void</code></li> <li><code>assertNotQueriesByFunction(string $function, string [$message])</code> : <code>void</code></li> <li><code>assertNotQueriesByMethod(string $class, string $method, string [$message])</code> : <code>void</code></li> <li><code>assertNotQueriesByStatement(string $statement, string [$message])</code> : <code>void</code></li> <li><code>assertNotQueriesByStatementAndAction(string $statement, string $action, string [$message])</code> : <code>void</code></li> <li><code>assertNotQueriesByStatementAndFilter(string $statement, string $filter, string [$message])</code> : <code>void</code></li> <li><code>assertNotQueriesByStatementAndFunction(string $statement, string $function, string [$message])</code> : <code>void</code></li> <li><code>assertNotQueriesByStatementAndMethod(string $statement, string $class, string $method, string [$message])</code> : <code>void</code></li> <li><code>assertQueries(string [$message])</code> : <code>void</code></li> <li><code>assertQueriesByAction(string $action, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesByFilter(string $filter, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesByFunction(string $function, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesByMethod(string $class, string $method, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesByStatement(string $statement, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesByStatementAndAction(string $statement, string $action, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesByStatementAndFilter(string $statement, string $filter, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesByStatementAndFunction(string $statement, string $function, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesByStatementAndMethod(string $statement, string $class, string $method, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesCountByAction(int $n, string $action, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesCountByFilter(int $n, string $filter, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesCountByFunction(int $n, string $function, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesCountByMethod(int $n, string $class, string $method, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesCountByStatement(int $n, string $statement, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesCountByStatementAndAction(int $n, string $statement, string $action, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesCountByStatementAndFilter(int $n, string $statement, string $filter, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesCountByStatementAndFunction(int $n, string $statement, string $function, string [$message])</code> : <code>void</code></li> <li><code>assertQueriesCountByStatementAndMethod(int $n, string $statement, string $class, string $method, string [$message])</code> : <code>void</code></li> <li><code>countQueries(?wpdb [$wpdb])</code> : <code>int</code></li> <li><code>getQueries(?wpdb [$wpdb])</code> : <code>array</code></li> </ul>"},{"location":"modules/WPWebDriver/","title":"WPWebDriver","text":""},{"location":"modules/WPWebDriver/#wpwebdriver-module","title":"WPWebDriver module","text":"<p>This module drives a browser using a solution like Selenium or Chromedriver to simulate user interactions with the WordPress project.</p> <p>The module has full Javascript support, differently from the WPBrowser module, and can be used to test sites that use Javascript to render the page or to make assertions that require Javascript support.</p> <p>The method extends the Codeception WebDriver module and is used in the context of Cest and Cept test cases.</p>"},{"location":"modules/WPWebDriver/#configuration","title":"Configuration","text":"<ul> <li><code>browser</code> - the browser to use; e.g. 'chrome'</li> <li><code>url</code> - required; the start URL of your WordPress project.</li> <li><code>adminUsername</code> - required; the site administrator username to use in actions like <code>loginAsAdmin</code>.</li> <li><code>adminPassword</code> - required; the site administrator password to use in actions like <code>loginAsAdmin</code>.</li> <li><code>adminPath</code> - the path to the WordPress admin directory; defaults to <code>/wp-admin</code>.</li> </ul> <p>More configuration options, and their explanation, are available in the Codeception WebDriver module documentation.</p> <p>The following is an example of the module configuration to run tests on the<code>http://localhost:8080</code> site:</p> <pre><code>modules:\n  enabled:\n    lucatume\\WPBrowser\\Module\\WPBrowser:\n      url: 'http://localhost:8080'\n      adminUsername: 'admin'\n      adminPassword: 'password'\n      adminPath: '/wp-admin'\n      browser: chrome\n      host: 'localhost'\n      port: '4444'\n      window_size: false\n      capabilities:\n        chromeOptions:\n          args: [ \"--headless\", \"--disable-gpu\", \"--proxy-server='direct://'\", \"--proxy-bypass-list=*\", \"--no-sandbox\", \"--disable-dev-shm-usage\" ]\n</code></pre> <p>The following configuration uses dynamic configuration parameters to set the module configuration:</p> <pre><code>modules:\n  enabled:\n    lucatume\\WPBrowser\\Module\\WPBrowser:\n      url: 'http://localhost:8080'\n      adminUsername: 'admin'\n      adminPassword: 'password'\n      adminPath: '/wp-admin'\n      browser: chrome\n      host: '%CHROME_HOST%'\n      port: '%CHROME_PORT%'\n      window_size: `1920,1080`\n      capabilities:\n        chromeOptions:\n          args: [ \"--disable-gpu\", \"--proxy-server='direct://'\", \"--proxy-bypass-list=*\", \"--no-sandbox\", \"--disable-dev-shm-usage\" ]\n</code></pre> <p>Furthermore, the above configuration will not run Chrome in headless mode: the browser window will be visible.</p>"},{"location":"modules/WPWebDriver/#methods","title":"Methods","text":"<p>The module provides the following methods:</p> <ul> <li><code>acceptPopup()</code> : <code>void</code></li> <li><code>activatePlugin(array|string $pluginSlug)</code> : <code>void</code></li> <li><code>amEditingPostWithId(int $id)</code> : <code>void</code></li> <li><code>amOnAdminAjaxPage(array|string|null [$queryVars])</code> : <code>void</code></li> <li><code>amOnAdminPage(string $page)</code> : <code>void</code></li> <li><code>amOnCronPage(array|string|null [$queryVars])</code> : <code>void</code></li> <li><code>amOnPage($page)</code> : <code>void</code></li> <li><code>amOnPagesPage()</code> : <code>void</code></li> <li><code>amOnPluginsPage()</code> : <code>void</code></li> <li><code>amOnSubdomain(string $subdomain)</code> : <code>void</code></li> <li><code>amOnUrl($url)</code> : <code>void</code></li> <li><code>appendField($field, string $value)</code> : <code>void</code></li> <li><code>attachFile($field, string $filename)</code> : <code>void</code></li> <li><code>cancelPopup()</code> : <code>void</code></li> <li><code>checkOption($option)</code> : <code>void</code></li> <li><code>clearField($field)</code> : <code>void</code></li> <li><code>click($link, [$context])</code> : <code>void</code></li> <li><code>clickWithLeftButton([$cssOrXPath], ?int [$offsetX], ?int [$offsetY])</code> : <code>void</code></li> <li><code>clickWithRightButton([$cssOrXPath], ?int [$offsetX], ?int [$offsetY])</code> : <code>void</code></li> <li><code>closeTab()</code> : <code>void</code></li> <li><code>deactivatePlugin(array|string $pluginSlug)</code> : <code>void</code></li> <li><code>debugWebDriverLogs(?Codeception\\TestInterface [$test])</code> : <code>void</code></li> <li><code>deleteSessionSnapshot($name)</code> : <code>void</code></li> <li><code>dontSee($text, [$selector])</code> : <code>void</code></li> <li><code>dontSeeCheckboxIsChecked($checkbox)</code> : <code>void</code></li> <li><code>dontSeeCookie($cookie, array [$params], bool [$showDebug])</code> : <code>void</code></li> <li><code>dontSeeCurrentUrlEquals(string $uri)</code> : <code>void</code></li> <li><code>dontSeeCurrentUrlMatches(string $uri)</code> : <code>void</code></li> <li><code>dontSeeElement($selector, array [$attributes])</code> : <code>void</code></li> <li><code>dontSeeElementInDOM($selector, array [$attributes])</code> : <code>void</code></li> <li><code>dontSeeInCurrentUrl(string $uri)</code> : <code>void</code></li> <li><code>dontSeeInField($field, $value)</code> : <code>void</code></li> <li><code>dontSeeInFormFields($formSelector, array $params)</code> : <code>void</code></li> <li><code>dontSeeInPageSource(string $text)</code> : <code>void</code></li> <li><code>dontSeeInPopup(string $text)</code> : <code>void</code></li> <li><code>dontSeeInSource($raw)</code> : <code>void</code></li> <li><code>dontSeeInTitle($title)</code> : <code>void</code></li> <li><code>dontSeeLink(string $text, string [$url])</code> : <code>void</code></li> <li><code>dontSeeOptionIsSelected($selector, $optionText)</code> : <code>void</code></li> <li><code>dontSeePluginInstalled(string $pluginSlug)</code> : <code>void</code></li> <li><code>doubleClick($cssOrXPath)</code> : <code>void</code></li> <li><code>dragAndDrop($source, $target)</code> : <code>void</code></li> <li><code>executeAsyncJS(string $script, array [$arguments])</code> : <code>void</code></li> <li><code>executeInSelenium(Closure $function)</code> : <code>void</code></li> <li><code>executeJS(string $script, array [$arguments])</code> : <code>void</code></li> <li><code>fillField($field, $value)</code> : <code>void</code></li> <li><code>grabAttributeFrom($cssOrXpath, $attribute)</code> : <code>?string</code></li> <li><code>grabCookie($cookie, array [$params])</code> : <code>mixed</code></li> <li><code>grabCookiesWithPattern(string $cookiePattern)</code> : <code>?array</code></li> <li><code>grabFromCurrentUrl([$uri])</code> : <code>mixed</code></li> <li><code>grabFullUrl()</code> : <code>string</code></li> <li><code>grabMultiple($cssOrXpath, [$attribute])</code> : <code>array</code></li> <li><code>grabPageSource()</code> : <code>string</code></li> <li><code>grabTextFrom($cssOrXPathOrRegex)</code> : <code>mixed</code></li> <li><code>grabValueFrom($field)</code> : <code>?string</code></li> <li><code>grabWordPressTestCookie(?string [$name])</code> : <code>?Symfony\\Component\\BrowserKit\\Cookie</code></li> <li><code>loadSessionSnapshot($name, bool [$showDebug])</code> : <code>bool</code></li> <li><code>logOut(string|bool [$redirectTo])</code> : <code>void</code></li> <li><code>loginAs(string $username, string $password, int [$timeout], int [$maxAttempts])</code> : <code>void</code></li> <li><code>loginAsAdmin(int [$timeout], int [$maxAttempts])</code> : <code>void</code></li> <li><code>makeElementScreenshot($selector, ?string [$name])</code> : <code>void</code></li> <li><code>makeHtmlSnapshot(?string [$name])</code> : <code>void</code></li> <li><code>makeScreenshot(?string [$name])</code> : <code>void</code></li> <li><code>maximizeWindow()</code> : <code>void</code></li> <li><code>moveBack()</code> : <code>void</code></li> <li><code>moveForward()</code> : <code>void</code></li> <li><code>moveMouseOver([$cssOrXPath], ?int [$offsetX], ?int [$offsetY])</code> : <code>void</code></li> <li><code>openNewTab()</code> : <code>void</code></li> <li><code>performOn($element, $actions, int [$timeout])</code> : <code>void</code></li> <li><code>pressKey($element, ...[$chars])</code> : <code>void</code></li> <li><code>reloadPage()</code> : <code>void</code></li> <li><code>resetCookie($cookie, array [$params], bool [$showDebug])</code> : <code>void</code></li> <li><code>resizeWindow(int $width, int $height)</code> : <code>void</code></li> <li><code>saveSessionSnapshot($name)</code> : <code>void</code></li> <li><code>scrollTo($selector, ?int [$offsetX], ?int [$offsetY])</code> : <code>void</code></li> <li><code>see($text, [$selector])</code> : <code>void</code></li> <li><code>seeCheckboxIsChecked($checkbox)</code> : <code>void</code></li> <li><code>seeCookie($cookie, array [$params], bool [$showDebug])</code> : <code>void</code></li> <li><code>seeCurrentUrlEquals(string $uri)</code> : <code>void</code></li> <li><code>seeCurrentUrlMatches(string $uri)</code> : <code>void</code></li> <li><code>seeElement($selector, array [$attributes])</code> : <code>void</code></li> <li><code>seeElementInDOM($selector, array [$attributes])</code> : <code>void</code></li> <li><code>seeErrorMessage(array|string [$classes])</code> : <code>void</code></li> <li><code>seeInCurrentUrl(string $uri)</code> : <code>void</code></li> <li><code>seeInField($field, $value)</code> : <code>void</code></li> <li><code>seeInFormFields($formSelector, array $params)</code> : <code>void</code></li> <li><code>seeInPageSource(string $text)</code> : <code>void</code></li> <li><code>seeInPopup(string $text)</code> : <code>void</code></li> <li><code>seeInSource($raw)</code> : <code>void</code></li> <li><code>seeInTitle($title)</code> : <code>void</code></li> <li><code>seeLink(string $text, ?string [$url])</code> : <code>void</code></li> <li><code>seeMessage(array|string [$classes])</code> : <code>void</code></li> <li><code>seeNumberOfElements($selector, $expected)</code> : <code>void</code></li> <li><code>seeNumberOfElementsInDOM($selector, $expected)</code> : <code>void</code></li> <li><code>seeNumberOfTabs(int $number)</code> : <code>void</code></li> <li><code>seeOptionIsSelected($selector, $optionText)</code> : <code>void</code></li> <li><code>seePluginActivated(string $pluginSlug)</code> : <code>void</code></li> <li><code>seePluginDeactivated(string $pluginSlug)</code> : <code>void</code></li> <li><code>seePluginInstalled(string $pluginSlug)</code> : <code>void</code></li> <li><code>seeWpDiePage()</code> : <code>void</code></li> <li><code>selectOption($select, $option)</code> : <code>void</code></li> <li><code>setCookie($name, $value, array [$params], [$showDebug])</code> : <code>void</code></li> <li><code>submitForm($selector, array $params, [$button])</code> : <code>void</code></li> <li><code>switchToFrame(?string [$locator])</code> : <code>void</code></li> <li><code>switchToIFrame(?string [$locator])</code> : <code>void</code></li> <li><code>switchToNextTab(int [$offset])</code> : <code>void</code></li> <li><code>switchToPreviousTab(int [$offset])</code> : <code>void</code></li> <li><code>switchToWindow(?string [$name])</code> : <code>void</code></li> <li><code>type(string $text, int [$delay])</code> : <code>void</code></li> <li><code>typeInPopup(string $keys)</code> : <code>void</code></li> <li><code>uncheckOption($option)</code> : <code>void</code></li> <li><code>unselectOption($select, $option)</code> : <code>void</code></li> <li><code>wait($timeout)</code> : <code>void</code></li> <li><code>waitForElement($element, int [$timeout])</code> : <code>void</code></li> <li><code>waitForElementChange($element, Closure $callback, int [$timeout])</code> : <code>void</code></li> <li><code>waitForElementClickable($element, int [$timeout])</code> : <code>void</code></li> <li><code>waitForElementNotVisible($element, int [$timeout])</code> : <code>void</code></li> <li><code>waitForElementVisible($element, int [$timeout])</code> : <code>void</code></li> <li><code>waitForJS(string $script, int [$timeout])</code> : <code>void</code></li> <li><code>waitForJqueryAjax(int [$time])</code> : <code>void</code></li> <li><code>waitForText(string $text, int [$timeout], [$selector])</code> : <code>void</code></li> </ul> <p>Read more in Codeception documentation.</p>"},{"location":"v3/","title":"Index","text":"<p>This is the documentation for version 3 of the project. The current version is version 4 and the documentation can be found here.</p> <p>The wp-browser project provides a Codeception based solution to test WordPress plugins, themes and whole sites at all levels of testing.  </p> <p>The purpose of this documentation is to help you set up, run and iterate over your project and test code using the powerful APIs provided by Codeception while trying to alleviate the pains of setting it up for WordPress projects.  </p> <p>Throughout the documentation you will find references to test terminology: I've tried to condense those into small, digestable chunks to provide a rough idea without and a limited context; where required I tried to provide links to dive deeper into the subjects.  </p> <p>Happy testing!</p>"},{"location":"v3/#table-of-contents","title":"Table of contents","text":"<ul> <li>Welcome<ul> <li>Frequently asked questions</li> <li>Codeception, PHPUnit and wp-browser</li> </ul> </li> <li>Using wp-browser with Codeception 4.0</li> <li>Migration guides<ul> <li>Version 2 to version 3</li> </ul> </li> <li>Levels of testing</li> <li>Getting started<ul> <li>Requirements</li> <li>Installation</li> <li>Setting up a minimum WordPress installation</li> <li>Configuration</li> </ul> </li> <li>Tutorials<ul> <li>Automatically change database during acceptance and functional tests</li> <li>Setting up wp-browser on VVV to test a plugin</li> <li>Setting up wp-browser on MAMP for Mac to test a plugin</li> <li>Setting up wp-browser on WAMP for Windows to test a plugin</li> <li>Setting up wp-browser on Local by Flywheel to test a plugin</li> </ul> </li> <li>Modules<ul> <li>WPBrowser</li> <li>WPCLI</li> <li>WPDb</li> <li>WPFilesystem</li> <li>WPLoader</li> <li>WPQueries</li> <li>WPWebDriver</li> </ul> </li> <li>Advanced Usage<ul> <li>Running tests in separate processes</li> </ul> </li> <li>Events API</li> <li>Extensions</li> <li>Commands</li> <li>Contributing</li> <li>Sponsors</li> <li>Changelog</li> </ul>"},{"location":"v3/codeception-4-support/","title":"Codeception 4 support","text":""},{"location":"v3/codeception-4-support/#using-wp-browser-with-codeception-40","title":"Using wp-browser with Codeception 4.0","text":"<p>Codeception version <code>4.0</code> introduced a number of new features to the framework and it's the version of wp-browser that will be maintained from now on.  </p> <p>I've made an effort to keep <code>wp-browser</code> compatible with PHP 5.6 and Codeception versions from <code>2.5</code> up.  </p> <p>One the biggest changes of Codeception version <code>4.0</code> is that modules have been broken out into separate packages. To use <code>wp-browser</code> with Codeception <code>4.0</code> all you need to do is to add this to your project <code>composer.json</code> file:</p> <pre><code>{\n  \"require-dev\": {\n    \"lucatume/wp-browser\": \"^2.4\",\n    \"codeception/module-asserts\": \"^1.0\",\n    \"codeception/module-phpbrowser\": \"^1.0\",\n    \"codeception/module-webdriver\": \"^1.0\",\n    \"codeception/module-db\": \"^1.0\",\n    \"codeception/module-filesystem\": \"^1.0\",\n    \"codeception/module-cli\": \"^1.0\",\n    \"codeception/util-universalframework\": \"^1.0\"\n  }\n}\n</code></pre> <p>You might not need all the modules listed here, depending on the wp-browser modules you use in your test suites. This is a scheme of what Codeception modules you will need for which wp-browser module to help you choose only the required modules:</p> <ul> <li>\"codeception/module-asserts\" -  Required for Codeception 4.0 compatibility.</li> <li>\"codeception/module-phpbrowser\" -  Required by the <code>WPBrowser</code> module.</li> <li>\"codeception/module-webdriver\" - Required by the <code>WPWebDriver</code> module.</li> <li>\"codeception/module-db\" - Required by the <code>WPDb</code> module.</li> <li>\"codeception/module-filesystem\" - Required by the <code>WPFilesystem</code> module.</li> <li>\"codeception/module-cli\" - Required by the <code>WPCLI</code> module.</li> <li>\"codeception/util-universalframework\" - Required by the <code>WordPress</code> framework module.</li> </ul>"},{"location":"v3/codeception-phpunit-and-wpbrowser/","title":"Codeception phpunit and wpbrowser","text":""},{"location":"v3/codeception-phpunit-and-wpbrowser/#the-wp-browser-stack","title":"The wp-browser stack","text":"<p>The wp-browser project is built leveraging the power of a number of open-source projects.  </p> <p>While I'm not listing all of them here it's worth mentioning those that will come up, again and again, in the documentation.</p>"},{"location":"v3/codeception-phpunit-and-wpbrowser/#wordpress","title":"WordPress","text":"<p>WordPress is open source software you can use to create a beautiful website, blog, or app.  </p> <p>The line is taken directly from WordPress.org site. </p> <p>In the context of this documentation WordPress is the PHP and JavaScript framework websites and web applications can be built on, the one anyone can download from here.</p>"},{"location":"v3/codeception-phpunit-and-wpbrowser/#codeception","title":"Codeception","text":"<p>Codeception (home) is a modern, powerful PHP testing framework written in PHP.  </p> <p>It comes with a number of modules and extensions that are comparable to WordPress plugins and themes.  </p> <p>Modules and extensions are combined in suites to be able to run a specific type of test. Each suite will handle a specific type of test for a specific set of code.</p> <p>wp-browser is none other than a collection of modules and extensions for Codeception made specifically to test WordPress applications.</p>"},{"location":"v3/codeception-phpunit-and-wpbrowser/#phpunit","title":"PHPUnit","text":"<p>PHPUnit is the most widely known PHP testing framework. As the name implies it was born to make unit testing of PHP code easier but its scope and power has grown well below that.  </p> <p>Codeception is based, and uses, PhpUnit to wrap some of its functionalities into an easy-to-use API. The two are so compatible one with the other that Codeception can run PHPUnit tests with little to no changes.</p> <p>This documentation will not cover this subject and will only deal with Codeception-native test methods but you can find more information here.</p>"},{"location":"v3/commands/","title":"Custom commands provided by wp-browser","text":"<p>The project comes with its own set of custom Codeception commands.  </p> <p>The commands provide functionalities to quickly scaffold different types of tests. Any other <code>codecept</code> command remains intact and available. </p>"},{"location":"v3/commands/#adding-the-commands-to-an-existing-project","title":"Adding the commands to an existing project","text":"<p>The commands are added to the main Codeception configuration file, <code>codeception.yml</code>, when scaffolding a project via the <code>codecept init wp-browser</code> command.  </p> <p>They can be added to any existing project adding, or editing, the <code>commands</code> section of the configuration file:</p> <pre><code>extensions:\n    commands:\n        - \"Codeception\\\\Command\\\\GenerateWPUnit\"\n        - \"Codeception\\\\Command\\\\GenerateWPRestApi\"\n        - \"Codeception\\\\Command\\\\GenerateWPRestController\"\n        - \"Codeception\\\\Command\\\\GenerateWPRestPostTypeController\"\n        - \"Codeception\\\\Command\\\\GenerateWPAjax\"\n        - \"Codeception\\\\Command\\\\GenerateWPCanonical\"\n        - \"Codeception\\\\Command\\\\GenerateWPXMLRPC\"\n</code></pre>"},{"location":"v3/commands/#generation-commands","title":"Generation commands","text":"<p>The library provides commands to quickly scaffold integration test cases for specific types of WordPress components, see levels of testing for more information.  </p> <p>The tests are almost identical to the ones you could write in a PHPUnit based Core suite with the exception of extending the <code>Codeception\\TestCase\\WPTestCase</code> test case.</p>"},{"location":"v3/commands/#generatewpunit","title":"generate:wpunit","text":"<p>Generates a test case extending the <code>\\Codeception\\TestCase\\WPTestCase</code> class using the</p> <pre><code>  codecept generate:wpunit suite SomeClass\n</code></pre> <p>The command will generate a skeleton test case like</p> <pre><code>&lt;?php\n\nclass SomeClassTest extends \\Codeception\\TestCase\\WPTestCase\n{\n    public function setUp()\n    {\n      parent::setUp();\n    }\n\n    public function tearDown()\n    {\n      parent::tearDown();\n    }\n\n    // tests\n    public function testMe()\n    {\n    }\n\n}\n</code></pre>"},{"location":"v3/commands/#generatewprest","title":"generate:wprest","text":"<p>Generates a test case extending the <code>\\Codeception\\TestCase\\WPRestApiTestCase</code> class using the</p> <pre><code>  codecept generate:wprest suite SomeClass\n</code></pre> <p>The command will generate a skeleton test case like</p> <pre><code>&lt;?php\n\nclass SomeClassTest extends \\Codeception\\TestCase\\WPRestApiTestCase\n{\n    public function setUp()\n    {\n      parent::setUp();\n    }\n\n    public function tearDown()\n    {\n      parent::tearDown();\n    }\n\n    // tests\n    public function testMe()\n    {\n    }\n\n}\n</code></pre>"},{"location":"v3/commands/#generatewprestcontroller","title":"generate:wprestcontroller","text":"<p>Generates a test case extending the <code>\\Codeception\\TestCase\\WPRestControllerTestCase</code> class using the</p> <pre><code>  codecept generate:wprest suite SomeClass\n</code></pre> <p>The command will generate a skeleton test case like</p> <pre><code>&lt;?php\n\nclass SomeClassTest extends \\Codeception\\TestCase\\WPRestControllerTestCase\n{\n    public function setUp()\n    {\n      parent::setUp();\n    }\n\n    public function tearDown()\n    {\n      parent::tearDown();\n    }\n\n    // tests\n    public function testMe()\n    {\n    }\n\n}\n</code></pre>"},{"location":"v3/commands/#generatewprestposttypecontroller","title":"generate:wprestposttypecontroller","text":"<p>Generates a test case extending the <code>\\Codeception\\TestCase\\WPRestPostTypeControllerTestCase</code> class using the</p> <pre><code>  codecept generate:wprest suite SomeClass\n</code></pre> <p>The command will generate a skeleton test case like</p> <pre><code>&lt;?php\n\nclass SomeClassTest extends \\Codeception\\TestCase\\WPRestPostTypeControllerTestCase\n{\n    public function setUp()\n    {\n      parent::setUp();\n    }\n\n    public function tearDown()\n    {\n      parent::tearDown();\n    }\n\n    // tests\n    public function testMe()\n    {\n    }\n\n}\n</code></pre>"},{"location":"v3/commands/#generatewpajax","title":"generate:wpajax","text":"<p>Generates a test case extending the <code>\\Codeception\\TestCase\\WPAjaxTestCase</code> class using the</p> <pre><code>  codecept generate:wpajax suite SomeClass\n</code></pre> <p>The command will generate a skeleton test case like</p> <pre><code>&lt;?php\n\nclass SomeClassTest extends \\Codeception\\TestCase\\WPAjaxTestCase\n{\n    public function setUp()\n    {\n      parent::setUp();\n    }\n\n    public function tearDown()\n    {\n      parent::tearDown();\n    }\n\n    // tests\n    public function testMe()\n    {\n    }\n\n}\n</code></pre>"},{"location":"v3/commands/#generatewpxmlrpc","title":"generate:wpxmlrpc","text":"<p>Generates a test case extending the <code>\\Codeception\\TestCase\\WPXMLRPCTestCase</code> class using the</p> <pre><code>  codecept generate:wpxmlrpc suite SomeClass\n</code></pre> <p>The command will generate a skeleton test case like</p> <pre><code>&lt;?php\n\nclass SomeClassTest extends \\Codeception\\TestCase\\WPXMLRPCTestCase\n{\n    public function setUp()\n    {\n      parent::setUp();\n    }\n\n    public function tearDown()\n    {\n      parent::tearDown();\n    }\n\n    // tests\n    public function testMe()\n    {\n    }\n\n}\n</code></pre>"},{"location":"v3/commands/#generatewpcanonical","title":"generate:wpcanonical","text":"<p>Generates a test case extending the <code>\\Codeception\\TestCase\\WPCanonicalTestCase</code> class using the</p> <pre><code>  codecept generate:wpcanonical suite SomeClass\n</code></pre> <p>The command will generate a skeleton test case like</p> <pre><code>&lt;?php\n\nclass SomeClassTest extends \\Codeception\\TestCase\\WPCanonicalTestCase\n{\n    public function setUp()\n    {\n      parent::setUp();\n    }\n\n    public function tearDown()\n    {\n      parent::tearDown();\n    }\n\n    // tests\n    public function testMe()\n    {\n    }\n\n}\n</code></pre>"},{"location":"v3/configuration/","title":"Configuration","text":""},{"location":"v3/configuration/#initializing-wp-browser","title":"Initializing wp-browser","text":"<p>While wp-browser can be configured manually creating each file the fastest way to bootstrap its configuration is by using its initialization template.  </p> <p>Throughout the steps below I will use the WordPress setup I've prepared before From the root folder of the project, <code>/Users/luca/Sites/wordpress/wp-content/plugins/acme-plugin</code> in the example, run the command:</p> <pre><code>vendor/bin/codecept init wpbrowser\n</code></pre> <p>Composer installed Codeception binary (<code>codecept</code>) in the <code>vendor</code> folder of my project.  </p> <p>With the command above I'm telling Codeception to initialize a wp-browser project in the current folder. When I click enter I'm presented with a list of questions, each answer will be used to configure the wp-browser project for me; one by one.  </p> <p>In the screenshot the answers I've provided to each question, with reference to the setup above:</p> <p></p> <p></p> <p>wp-browser will try to provide a brief explanation of what each question is but below is the long version.</p>"},{"location":"v3/configuration/#long-question-explanation","title":"Long question explanation","text":"<p>I've tried to condense as much clarity as possible in the questions the <code>codecept init wpbrowser</code> command will ask but, for sake of brevity and space, there's no way I could provide inline a deeper explanation of each.  </p> <p>Below is a longer explanation of each question:</p> <ul> <li>How would you like the acceptance suite to be called? </li> <li>How would you like the functional suite to be called? </li> <li>How would you like the WordPress unit and integration suite to be called? </li> <li>How would you like to call the env configuration file? </li> <li>Where is WordPress installed? </li> <li>What is the path, relative to WordPress root URL, of the admin area of the test site?</li> <li>What is the name of the test database used by the test site? </li> <li>What is the host of the test database used by the test site? </li> <li>What is the user of the test database WPLoader should use? </li> <li>What is the password of the test database WPLoader should use? </li> <li>What is the table prefix of the test database WPLoader should use? </li> <li>What is the URL the test site? </li> <li>What is the email of the test site WordPress administrator? </li> <li>What is the title of the test site? </li> <li>What is the login of the administrator user of the test site? </li> <li>What is the password of the administrator user of the test site? </li> <li>Are you testing a plugin, a theme or a combination of both? </li> <li>What is the folder/plugin.php name of the plugin? </li> <li>Are you developing a child theme? </li> <li>Are you using a child theme? </li> <li>What is the slug of the parent theme? </li> <li>What is the slug of the theme? </li> <li>What is the slug of the theme you are using? </li> <li>Does your project needs additional plugins to be activated to work? </li> </ul>"},{"location":"v3/configuration/#how-would-you-like-the-acceptance-suite-to-be-called","title":"How would you like the acceptance suite to be called?","text":"<p>With reference to the testing levels definition this question provides you with the possibility to change the name of the acceptance-like test suite.  </p> <p>Common, alternative, names are <code>ui</code>, <code>rest</code> and <code>user</code>.  </p>"},{"location":"v3/configuration/#how-would-you-like-the-functional-suite-to-be-called","title":"How would you like the functional suite to be called?","text":"<p>With reference to the testing levels definition this question provides you with the possibility to change the name of the functional-like test suite.  </p> <p>A common alternative name is <code>service</code>.  </p>"},{"location":"v3/configuration/#how-would-you-like-the-wordpress-unit-and-integration-suite-to-be-called","title":"How would you like the WordPress unit and integration suite to be called?","text":"<p>With reference to the testing levels definition this question provides you with the possibility to change the name of the suite dedicated to integration and \"WordPress unit\" tests.  </p> <p>A common alternative name is <code>integration</code>.  </p>"},{"location":"v3/configuration/#how-would-you-like-to-call-the-env-configuration-file","title":"How would you like to call the env configuration file?","text":"<p>Instead of configuring each module in each suite with the same parameters over and over Codeception supports dynamic configuration via environment files.  </p> <p>wp-browser will scaffold such a configuration for you and will use, by default, a file called <code>.env</code> to store the configuration parameters.  </p> <p>The file name might not suit all setups especially and this question allows changing that file name; common, alternative, file names are <code>.env.tests</code>, <code>.env.codeception</code> and similar.  </p>"},{"location":"v3/configuration/#where-is-wordpress-installed","title":"Where is WordPress installed?","text":"<p>During tests the test code will need to access WordPress code, precisely wp-browser requires being pointed to the folder that contains the <code>wp-load.php</code> file.  </p> <p>The answer can be an absolute path, like <code>/Users/luca/Sites/wordrpress</code>, or a path relative to the folder where Codeception is installed like <code>vendor/wordpress</code>. </p> <p>This path should be accessible by the machine that is running the tests; if you're running the tests from your machine (e.g. your laptop) that's just the path to the folder where WordPress is installed, <code>/Users/luca/Sites/wordpress</code> in the example configuration above.  </p> <p>If you are, instead, running the tests from within a virtualized machine (e.g. Vagrant or Docker) then the path should be the one used by the virtualized machine.  </p> <p>To make an example:</p> <ul> <li>on my machine WordPress is installed at <code>/Users/luca/Sites/wordpress</code></li> <li>I've created a Docker container using the official WordPress image and bound the above folder into the container</li> <li>internally the container will put WordPress in the <code>/var/www/html</code> folder</li> </ul> <p>If I run the tests from my host machine then WordPress root directory will be <code>/Users/luca/Sites/wordpress</code>, if I run the tests from within the Docker container then WordPress root folder will be <code>/var/www/html</code>. </p> <p>Another example is Local by Flywheel:</p> <ul> <li>in the host machine the path to the WordPress root folder will be <code>/Users/luca/Local\\ Sites/wordpress/app/public</code></li> <li>from within the Docker container managed by Local the path will be <code>/app/public</code></li> </ul> <p>If you need a solution that will work in both instances use a relative path: wp-browser will accept paths like <code>./../../../wordpress</code> and will attempt to resolve them.</p>"},{"location":"v3/configuration/#what-is-the-path-relative-to-wordpress-root-url-of-the-admin-area-of-the-test-site","title":"What is the path, relative to WordPress root URL, of the admin area of the test site?","text":"<p>This is usually <code>/wp-admin</code> but you might have the web-server, or a plugin, redirect or hide requests for the administration area to another path.  </p> <p>Some examples are <code>/admin</code>, <code>/login</code> and the like.  </p> <p>Mind that this is not the path to the login page but the path to the administrationo area; this will be used by wp-browser to find to the administration area in acceptance and functional tests.</p>"},{"location":"v3/configuration/#what-is-the-name-of-the-test-database-used-by-the-test-site","title":"What is the name of the test database used by the test site?","text":"<p>In my example setup it's <code>wordpress</code>.  </p> <p>This is the name of the database that is storing the information used by the site I can reach at <code>http://localhost:8080</code>.  </p> <p>I want to underline the word \"test\". Any site and any database you use and expose to wp-browser should be intended for tests; this means that it does not contain any data you care about as it will be lost.</p>"},{"location":"v3/configuration/#what-is-the-host-of-the-test-database-used-by-the-test-site","title":"What is the host of the test database used by the test site?","text":"<p>In my example setup it's <code>127.0.0.1:3306</code>.  </p> <p>Here the same principle valid for Where is WordPress installed? applies: the database host is relative to the machine that is running the tests.  </p> <p>In my example I'm hosting the database locally, on my laptop, and my machine can reach it at the localhost address (<code>127.0.0.1</code>) on MySQL default port (<code>3306</code>).  </p> <p>If I am using the database of a Local by Flywheel site from my host machine then it might be something like <code>192.168.92.100:4050</code> (from the site \"Database\" tab); the same principle applies if I am using a Vagrant-based or Docker-based solution.  </p> <p>If I am running the tests from within a virtualized machine (a Docker container, a Vagrant box et cetera) then it would probably be <code>localhost</code> or <code>1270.0.0.1</code>.  </p> <p>This detail will be used in the context of acceptance and functional tests by the WPDb module.</p>"},{"location":"v3/configuration/#what-is-the-user-of-the-test-database-used-by-the-test-site","title":"What is the user of the test database used by the test site?","text":"<p>In my example setup it's <code>root</code> as I'm using MySQL server root user to access the database during tests.  </p> <p>Depending on your setup it might be different; since wp-browser will need to not only read but write too to the database make sure to use a user that has full access to the database specified in the answer to the What is the host of the test database used by the test site? question.</p> <p>This detail will be used in the context of acceptance and functional tests by the WPDb module.</p>"},{"location":"v3/configuration/#what-is-the-password-of-the-test-database-used-by-the-test-site","title":"What is the password of the test database used by the test site?","text":"<p>In my example setup it's empty as I've not set any password for the root account.</p> <p>In your case it might be different and it should be the password associated with the user specified in the answer to the What is the user of the test database used by the test site? question.</p> <p>This detail will be used in the context of acceptance and functional tests by the WPDb module.</p>"},{"location":"v3/configuration/#what-is-the-table-prefix-of-the-test-database-used-by-the-test-site","title":"What is the table prefix of the test database used by the test site?","text":"<p>In my example setup it's <code>wp_</code>; that value is taken from the WordPress installation configuration file.  </p> <p>To have any influence on the site wp-browser will need to modify the same database tables WordPress is using; as I did you can take this value from the <code>wp-config.php</code> file directly: it's the value of the <code>$table_prefix</code> variable.  </p> <p>This detail will be used in the context of acceptance and functional tests by the WPDb module.</p>"},{"location":"v3/configuration/#what-is-the-name-of-the-test-database-wploader-should-use","title":"What is the name of the test database WPLoader should use?","text":"<p>In my example setup it's <code>tests</code>.  </p> <p>During integration, or WordPress \"unit\" tests, wp-loader will need to load WordPress code.  </p> <p>Since WordPress code is not meant to be \"modular\" it does not support auto-loading or loading just parts of it; it's either almost all or nothing.  </p> <p>One of the first things WordPress does, when loading, is trying to connect to a database: if that database is not available then WordPress will not load.  </p> <p>In the answer to the question Where is WordPress installed? I've told wp-browser where to find WordPress code, in this answer I'm telling wp-browser what database it should use to bootstrap WordPress.  </p> <p>This detail will be used by the WPLoader module to bootstrap WordPress. It's highly recommended to use a different database from the one used for functional and acceptance tests.</p>"},{"location":"v3/configuration/#what-is-the-host-of-the-test-database-wploader-should-use","title":"What is the host of the test database WPLoader should use?","text":"<p>In my example setup it's <code>127.0.0.1:3306</code>.  </p> <p>As in the answer to the question What is the name of the test database WPLoader should use? we're providing connection details about the database that should be used to bootstrap WordPress during integration and WordPress \"unit\" tests.  </p> <p>Again the database host is in relation to the machine running the tests, all the considerations done for What is the host of the test database used by the test site? apply.</p> <p>This detail will be used by the WPLoader module to bootstrap WordPress.</p>"},{"location":"v3/configuration/#what-is-the-user-of-the-test-database-wploader-should-use","title":"What is the user of the test database WPLoader should use?","text":"<p>In my example it's <code>root</code>.  </p> <p>Similar to the question What is the user of the test database used by the test site? but in relation to the database specified in the question What is the name of the test database WPLoader should use?.  </p> <p>This detail will be used by the WPLoader module to bootstrap WordPress.</p>"},{"location":"v3/configuration/#what-is-the-password-of-the-test-database-wploader-should-use","title":"What is the password of the test database WPLoader should use?","text":"<p>In my example setup it's empty as I've not set any password for the root account.  </p> <p>Similar to the question What is the password of the test database used by the test site? but in relation to the database specified in the question What is the name of the test database WPLoader should use?.  </p> <p>This detail will be used by the WPLoader module to bootstrap WordPress.</p>"},{"location":"v3/configuration/#what-is-the-table-prefix-of-the-test-database-wploader-should-use","title":"What is the table prefix of the test database WPLoader should use?","text":"<p>In my example setup it's <code>wp_</code>.  </p> <p>Similar to the question What is the table prefix of the test database used by the test site? but in relation to the database specified in the question What is the name of the test database WPLoader should use?.  </p> <p>This detail will be used by the WPLoader module to bootstrap WordPress.</p>"},{"location":"v3/configuration/#what-is-the-url-the-test-site","title":"What is the URL the test site?","text":"<p>In my example setup it's <code>http://localhost:8080</code>.  </p> <p>This is the full URL you would have to enter in the browser, on the machine that is running the tests, to reach the test WordPress site homepage.  </p>"},{"location":"v3/configuration/#what-is-the-email-of-the-test-site-wordpress-administrator","title":"What is the email of the test site WordPress administrator?","text":"<p>In my example setup it's <code>admin@wp.localhost</code>.  </p> <p>This detail will be used by the WPLoader module to bootstrap WordPress and, while required, it's usually not relevant unless you're testing email communications.  </p>"},{"location":"v3/configuration/#what-is-the-title-of-the-test-site","title":"What is the title of the test site?","text":"<p>In my example setup it's <code>Acme Plugin Test Site</code>.  </p> <p>This detail will be used by the WPLoader module to bootstrap WordPress and, while required, it's usually not relevant unless you're testing around the site title.  </p>"},{"location":"v3/configuration/#what-is-the-login-of-the-administrator-user-of-the-test-site","title":"What is the login of the administrator user of the test site?","text":"<p>In my example setup it's <code>admin</code>.  </p> <p>This detail will be used by the WPBrowser or WPWebDriver modules to fill in the login details for the administrator user.  </p> <p>It should be the same as the one that allows you to access the site administration area in the WordPress test site, <code>http://localhost:8080/wp-admin</code> in my example.</p>"},{"location":"v3/configuration/#what-is-the-password-of-the-administrator-user-of-the-test-site","title":"What is the password of the administrator user of the test site?","text":"<p>In my example setup it's <code>password</code>.  </p> <p>This detail will be used by the WPBrowser or WPWebDriver modules to fill in the login details for the administrator user.  </p> <p>It should be the same as the one that allows you to access the site administration area in the WordPress test site, <code>http://localhost:8080/wp-admin</code> in my example.</p>"},{"location":"v3/configuration/#are-you-testing-a-plugin-a-theme-or-a-combination-of-both","title":"Are you testing a plugin, a theme or a combination of both?","text":"<p>Depending on the answer the WPLoader module will load, during integration or WordPress \"unit\" tests, your WordPress plugin or theme.  </p> <p>If you replied with <code>both</code> (for \"a combination of both\") then you'll be able to choose the plugins and theme to load in integration and WordPress \"unit\" tests in the following questions.  </p>"},{"location":"v3/configuration/#what-is-the-folderpluginphp-name-of-the-plugin","title":"What is the folder/plugin.php name of the plugin?","text":"<p>This question will be asked only if you replied <code>plugin</code> to the question Are you testing a plugin, a theme or a combination of both?. In my example setup it's <code>acme-plugin/plugin.php</code>.  </p> <p>This is the <code>&lt;folder&gt;/&lt;main-plugin-file&gt;.php</code> path, relative to the WordPress installation plugins folder, to the plugin you are testing.  </p> <p>The main plugin file is the one that contains the plugin header.</p> <p>This detail will be used by the WPLoader module to bootstrap WordPress and load your plugin or theme in integration and WordPress \"unit\" tests.  </p>"},{"location":"v3/configuration/#are-you-developing-a-child-theme","title":"Are you developing a child theme?","text":"<p>This question will be asked only if you replied <code>theme</code> to the question Are you testing a plugin, a theme or a combination of both?. Enter <code>yes</code> if you are developing a child theme.  </p> <p>This detail will be used by the WPLoader module to bootstrap WordPress and load a parent theme along with your theme in integration and WordPress \"unit\" tests.  </p> <p>Please note that wp-browser will not download and install the parent theme in the WordPress installation for you.</p>"},{"location":"v3/configuration/#are-you-using-a-child-theme","title":"Are you using a child theme?","text":"<p>This question will be asked only if you replied <code>both</code> to the question Are you testing a plugin, a theme or a combination of both?. Enter <code>yes</code> if you are using a child theme.  </p> <p>This detail will be used by the WPLoader module to bootstrap WordPress and load a parent theme along with your theme in integration and WordPress \"unit\" tests.  </p> <p>Please note that wp-browser will not download and install the parent theme in the WordPress installation for you.</p>"},{"location":"v3/configuration/#what-is-the-slug-of-the-parent-theme","title":"What is the slug of the parent theme?","text":"<p>This question will be asked only if you replied <code>yes</code> to the question Are you developing a child theme?.  </p> <p>Reply with the slug of the parent theme, that's usually the name of the folder the parent theme lives in, e.g. <code>twentyseventeen</code>.  </p> <p>This detail will be used by the WPLoader module to bootstrap WordPress and load a parent theme along with your theme in integration and WordPress \"unit\" tests.  </p> <p>Please note that wp-browser will not download and install the parent theme in the WordPress installation for you.</p>"},{"location":"v3/configuration/#what-is-the-slug-of-the-theme","title":"What is the slug of the theme?","text":"<p>This question will be asked only if you replied <code>theme</code> to the question Are you testing a plugin, a theme or a combination of both?. Reply with the slug of the theme, that's usually the name of the folder the theme lives in, e.g. <code>twentyseventeen</code>.  </p> <p>This detail will be used by the WPLoader module to bootstrap WordPress and load your theme in integration and WordPress \"unit\" tests.  </p>"},{"location":"v3/configuration/#what-is-the-slug-of-the-theme-you-are-using","title":"What is the slug of the theme you are using?","text":"<p>This question will be asked only if you replied <code>both</code> to the question Are you testing a plugin, a theme or a combination of both?. Reply with the slug of the theme you are using, that's usually the name of the folder the theme lives in, e.g. <code>twentyseventeen</code>.  </p> <p>This detail will be used by the WPLoader module to bootstrap WordPress and load the theme integration and WordPress \"unit\" tests.  </p>"},{"location":"v3/configuration/#does-your-project-needs-additional-plugins-to-be-activated-to-work","title":"Does your project needs additional plugins to be activated to work?","text":"<p>Whether you're testing a plugin, a theme or a combination of both you might need some additional plugins to run your tests.  </p> <p>As an example if I'm testing a WooCommerce extension I need the WooCommerce plugin to test it; this is the place where I can define it.  </p> <p>The required plugins follow the same format as the one used in the question What is the folder/plugin.php name of the plugin?: <code>&lt;plugin-folder&gt;/&lt;plugin-main-file&gt;.php</code>; in the case of WooCommerce it would be <code>woocommerce/woocommerce.php</code>.  </p> <p>This detail will be used by the WPLoader module to bootstrap WordPress and load the required plugins in integration and WordPress \"unit\" tests.  </p> <p>Please note that wp-browser will not download and install the required plugins in the WordPress installation for you.</p>"},{"location":"v3/configuration/#if-you-entered-a-wrong-value","title":"If you entered a wrong value","text":"<p>No worries, just correct the value in the environment file or in the suites configuration files.  </p> <p>The environment file will have the name you specified in the answer the question How would you like to call the env configuration file?.  </p> <p>The suites configuration files can be found in <code>tests/&lt;suite&gt;.suite.yml</code>; e.g. the <code>wpunit</code> suite configuration file will be <code>tests/wpunit.suite.yml</code> file.</p>"},{"location":"v3/configuration/#final-steps","title":"Final steps","text":"<p>To complete the setup I have removed any demo content from the site and activated my plugin in the plugins administration page.</p> <p>In the <code>tests/acceptance.suite.yml</code> file and in the <code>tests/functional.suite.yml</code> file, the configuration file for the <code>acceptance</code> and <code>functional</code> suites respectively, the <code>WPDb</code> module configuration contains a <code>dump</code> configuration parameter:</p> <pre><code>class_name: AcceptanceTester\nmodules:\n    enabled:\n        - WPDb\n    config:\n        WPDb:\n            dump: 'tests/_data/dump.sql'\n</code></pre> <p>The <code>dump</code> parameter is inherited by the <code>WPDb</code> module from the Codeception <code>Db</code> module and defines the SQL dump file that should be loaded before, and between, tests to reset the testing environment to a base known state.  </p> <p>As for any other database-related operation wp-browser will not create the dump for me. I use MySQL binary to export the database state (a dump) with the command:</p> <pre><code>mysqldump -u root -h 127.0.0.1 -P 3306 wordpress &gt; /Users/luca/Sites/wordpress/wp-content/plugins/acme-plugin/tests/_data/dump.sql\n</code></pre> <p>I could use any other combination of tools to produce the dump; using <code>mysql</code> binary is not a requirement. </p> <p>Graphic interfaces like SequelPro, Adminer and the like would be perfectly fine.</p>"},{"location":"v3/configuration/#pre-flight-check","title":"Pre-flight check","text":"<p>There is one last check I need to make before jumping into the creation of tests: making sure all the paths and credentials I've configured wp-browser with are correct.  </p> <p>The bootstrap process generated four suites for me: <code>acceptance</code>, <code>functional</code>, <code>integration</code> and <code>unit</code>. If you have modified the default suite names during the setup your suites names might differ though.  </p> <p>To test the setup I will run each suite and make sure it can run correctly empty of any test. To run a suite of tests I will use the <code>codecept run</code> command:</p> <pre><code>codecept run acceptance\ncodecept run functional\ncodecept run integration\ncodecept run unit\n</code></pre> <p>How comes I'm not using the command <code>codecept run</code> (without specifying the suite names)? See the FAQ entry.</p> <p></p> <p>If you cannot run all the suites without issues then check your configuration settings again, read the errors and see If you entered a wrong value</p>"},{"location":"v3/contributing/","title":"Contributing to wp-browser","text":"<p>There are many ways you can contribute to the project and most of them do not involve having an intimate knowledge of  Codeception or <code>wp-browser</code> internals.</p>"},{"location":"v3/contributing/#reporting-an-issue","title":"Reporting an issue","text":"<p>It can be done from here.  </p> <p>Whenever you find yourself struggling with something, anything, while using <code>wp-browser</code>, please report an issue.  </p> <p>If your issue is not a real issue it will be quickly closed but still provide two values:</p> <ol> <li>it will remain in the repository issues archive making it searchable for any other user having the same, or similar, issue</li> <li>it might shine a light on missing documentation, API or clarity in general.  Take the time to fill in the issue template provided and provide as many details as you can.</li> </ol>"},{"location":"v3/contributing/#reporting-a-bug","title":"Reporting a bug","text":"<p>The project pulls a number of components together and will have bugs. If you run into one of them then provide as much detail as possible when opening the issue. Beside what the issue template will ask feel free to provide as much additional detail as you can.  </p>"},{"location":"v3/contributing/#requesting-documentation","title":"Requesting documentation","text":"<p>If you feel the documentation is lacking or missing something entirely please  report it. No documentation can possibly cover any case ever but there's a good chance you're not alone with the feeling that something is amiss.</p>"},{"location":"v3/contributing/#requesting-new-features","title":"Requesting new features","text":"<p>I've not used all the tools, environments and possible setups <code>wp-browser</code> could cover.  </p> <p>If you feel wp-browser is missing a feature open an issue and try to provide as many details as possible:</p> <ul> <li>What  problem would the new feature solve?</li> <li>Is it possible to do what you would like the new feature to do with the existing API?</li> <li>Could you provide an example of the API/configuration you would like to be able to use?  A new feature can be as small as a new module method or as large as a new module entirely: do not be afraid to ask.  </li> </ul>"},{"location":"v3/contributing/#pull-requests","title":"Pull requests","text":"<p>If you encounter any of the issues above and have a proposed fix for it then open a pull request alongside an issue.  </p> <p>Any pull-request has to pass tests before being merged and I might add code to your pull request to add tests or   update them; I will work with you on the pull request if required.  </p> <p>Just know it's really appreciated.</p>"},{"location":"v3/events-api/","title":"Events api","text":""},{"location":"v3/events-api/#events-api","title":"Events API","text":"<p>Codeception comes with a set of events modules and extensions can subscribe to.  </p> <p>Codeception Events API is, but, only available to Modules and Extensions, and while that might be good for most cases, it might not cover a number of edge cases.  </p> <p>Similarly to WordPress <code>add_action</code> function, <code>wp-browser</code> provides the <code>tad\\WPBrowser\\addListener</code> function:</p> <pre><code>function addListener($eventName, callable $listener, $priority = 0);\n</code></pre> <p>The priority works the reverse way as it does in WordPress: highest number will be processed first!</p> <p>Again similarly to WordPress <code>do_action</code> function, the <code>tad\\WPBrowser\\dispatch</code> function:</p> <pre><code>function dispatch($eventName, $origin = null, array $context = []);\n</code></pre> <p>This is the kind of API that is better shown with an example, though.</p>"},{"location":"v3/events-api/#example","title":"Example","text":"<p>In this example I'm writing acceptance tests and would like to avoid the performance hit that the <code>cleanup</code> configuration parameter of the <code>Db</code>, or <code>WPDb</code>, module implies. The <code>cleanup</code> parameter will trigger the drop of all tables in the test database and the re-import of the SQL dump file, or files, between each test. This will ensure a clean starting fixture between tests, but for larger setup fixtures this might be a long operation that wastes precious seconds when, say, the only change is the addition of 3 posts, as in this example.</p> <p>The Events API allows implementing a tailored clean-up procedure that can avoid costly clean ups between tests.  </p> <p>In the suite bootstrap file, e.g. <code>tests/acceptance/_bootstrap.php</code>, I add a listener on the <code>my-plugin-test/setup-posts</code> event. The event will contain information about what post IDs I've set up in the tests and will provide an instance of the tester object to handle database manipulation. With that information, the costly <code>cleanup</code> procedure can be avoided.</p> <pre><code>&lt;?php\n\n$registerPostsCleanup = static function (tad\\WPBrowser\\Events\\WpbrowserEvent $event) {\n    $ids = $event-&gt;get('ids', []);\n    /** @var \\EventsTester $db */\n    $db = $event-&gt;get('db');\n\n    // When tests are done, then remove all the posts we've created at the start of the test, if any.\n    tad\\WPBrowser\\addListener(\n        Codeception\\Events::TEST_AFTER,\n        static function () use ($ids, $db) {\n            foreach ($ids as $id) {\n                $db-&gt;dontHavePostInDatabase([ 'ID' =&gt; $id ], true);\n                // Ensure the clean up did happen correctly.\n                $db-&gt;dontSeePostInDatabase([ 'ID' =&gt; $id ]);\n                $db-&gt;dontSeePostMetaInDatabase([ 'post_id' =&gt; $id ]);\n            }\n        }\n    );\n};\n\n// Listen for this event to register the posts to remove, along with their custom fields, after the test.\ntad\\WPBrowser\\addListener('test-event-1/setup-posts', $registerPostsCleanup);\n</code></pre> <p>In this simple test I'm adding 3 posts [using the <code>factory</code> provided by the <code>WPLoader</code> module in <code>loadOnly</code> mode][2] and want to make sure those, and the relative meta, are removed at the end of the tests. The <code>WPDb</code> module, extending the <code>Db</code> module from Codeception, will remove the inserted rows, but will not take care of modified rows, or rows not inserted by the <code>WPDb</code> module.</p> <p>Mirroring the requirement of the clean up function I've defined above, I'm passing the post IDs of the posts I've created and the current tester to provide the clean up function with database handling capabilities.</p> <pre><code>&lt;?php\n/** @var Codeception\\Scenario $scenario */\n$I = new AcceptanceTester($scenario);\n$I-&gt;wantTo('add posts and clean them up using the Events API');\n\n/*\n * Use WordPress methods, thanks to the `WPLoader` module, to use WordPress, or our own, API to insert posts.\n * This will prevent, but, `WPDb` from removing the inserted rows and clean up, so we remove the posts and meta\n * with an event and our custom clean-up function.\n */\n$ids = $I-&gt;factory()-&gt;post-&gt;create_many(3, [ 'post_type' =&gt; 'some_post_type' ]);\n\ntad\\WPBrowser\\dispatch('test-event-1/setup-posts', __FILE__, [\n    'ids' =&gt; $ids,\n    'db'  =&gt; $I\n]);\n</code></pre>"},{"location":"v3/extensions/","title":"Extensions","text":"<p>The Codeception testing framework can be extended in a number of ways.  </p> <p>The one this project leverages the most are modules but [extensions are another way].  </p> <p>Modules extend the functionality of Codeception in the context of the tests, while extensions extend its interaction capacities; this is by no means a strict rule but that's usually the case.  </p> <p>The package contains two additional extensions to facilitate testers' life.</p>"},{"location":"v3/extensions/#symlinker","title":"Symlinker","text":"<p>The <code>tad\\WPBrowser\\Extension\\Symlinker</code> extension provides an automation to have the Codeception root directory symbolically linked in a WordPress local installation.  </p> <p>Since version <code>3.9</code> WordPress supports this feature (with some precautions) and the extension takes charge of:</p> <ul> <li>symbolically linking a plugin or theme folder in the specified destination before any suite boots up</li> <li>unlinking that symbolic link after all of the suites did run</li> </ul> <p>It's the equivalent of doing something like this from the command line (on a Mac):</p> <pre><code>ln -s /my/central/plugin/folder/my-plugin /my/local/wordpress/installation/wp-content/plugins/my-plugin\n/my/central/plugin/folder/my-plugin/vendor/bin/codecept run\nrm -rf /my/local/wordpress/installation/wp-content/plugins/my-plugin\n\n</code></pre> <p>The extension needs small configuration in the <code>codeception.yml</code> file:</p> <pre><code>extensions:\n    enabled:\n        - tad\\WPBrowser\\Extension\\Symlinker\n    config:\n        tad\\WPBrowser\\Extension\\Symlinker:\n            mode: plugin\n            destination: /my/local/wordpress/installation/wp-content/plugins\n            rootFolder: /some/plugin/folder\n</code></pre> <p>The arguments are:</p> <ul> <li><code>mode</code> - can be <code>plugin</code> or <code>theme</code> and indicates whether the current Codeception root folder being symlinked is a plugin or a theme one</li> <li><code>destination</code> - the absolute path to the WordPress local installation plugins or themes folder; to take the never ending variety of possible setups into account the extension will make no checks on the nature of the destination: could be any folder.</li> <li><code>rootFolder</code> - optional absolute path to the WordPress plugin or theme to be symlinked root folder; will default to the Codeception root folder</li> </ul>"},{"location":"v3/extensions/#copier","title":"Copier","text":"<p>The <code>tad\\WPBrowser\\Extension\\Copier</code> extension provides an automation to have specific files and folders copied to specified destination files and folders before the suites run.</p> <p>While WordPress handles symbolic linking pretty well there are some cases, like themes and drop-ins, where there is a need for \"real\" files to be put in place.</p> <p>One of such cases is, currently, one where Docker is used to to host and serve the code under test: symbolically linked files cannot be bound inside a container and Docker containers will fail to start in this case.</p> <p>The extension follows the standard Codeception extension activation and has one configuration parameter only:</p> <pre><code>extensions:\n    enabled:\n        - tad\\WPBrowser\\Extension\\Copier\n    config:\n        tad\\WPBrowser\\Extension\\Copier:\n            files:\n                tests/_data/required-drop-in.php: /var/www/wordpress/wp-content/drop-in.php\n                tests/_data/themes/dummy: /var/www/wordpress/wp-content/themes/dummy\n                /Users/Me/Repos/required-plugin: /var/www/wordpress/wp-content/plugins/required-plugin.php\n                /Users/Me/Repos/mu-plugin.php: ../../../../wp-content/mu-plugins/mu-plugin.php\n</code></pre> <p>The extension will handle absolute and relative paths for sources and destinations and will resolve relative paths from the project root folder.</p> <p>When copying directories the extension will only create the destination folder and not the folder tree required; in the example configuration above the last entry specifies that a <code>mu-plugin.php</code> file should be copied to the <code>mu-plugins</code> folder: that <code>mu-plugins</code> folder must be there already.</p>"},{"location":"v3/extensions/#environments-support","title":"Environments support","text":"<p>Being able to symlink a plugin or theme folder into a WordPress installation for testing purposes could make sense when trying to test, as an example, a plugin in a single site and in multi site environment.  </p> <p>Codeception supports environments and the extension does as well specifying a destination for each.</p> <p>As an example the <code>acceptance.suite.yml</code> file might be configured to support <code>single</code> and <code>multisite</code> environments:</p> <pre><code>env:\n    single:\n        modules:\n            config:\n                WPBrowser:\n                    url: 'http://wp.dev'\n                WPDb:\n                    dsn: 'mysql:host=127.0.0.1;dbname=wp'\n    multisite:\n        modules:\n            config:\n                WPBrowser:\n                    url: 'http://mu.dev'\n                WPDb:\n                    dsn: 'mysql:host=127.0.0.1;dbname=mu'\n</code></pre> <p>In the <code>codeception.yml</code> file specifying a <code>destination</code> for each supported environment will tell the extension to symbolically link the plugin or theme file to different locations according to the current environment:</p> <pre><code>extensions:\n    enabled:\n        - tad\\WPBrowser\\Extension\\Symlinker\n    config:\n        tad\\WPBrowser\\Extension\\Symlinker:\n            mode: plugin\n            destination:\n                single: /var/www/wp/wp-content/plugins\n                multisite: /var/www/mu/wp-content/plugins\n</code></pre> <p>If no destination is specified for the current environment the extension will fallback to the first specified one.  </p> <p>A <code>default</code> destination can be specified to override this behaviour.</p> <pre><code>extensions:\n    enabled:\n        - tad\\WPBrowser\\Extension\\Symlinker\n    config:\n        tad\\WPBrowser\\Extension\\Symlinker:\n            mode: plugin\n            destination:\n                default: /var/www/default/wp-content/plugins\n                single: /var/www/wp/wp-content/plugins\n                multisite: /var/www/mu/wp-content/plugins\n</code></pre> <p>When running a suite specifying more than one environment like</p> <pre><code>codecept run acceptance --env foo,baz,multisite\n</code></pre> <p>Then the extension will use the first matched one, in the case above the <code>multisite</code> destination will be used.  </p> <p>The <code>rootFolder</code> parameter too can be set to be environment-aware and it will follow the same logic as the destination:</p> <pre><code>extensions:\n    enabled:\n        - tad\\WPBrowser\\Extension\\Symlinker\n    config:\n        tad\\WPBrowser\\Extension\\Symlinker:\n            mode: plugin\n            rootFolder:\n                dev: /\n                dist: /dist\n                default: /\n            destination:\n                default: /var/www/dev/wp-content/plugins\n                dev: /var/www/dev/wp-content/plugins\n                dist: /var/www/dist/wp-content/plugins\n</code></pre> <p>When running a suite specifying more than one environment like</p> <pre><code>codecept run acceptance --env dist\n</code></pre> <p>Then the extension will symlink the files from <code>/dist</code> into the <code>/var/www/dist/wp-content/plugins</code> folder.</p>"},{"location":"v3/extensions/#events","title":"Events","text":"<p>Due to some internal changes in Codeception <code>4.0</code>, the internal API (really a collection of low-level hacks on my part) that allowed <code>wp-browser</code> to dispatch, and listen for, events in the modules has been removed.</p> <p>If you want to leverage [the event system wp-browser provides] with Codeception default events (e.g. <code>suite.init</code> or <code>test.before</code>), then you will need to use this extension.</p> <p>You will not need this extension if you're not using Codeception version <code>4.0</code>.</p> <p>You will need to enable it in your Codeception main configuration file (e.g. <code>codeception.dist.yml</code>).</p> <pre><code>extensions:\n    enabled:\n        - tad\\WPBrowser\\Extension\\Events\n    config:\n      tad\\WPBrowser\\Extension\\Events:\n        suites: ['acceptance']\n</code></pre> <p>The extension only configuration is the <code>suites</code> parameter that allows specifying the suites the extension should apply to. If the <code>suites</code> parameter is not specified, then the extension will apply to all suites.  </p>"},{"location":"v3/faq/","title":"Faq","text":""},{"location":"v3/faq/#some-common-questions","title":"Some common questions","text":"<p>There are questions I keep receiving via email, GitHub or in person at conferences.</p> <p>I tried to address some of them here.</p>"},{"location":"v3/faq/#is-codeceptionwp-browser-php-52-compatible","title":"Is Codeception/wp-browser PHP 5.2 compatible?","text":"<p>No, Codeception, and wp-browser by extension, will require PHP 5.6 minimum.</p> <p>This does not mean your code cannot be PHP 5.2 compatible: you can test your code using all the possibilities of newer PHP versions and still keep it PHP 5.2 compatible.</p> <p>Just because you can doesn't mean you should though: this documentation will assume a minimum PHP version, for the example and test code, of PHP 5.6.</p>"},{"location":"v3/faq/#can-i-run-unit-tests-with-wp-browsercodeception","title":"Can I run unit tests with wp-browser/Codeception?","text":"<p>Yes, with some distinctions.</p> <p>In the WordPress ecosystem there's a tendency to call any kind of test a \"unit test\". Under that definition will fall tests that are not \"unit\" tests at all.</p> <p>Without drowning into a long and painful battle for definitions this guide will use the following definitions for different levels of testing.</p> <p>The next section will detail the conventions this documentation uses to define different levels of testing in more detail.</p>"},{"location":"v3/faq/#isnt-wordpress-untestable","title":"Isn't WordPress untestable?","text":"<p>No; it's sometimes difficult to test and not as straightforward as other PHP frameworks but it's definitely not untestable.</p> <p>You are writing code that runs on WordPress, not the Core code for WordPress so the question should really be: will you write testable code?</p> <p>It's up to you to decide at what level you want to make your code testable and how much you want to test it.</p>"},{"location":"v3/faq/#do-i-need-to-use-a-specific-local-development-environment-to-use-wp-browser","title":"Do I need to use a specific local development environment to use wp-browser?","text":"<p>No. I've started using wp-browser on a vanilla PHP built-in server to, then, move to MAMP (or XAMP) and, from there, to other solutions.</p> <p>I've configured and used wp-browser on Docker, Vagrant, VVV, Valet and various CI solutions.</p> <p>To this day I keep using different setups on different machines and personally prefer Docker for its portability.</p>"},{"location":"v3/faq/#can-i-only-test-plugins-with-wp-browser","title":"Can I only test plugins with wp-browser?","text":"<p>No, you can test any kind of WordPress application.</p> <p>With \"application\" I mean any PHP software built on top of WordPress: plugins, themes, whole sites.</p>"},{"location":"v3/faq/#if-im-testing-a-site-do-i-have-to-use-the-default-wordpress-file-structure","title":"If I'm testing a site do I have to use the default WordPress file structure?","text":"<p>No, you can use any file structure you want.</p> <p>Some wp-browser modules will need a little help to find your code but, so far, I've never been unable to set it up.</p>"},{"location":"v3/faq/#can-i-use-wp-browser-even-if-my-wordpress-application-doesnt-use-composer","title":"Can I use wp-browser even if my WordPress application doesn't use Composer?","text":"<p>Yes, although wp-browser, as a development tool, cannot be installed without Composer.</p>"},{"location":"v3/faq/#should-i-use-wp-browser-to-test-my-production-servers","title":"Should I use wp-browser to test my production servers?","text":"<p>No. Unless you know very well what you're doing that's a dangerous idea that might leave you with a broken site and an empty database.</p> <p>As almost any testing tool, wp-browser should be used locally on local installations of WordPress that do not contain any valuable information.</p>"},{"location":"v3/faq/#how-can-i-avoid-the-wpdb-module-from-replacing-the-contents-of-my-database","title":"How can I avoid the WPDb module from replacing the contents of my database?","text":"<p>You should always backup any database that contains any information you care about before running any test.</p> <p>You can read the answer to this question in the WPDb module documentation.</p>"},{"location":"v3/faq/#can-i-run-all-my-tests-with-one-command","title":"Can I run all my tests with one command?","text":"<p>Theoretically: yes, in practice: no.</p> <p>When you use <code>codecept run</code> Codeception will run all the tests from all the suites.</p> <p>This, done in the context of other frameworks, will generally not create any problem but, in the context of WordPress it will.</p> <p>While handling a single HTTP request WordPress will set, and use, a number of constants and globals and, likewise, will do plugins and themes that follow WordPress standards.</p> <p>This means that the global context (variable scope) will be left \"dirty\" and contain \"left-over\" constants and globals from the previous tests.</p> <p>An example is one where a test for the handling of Ajax requests sets the <code>DOING_AJAX</code> constant: this will be now set for any test after the one that set it thus breaking, or worse altering, all the following ones.</p> <p>So, in short, run each suite separately.</p>"},{"location":"v3/faq/#can-i-have-more-than-one-suite-of-one-kind","title":"Can I have more than one suite of one kind?","text":"<p>Yes, you should.</p> <p>As an example you might have a <code>frontend</code> suite running acceptance tests on the site frontend and a <code>backend</code> suite running acceptance tests on the site backend.</p> <p>Think of suites as a tool to organize your tests: there's a good measure between too organized and not organized at all.</p>"},{"location":"v3/faq/#ive-used-phpunit-before-for-my-unit-tests-can-i-reuse-that-knowledge-and-code-with-wp-browser","title":"I've used PHPUnit before for my unit tests, can I reuse that knowledge and code with wp-browser?","text":"<p>Yes.</p> <p>Codeception uses PHPUnit as one of its main components and can run PHPUnit tests with little or no modification.</p> <p>As such you can just move your existing PHPUnit tests in a dedicated suite and be ready to run in minutes.</p>"},{"location":"v3/faq/#ive-already-set-up-my-tests-to-run-using-the-core-phpunit-based-test-suite-can-i-keep-using-my-tests","title":"I've already set up my tests to run using the Core PHPUnit-based test suite, can I keep using my tests?","text":"<p>Yes.</p> <p>Codeception uses PHPUnit as one of its main components and can run PHPUnit tests with little or no modification.</p> <p>One of the goals of wp-browser was to make it easier to test WordPress application at an integration level (or \"WordPress unit\" level).</p> <p>As such migrating those tests could be a matter of minutes requiring no modification to the tests if not for moving some files and creating a dedicated suite.</p>"},{"location":"v3/faq/#why-is-the-project-called-wp-browser","title":"Why is the project called wp-browser?","text":"<p>When I started working with Codeception to run my acceptance tests I kept creating steps that I would reuse over and over in my projects.</p> <p>I packed them in a module extending the <code>PHPBrowser</code> module.</p> <p>Being a natural talent in naming things I've called the module <code>WPBrowser</code> and published it. As I started relying on Codeception more and more I kept adding modules but the name remained.</p>"},{"location":"v3/installation/","title":"Installation","text":""},{"location":"v3/installation/#installation","title":"Installation","text":""},{"location":"v3/installation/#where-should-i-install-wp-browser","title":"Where should I install wp-browser?","text":"<p>As a rule-of-thumb wp-browser should be installed in the root folder of your  project.  </p> <p>If your project is a plugin then it should be installed in the root folder of your plugin; if your project is a theme it should be installed in the root folder of your theme.  </p> <p>If your project is a site I'd, personally install it in the site root folder. </p> <p>The purpose of installing wp-browser in the root folder of a project is to keep the code and its tests under version control together.  </p> <p>Exceptions apply but, for most projects, that's what I would do.</p>"},{"location":"v3/installation/#initializing-the-composer-project","title":"Initializing the Composer project","text":"<p>Since Composer is a requirement of wp-browser and the only way to install it you should, first thing, initialize the Composer project.  </p> <p>If you've already initialized the Composer project you can skip this section.</p> <p>Once you've decided where to install wp-browser navigate to that folder using the terminal and type:</p> <pre><code>composer init\n</code></pre> <p>Composer will take you through a number of questions to setup some meta information about your project.  </p> <p>Do not install any dependency yet when asked (unless you know what you're doing) and, as a suggestion, set <code>wordpress-plugin</code> as \"Package Type\".  </p> <p>Also, since WordPress is licensed under the GPL-2.0+ you might want to set the \"License\" of your project to <code>GPL-2.0-or-later</code>.</p>"},{"location":"v3/installation/#installing-wp-browser-as-a-development-dependency","title":"Installing wp-browser as a development dependency","text":"<p>Once you've initialized the Composer project it's time to <code>require</code> wp-browser ; you can read more about the usage of the <code>require</code> command on the Composer documentation.  </p> <p>wp-browser is a testing tool and, as such, should be installed as a project development dependency, not as a normal (production) one.  </p> <p>From the terminal type:</p> <pre><code>composer require --dev lucatume/wp-browser\n</code></pre> <p>This will install the latest stable version of wp-browser and, along with it, Codeception and PHPUnit in the <code>vendor</code> folder of your project.  </p> <p>Once that's done it's time to move to the setup and configuration of wp-browser.</p>"},{"location":"v3/levels-of-testing/","title":"Levels of testing","text":""},{"location":"v3/levels-of-testing/#what-is-a-unit-test-an-acceptance-test","title":"What is a unit test? An acceptance test?","text":"<p>This page has no pretense to be THE source of truth about what is called how in the context of tests; the purpose of this page is to lay out the terminology that I'll use in the documentation to define the levels and component of testing. Wikipedia, forums and other documents online will offer alternate, and equally valid, definitions.</p>"},{"location":"v3/levels-of-testing/#the-signup-page-example","title":"The signup page example","text":"<p>Let's assume I'm testing a WordPress plugin that adds mailing list management and subscription functionalities to a site.  </p> <p>The plugin provides a number of functions and, among them, it will add a sign-up page to receive users applications.  </p>"},{"location":"v3/levels-of-testing/#acceptance-tests","title":"Acceptance tests","text":"<p>In brief: make assertions as a user would.  </p> <p>The user might be tech-savvy as much as I want her to be but still make assertions only on what feedback the site provides. </p> <p>The code below tests a user can subscribe to the mailing list:</p> <pre><code>&lt;?php\n// UserSuccessfulSignupTest.php\n\n// Add a page that contains the shortcode that will render the signup form.\n$I-&gt;havePageInDatabase( [\n    'post_name' =&gt; 'signup',\n    'post_content'=&gt; 'Sign-up for our awesome thing! [signup]',\n] );\n\n// Go to the page.\n$I-&gt;amOnPage( '/signup' );\n\n// Submit the form as a user would submit it. \n$I-&gt;submitForm( '#signup-form', [\n  'name' =&gt; 'Luca',\n  'email' =&gt; 'luca@theAverageDev.com',\n] );\n\n// Make sure I see a confirmation message. \n$I-&gt;waitForElement( '#signup-confirmation' );\n</code></pre>"},{"location":"v3/levels-of-testing/#functional-tests","title":"Functional tests","text":"<p>In brief: make assertions as a developer would.  </p> <p>The test code below asserts front-end submissions are correctly processed from the developer perspective:</p> <pre><code>&lt;?php\n// file tests/functional/SignupSubmissionCest.php\n\nclass SignupSubmissionCest {\n\n    public function _before( FunctionalTester $I ) {\n        // Add a page that contains the shortcode that will render the signup form.\n        $I-&gt;havePageInDatabase( [\n            'post_name' =&gt; 'signup',\n            'post_content'=&gt; 'Sign-up for our awesome thing! [signup]',\n        ] );\n\n        $I-&gt;amOnPage( '/signup' );\n    }\n\n    public function test_good_signup( FunctionalTester $I ) {\n        $I-&gt;sendAjaxPostRequest( '/wp-json/acme/v1/signup', [\n          '_wpnonce' =&gt; $I-&gt;grabAttributeFrom( '#signup-nonce', 'value' ),\n          'name' =&gt; 'Luca',\n          'email' =&gt; 'luca@theAverageDev.com',\n        ] );\n\n        $I-&gt;seeResponseCodeIsSuccessful();\n        $I-&gt;seeUserInDatabase( [ 'user_login' =&gt; 'luca', 'user_email' =&gt; 'luca@theaveragedev.com' ] );\n    }\n\n    public function test_bad_email_signup( FunctionalTester $I ) {\n        $I-&gt;sendAjaxPostRequest( '/wp-json/acme/v1/signup', [\n          '_wpnonce' =&gt; $I-&gt;grabAttributeFrom( '#signup-nonce', 'value' ),\n          'name' =&gt; 'Luca',\n          'email' =&gt; 'not-really-an-email',\n        ] );\n\n        $I-&gt;seeResponseCodeIs( 400 );\n        $I-&gt;dontSeeUserInDatabase( [ 'user_login' =&gt; 'luca', 'user_email' =&gt; 'not-really-an-email' ] );\n    }\n}\n</code></pre> <p>The code looks, initially, like an acceptance test, but differs in its action and assertion phase: in place of filling a form and clicking \"Submit\" it sends a <code>POST</code> request to a REST API endpoint and checks the effect of the submission in the database.  </p> <p>All of these actions fall squarely into what a developer would do, not into what a user could/should be able to do.  </p> <p>Furthermore, the format of the test is not the same as the one used in the acceptance test.  </p> <p>The acceptance test is written in the most eloquent testing format supported by Codeception, the Cept format, this test uses a more PHPUnit-like format, the Cest format.  </p> <p>While the first is easier to skim for  non-developers the second harnesses the power of a re-using pieces of code, the page creation and navigation in the example, to optimize the test code.</p>"},{"location":"v3/levels-of-testing/#integration-tests","title":"Integration tests","text":"<p>In brief: test code modules in the context of a WordPress website.</p> <p>In this type of test the WordPress, and additional plugins code, is loaded in the same variable scope as the tests; this is why in the example below I'm using classes (<code>WP_REST_Request</code>, <code>WP_REST_Response</code>) and methods (<code>register_rest_route</code>) defined by WordPress, not the plugin code.  </p> <p>The REST API request sent by the application form will be handled by a class, <code>Acme\\Signup\\SubmissionHandler</code>, that's been attached to the <code>/wp-json/acme/v1/signup</code> path:</p> <pre><code>&lt;?php\n// file src/rest.php\n\nadd_action( 'rest_api_init', function () {\n    register_rest_route( 'acme/v1', '/signup', array(\n        'methods' =&gt; 'POST',\n        'callback' =&gt; function( WP_Rest_Request $request ) {\n            $email_validator = new Acme\\Signup\\EmailValidator();\n            $handler = new Acme\\Signup\\SubmissionHandler( $email_validator );\n\n            return $handler-&gt;handle( $request );\n        },\n    ) );\n} );\n</code></pre> <p>I want to test the chain of classes and methods that's handling such a request in the context of a WordPress installation.  </p> <p>Integration is usually about testing \"modules\" of code: groups of classes and functions working together to provide a service or complete a task.  </p> <p>In the context of integration testing the class dependencies and/or the context are not mocked.</p> <pre><code>&lt;?php\n// file tests/integration/SubmissionHandlingTest.php\n\nclass SubmissionHandlingTest extends \\Codeception\\TestCase\\WPTestCase {\n    public function test_good_request() {\n        $request = new WP_Rest_Request();\n        $request-&gt;set_body_params( [ 'name' =&gt; 'luca', 'email' =&gt; 'luca@theaveragedev.com' ] );\n        $handler = new  Acme\\Signup\\SubmissionHandler();\n\n        $response = $handler-&gt;handle( $request );\n\n        $this-&gt;assertIntsanceOf( WP_REST_Response::class, $response );\n        $this-&gt;assertEquals( 200, $response-&gt;get_status() );\n        $this-&gt;assertInstanceOf( Acme\\Signup\\Submission_Good::class, $handler-&gt;last_submission() );\n        $this-&gt;assertEquals( 'luca', $handler-&gt;last_submission()-&gt;name() );\n        $this-&gt;assertEquals( 'luca@theaveragedev.com', $handler-&gt;last_submission()-&gt;email() );\n    }\n\n    public function test_bad_email_request() {\n        $request = new WP_Rest_Request();\n        $request-&gt;set_body_params( [ 'name' =&gt; 'luca', 'email' =&gt; 'not-a-valid-email' ] );\n        $handler = new  Acme\\Signup\\SubmissionHandler();\n\n        $response = $handler-&gt;handle( $request );\n\n        $this-&gt;assertIntsanceOf( WP_REST_Response::class, $response );\n        $this-&gt;assertEquals( 400, $response-&gt;get_status() );\n        $this-&gt;assertInstanceOf( Acme\\Signup\\Submission_Bad::class, $handler-&gt;last_submission() );\n        $this-&gt;assertEquals( 'luca', $handler-&gt;last_submission()-&gt;name() );\n        $this-&gt;assertEquals( 'not-a-valid-email', $handler-&gt;last_submission()-&gt;email() );\n    }\n}\n</code></pre> <p>The test format used is the familiar PhpUnit one; the only difference is the base test class that's being extended (<code>\\Codeception\\TestCase\\WPTestCase</code>) is one provided by wp-browser.  </p> <p>In the context of WordPress \"integration\" might also mean testing that filters used by the code have the expected effect.  </p>"},{"location":"v3/levels-of-testing/#unit-tests","title":"Unit tests","text":"<p>In brief: test single classes or functions in isolation.</p> <p>The email address is validated by the <code>Acme\\Signup\\EmailValidator</code> class.  </p> <p>In the test code below I want to make sure the validation works as intended.</p> <pre><code>&lt;?php\n// file tests/unit/EmailValidatorTest.php\n\nclass EmailValidatorTest extends Codeception\\Test\\Test {\n    public function test_good_email_validation() {\n        $validator = new Acme\\Signup\\EmailValidator();\n\n        $this-&gt;assertTrue( $validator-&gt;validate( 'luca@theaveragedev.com' ) ); \n    }\n\n    public function test_bad_email_validation(){\n        $validator = new Acme\\Signup\\EmailValidator();\n\n        $this-&gt;assertTrue( $validator-&gt;validate( 'not-an-email' ) );\n    }\n\n    public function test_tricky_email_validation() {\n        $validator = new Acme\\Signup\\EmailValidator();\n\n        $this-&gt;assertTrue( $validator-&gt;validate( 'luca+signup@theaveragedev.com' ) ); \n    }\n\n    public function test_validation_with_service(){\n        // Stub the validation service.\n        $validation_service = $this-&gt;prophesize( Acme\\Signup\\ValidationService::class );\n        $validation_service-&gt;validate( 'luca@theaveragedev.com' )-&gt;willReturn( true );\n        $validation_service-&gt;validate( 'lucas@theaveragedev.com' )-&gt;willReturn( false );\n        // Build the validator and set it to use the mock validation service.\n        $validator = new Acme\\Signup\\EmailValidator();\n        $validator-&gt;use_service( $validation_service-&gt;reveal() );\n\n        $this-&gt;assertTrue( $validator-&gt;validate( 'luca@theaveragedev.com' ) );\n        $this-&gt;assertFalse( $validator-&gt;validate( 'lucas@theaveragedev.com' ) );\n    }\n}\n</code></pre> <p>Unit tests is where stubbing/mocking/spying of dependencies is used to gain total control over the input and context the class is using.  </p> <p>In the last test method I'm doing exactly that testing the email validator with an external validation service.</p> <p>In the example I'm using the Prophecy mock engine that comes with PHPUnit along with its own mocking/stubbing/spying solutions.  </p> <p>There are other mocking engines (e.g Mockery) that could be used.</p>"},{"location":"v3/levels-of-testing/#wordpress-unit-tests","title":"WordPress \"unit\" tests","text":"<p>In brief: test single classes or functions that require WordPress code in as much isolation as possible.  </p> <p>This is what most people referring to \"unit tests\" in the context of WordPress is talking about.  </p> <p>The purpose of this kind of tests is to test one class of a WordPress application, or one function, that requires a WordPress-defined function or class with a unit testing approach.  </p> <p>In the example below I'm testing the <code>Acme\\Signup\\SubmissionHandler</code> class on a \"unit\" level making sure it will mark a request as bad if the email is not a valid one. </p> <pre><code>&lt;?php\n// file tests/unit/SubmissionHandlerTest.php\nclass SubmissionHandlerTest extends Codeception\\Test\\Test {\n    protected  $request;\n    protected $validator;\n\n    public function setUp() {\n        // Mock the request.\n        $this-&gt;request = $this-&gt;prophesize( WP_REST_Request::class );\n        // Spy on the validator.\n        $this-&gt;validator = $this-&gt;prophesize( Acme\\Signup\\EmailValidator::class );\n    }\n\n    public function test_email_is_validated_by_default() {\n        $this-&gt;request-&gt;get_param( 'name' )-&gt;willReturn( 'luca' );\n        $this-&gt;request-&gt;get_param( 'email' )-&gt;willReturn( 'luca@theaveragedev.com' );\n\n        $handler = new Acme\\Signup\\SubmissionHandler( $this-&gt;validator-&gt;reveal() );\n        $handler-&gt;set_validator( $this-&gt;validator );\n        $response = $handler-&gt;handle( $this-&gt;request-&gt;reveal() );\n\n        $this-&gt;assertInstanceOf( WP_REST_Response::class, $response );\n        // Verify on the validator spy.\n        $this-&gt;validator-&gt;validate( 'luca@theaveragedev.com' )-&gt;shouldHaveBeenCalled();\n    }\n\n    public function test_will_not_validate_email_if_missing() {\n        $this-&gt;request-&gt;get_param( 'name' )-&gt;willReturn( 'luca' );\n        $this-&gt;request-&gt;get_param( 'email' )-&gt;willReturn( '' );\n\n        $handler = new Acme\\Signup\\SubmissionHandler( $this-&gt;validator-&gt;reveal() );\n        $handler-&gt;set_validator( $this-&gt;validator );\n        $response = $handler-&gt;handle( $this-&gt;request-&gt;reveal() );\n\n        $this-&gt;assertInstanceOf( WP_REST_Response::class, $response );\n        // Verify on the validator spy.\n        $this-&gt;validator-&gt;validate( Argument::any() )-&gt;shouldNotHaveBeenCalled();\n    }\n}\n</code></pre> <p>The class uses the <code>WP_REST_Request</code> and <code>WP_Rest_Response</code> classes as input and output and will probably, internally, use more functions defined by WordPress.  </p> <p>One solution to avoid loading WordPress, could be to rewrite test versions of each and all the WordPress functions and classes needed by all the classes I want to unit test; this would require updating each time the classes requirements change.  </p> <p>Furthermore internationalization (e.g. <code>__()</code>) and filtering (e.g <code>apply_filters</code>) functions would not need to be mocked if not in specific cases and would pretty much be copy and paste versions of the WordPres ones.  </p> <p>Loading single pieces of WordPress is a dangerous and brittle endeavour and it's not supported by the  framework.</p> <p>To avoid all this WordPress \"unit tests\" pay the price of having to bootstrap WordPress, thus requiring a database connection.</p> <p>This kind of test setup and level is the one you can see in the PHPUnit Core suite of WordPress itself.</p>"},{"location":"v3/requirements/","title":"Requirements","text":""},{"location":"v3/requirements/#requirements","title":"Requirements","text":"<p>wp-browser has some requirements your development environment will need to fulfill for it to work correctly.  </p>"},{"location":"v3/requirements/#php","title":"PHP","text":"<p>The minimum supported version of PHP supported by wp-browser is 5.6.  </p> <p>This requirement does not reflect on the minimum PHP version your plugin might require; see the FAQs for more information.</p>"},{"location":"v3/requirements/#composer","title":"Composer","text":"<p>There is no <code>phar</code> version of wp-browser and it can only be installed using Composer.  </p> <p>See Composer installation guide for more information.</p>"},{"location":"v3/requirements/#wordpress-mysql-apachenginx","title":"WordPress, MySQL, Apache/Nginx","text":"<p>wp-browser will not download, install and configure WordPress for you.  </p> <p>It will also not download, install and setup MySQL, Apache, Nginx or any other technology required by a fully functional WordPress installation for you.  </p> <p>You need to set up a local WordPress installation on your own; you can use your preferred solution to do it.</p> <p>In the documentation I will show automated ways to do this but, for most projects, that's not the best solution.</p>"},{"location":"v3/setting-up-minimum-wordpress-installation/","title":"Setting up minimum wordpress installation","text":""},{"location":"v3/setting-up-minimum-wordpress-installation/#setting-up-a-minimum-wordpress-installation","title":"Setting up a minimum WordPress installation","text":"<p>As mentioned in Installation section wp-browser will not download, configure and install WordPress for you.  </p> <p>On a high level, once WordPress is installed and configured, whatever local development environment solution you've used, there are some information you'll need to gather before moving into wp-browser configuration.  </p> <p>While there will be a section dedicated to different environments and setups I will outline below the example setup I will use, in the next section, to configure wp-browser:</p> <ul> <li>WordPress is installed, on my machine, at <code>/Users/luca/Sites/wordpress</code>.</li> <li>I'm running MySQL server locally; I can connect to the MySQL server with the command <code>mysql -u root -h 127.0.0.1 -P 3306</code>; there is no password.</li> <li>I've created two databases, <code>wordpress</code> and <code>tests</code>, with the command:     <code>bash     mysql -u root -h 127.0.0.1 -P 3306 -e \"create database if not exists wordpress; create database if not exists tests\"</code></li> <li> <p>I've configured the <code>/Users/luca/Sites/wordpress/wp-config.php</code> file like below (redacted for brevity):     ```php     &lt;?php     define( 'DB_NAME', 'wordpress' );     define( 'DB_USER', 'root' );     define( 'DB_PASSWORD', '' );     define( 'DB_HOST', '127.0.0.1' );     define( 'DB_CHARSET', 'utf8' );     define( 'DB_COLLATE', '' );</p> <p>$table_prefix = 'wp_';</p> <p>if ( ! defined( 'ABSPATH' ) )     define( 'ABSPATH', dirname( FILE ) . '/' );</p> <p>require_once ABSPATH . 'wp-settings.php'; <code>* To serve the site I'm using PHP built-in server with the command:</code>bash (cd /Users/luca/Sites/wordpress; php -S localhost:8080) <code>`` * I can access the WordPress homepage at</code>http://localhost:8080<code>and the administration area at</code>http://localhost:8080/wp-admin<code>. * I've installed WordPress via its UI (</code>http://localhost:8080/wp-admin<code>), the administrator username is</code>admin<code>, the administrator password is</code>password<code>. * I'm testing a plugin and that plugin is in the folder, relative to the WordPress root folder,</code>wp-content/plugins/acme-plugin`.</p> </li> </ul> <p>With all the steps above done I can now move into the actual wp-browser configuration phase.</p>"},{"location":"v3/sponsors/","title":"Sponsors","text":"<p>I maintain the wp-browser project while working full-time as a freelance and dedicating my spare time to it. I do it with passion and for \"love of the craft,\" but it can become a chore at times.</p> <p>Appreciation, the most common form of support, goes a long way but does not pay the bills. I want to dedicate more structured time to the project, and that would mean turning down some freelance work offers. To that end, I've applied for GitHub sponsorship system.</p>"},{"location":"v3/sponsors/#current-sponsors","title":"Current Sponsors","text":"<p>My sincere thanks to my sponsors: you make the above easier.</p> <ul> <li>@BenBornschein</li> <li>@Borlabs</li> <li>@TimothyBJacobs</li> <li>@bordoni</li> <li>@borkweb</li> <li>@dingo-d</li> <li>@francescamarano</li> <li>@jerclarke</li> <li>@johnbillion</li> <li>@joppuyo</li> <li>@kkarpieszuk</li> <li>@pods-framework</li> <li>@roborourke</li> <li>@wp-staging</li> <li>@zackkatz</li> </ul>"},{"location":"v3/advanced/run-in-separate-process/","title":"Run in separate process","text":""},{"location":"v3/advanced/run-in-separate-process/#running-tests-in-separate-processes","title":"Running tests in separate processes","text":"<p>PHPUnit offers the possibility to run tests in a separate PHP process; Codeception does not officially support the option as of version 4.0.</p> <p>The wp-browser project tries to fill that gap by supporting the <code>@runInSeparateProcess</code> annotation. This support comes with some caveats, though:</p> <ol> <li>The support is only for test cases extending the <code>Codeception\\TestCase\\WPTestCase</code> class (the base test case for integration or \"WordPress unit\" tests)</li> <li>The support wp-browser provides only supports the <code>@preserveGlobalState</code> annotation with the <code>disabled</code> value; this means there is no support for preserving global state between tests.</li> </ol> <p>Read more about what this means in PHPUnit documentation.</p>"},{"location":"v3/advanced/run-in-separate-process/#why-run-tests-in-a-separate-php-process","title":"Why run tests in a separate PHP process?","text":"<p>One main reason: isolation.</p> <p>What does \"isolation\" means?</p> <p>Before answering that question, it's essential to understand, via an example, why a lack of isolation might be an issue.</p> <p>I want to test the <code>get_api</code> function. The function will return the correct singleton instance of an API handling class: an instance of <code>Api</code> when the function is called in non-admin context, and an instance of <code>AdminApi</code> when the function is called in admin context. The <code>get_api</code> function is acting as a service locator.</p> <pre><code>&lt;?php\nfunction get_api(){\n    static $api;\n\n    if(null !== $api){\n        return $api;\n    }\n\n    if( is_admin() ) {\n        $api = new Admin_Api();\n    } else {\n        $api = new Api();\n    }\n\n    return $api;\n}\n</code></pre> <p>There are two challenges to testing this function:</p> <ol> <li>The <code>is_admin</code> function, defined by WordPress, looks up a <code>WP_ADMIN</code> constant to know if the context of the current request is an administration UI one or not.</li> <li>The <code>get_api</code> function will check for the context and resolve and build the correct instance only once, the first time it's called in the context of a request. </li> </ol> <p>There are some possible solutions to this problem:</p> <p>a. Refactor the <code>get_api</code> function into a method of an <code>Api_Factory</code> object taking the context as a dependency, thus allowing injection of the \"context\" (which implies the creation of a Context adapter that will proxy its <code>is_admin</code> method to the <code>is_admin</code> function). You can find the code for such refactoring in the OOP refactoring of get_api section. b. Refactor the <code>get_api</code> function to accept the current <code>is_admin</code> value as an input argument, <code>get_api( $is_admin )</code>, this refactoring moves part of the complexity of getting hold of the correct instance of the API handler on the client code. Adding more build condition and checks, e.g., if the current request is a REST request or not or some tests on the user authorizations, then, requires adding more input arguments to the <code>get_api</code> function: the knowledge of the implementation of the <code>get_api</code> method will \"leak\" to the client code having to replicate complexity throughout the system.</p> <p>I want to layout possible solutions to the problem to show there is always a design alternative to make code testable that might or might not fit the current time or scope constraint.  </p> <p>In this example, I've inherited the <code>get_api</code> function from the existing code, and it cannot be changed, yet I want to test it dealing with the two problems outlined above.</p>"},{"location":"v3/advanced/run-in-separate-process/#running-tests-in-separate-php-processes","title":"Running tests in separate PHP processes","text":"<p>To test the <code>get_api</code> function shown above I've created a new <code>wpunit</code> type of test:</p> <pre><code>vendor/bin/codecept g:wpunit integration \"api\"\n</code></pre> <p>The command scaffolds a <code>test/integration/apiTest.php</code> file that I've modified to ensure full coverage of the <code>get_api</code> function:</p> <pre><code>&lt;?php\n\nclass apiTest extends \\Codeception\\TestCase\\WPTestCase\n{\n    public function test_get_api_exists()\n    {\n        $this-&gt;assertTrue(function_exists('get_api'));\n    }\n\n    public function test_get_api_will_cache()\n    {\n        $this-&gt;assertSame(get_api(), get_api());\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState disabled\n     */\n    public function test_get_api_will_return_api_if_not_admin()\n    {\n        // Let's make sure we're NOT in admin context.\n        define('WP_ADMIN', false);\n\n        $api = get_api();\n\n        $this-&gt;assertInstanceOf(Api::class, $api);\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState disabled\n     */\n    public function test_get_api_will_cache_api_if_not_admin()\n    {\n        // Let's make sure we're NOT in admin context.\n        define('WP_ADMIN', false);\n\n        $api = get_api();\n\n        $this-&gt;assertSame(get_api(), $api);\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState disabled\n     */\n    public function test_get_api_will_return_api_if_is_admin()\n    {\n        // Let's make sure we're NOT in admin context.\n        define('WP_ADMIN', true);\n\n        $api = get_api();\n\n        $this-&gt;assertInstanceOf(AdminApi::class, $api);\n    }\n\n    /**\n     * @runInSeparateProcess\n     * @preserveGlobalState disabled\n     */\n    public function test_get_api_will_cache_api_if_is_admin()\n    {\n        // Let's make sure we're NOT in admin context.\n        define('WP_ADMIN', true);\n\n        $api = get_api();\n\n        $this-&gt;assertSame(get_api(), $api);\n    }\n}\n</code></pre> <p>Some pieces of this code are worth pointing out:</p> <ol> <li>There are two test methods, <code>test_get_api_exists</code> and <code>test_get_api_will_cache</code> that are not running in a separate process. Running tests in a separate process provide isolation at the cost of speed, only tests that require isolation should run in a separate PHP process.  </li> <li>I instruct the Codeception and PHPUnit test runner to run a test method in a different process by adding two annotations that are both required  precisely as shown:     ```php     /**<ul> <li>@runInSeparateProcess</li> <li>@preserveGlobalState disabled  */ ```</li> </ul> </li> <li>The isolation part of this testing approach shines through when I <code>define</code>, in the last four tests, the <code>WP_ADMIN</code> constant multiple times. If I try to do that in test code running in the same PHP process, then the second <code>define</code> call would cause a fatal error.</li> <li>The isolation has also taken care of the second issue where the <code>get_api</code> function caches the <code>$api</code> instance after its first resolution in a <code>static</code> variable: since each test happens in a self-contained, dedicated PHP process, the <code>static $api</code> variable will be <code>null</code> at the start of each test.</li> </ol>"},{"location":"v3/advanced/run-in-separate-process/#can-i-run-some-tests-in-the-same-process-and-some-in-a-separate-process","title":"Can I run some tests in the same process and some in a separate process?","text":"<p>Yes. In the example test code in the previous section, the <code>test_get_api_exists</code> and <code>test_get_api_will_cache</code> test methods are not running in separate processes.  </p> <p>In your test cases extending the <code>Codeception\\TestCase\\WPTestCase</code>, you can mix test methods running in the primary PHP process and those running in a separate PHP process without issues.</p>"},{"location":"v3/advanced/run-in-separate-process/#oop-refactoring-of-get_api","title":"OOP refactoring of get_api","text":"<p>In the Why run tests in a separate PHP process? section I've outlined a possible refactoring of the <code>get_api</code> function to make it testable without requiring the use of separate PHP processes.</p> <p>I'm providing this refactoring code below for the sake of completeness, the judgment of which approach is \"better\" is up to the reader.</p> <pre><code>&lt;?php\n\nclass Context_Adapter{\n\n    public function is_admin(){\n        return \\is_admin();\n    }\n\n}\n\nclass Api_Factory{\n\n    private $api;\n    private $context;\n\n    public function __construct(Context_Adapter $context){\n        $this-&gt;context = $context;\n    }\n\n    public function getApi(){\n        if(null !== $this-&gt;api){\n            return $this-&gt;api;    \n        }\n\n        if($this-&gt;context-&gt;is_admin()){\n            $api = new Admin_Api;\n        } else {\n            $api = new Api;\n        }\n\n        return $api;\n    }\n}\n</code></pre> <p>Now the <code>Api_Factory</code> class can be injected by injecting a mocked <code>Context_Adapter</code> class, modifying the return value of the <code>Context_Adapter::is_admin</code> method.  </p> <p>Due to the supposed requirement of the API instance being a singleton, this solution will also require some container or service-locator to ensure at most only one instance of the <code>Api_Factory</code> exists at any given time in the context of a request.</p>"},{"location":"v3/migration/from-version-2-to-version-3/","title":"From version 2 to version 3","text":""},{"location":"v3/migration/from-version-2-to-version-3/#migrating-projects-from-version-2-of-wp-browser-to-version-3","title":"Migrating projects from version 2 of wp-browser to version 3","text":"<p>Version 3 of wp-browser removed, to allow for broader compatibility with PHP and Composer versions, some of its  dependencies and modified some of its methods. Here is a list of changes and the suggested courses of action:</p> <ul> <li>Removed <code>symfony/process</code> to launch and manage external processes; re-add it your project development  requirements using <code>composer require --dev symfony/process</code>.</li> <li>Removed the <code>wp-cli/wp-cli-bundle</code> dependency; if you were relying on non-core  packages, then re-add it to your project development requirements using <code>composer require --dev wp-cli/wp-cli-bundle</code>.  </li> <li>Removed the <code>WithWpCli::executeBackgroundWpCliCommand</code> trait method, and, as a consequence, the  <code>WPCLI::executeBackgroundWpCliCommand</code> module method; you could have used the latter, if this was the case, then  require the <code>symfony/process</code> as explained above and launch processes in background using its API; find out more.</li> <li>Refactored the <code>WPCLI</code> module to build and escape string command lines differently; the handling of command-line arguments for the <code>WPCLI</code> module has been modified to make it a bit more consistent and robust; as a consequence, you might experience some breakages in string commands that used to work correctly before; should this be the case then either modify your code to provide the command in array format (taking care of the correct escaping in your code), or make sure to  pass a correctly structured command string to the <code>WPCLI</code> module.</li> </ul>"},{"location":"v3/modules/WPBrowser/","title":"WPBrowser module","text":"<p>This module should be used in acceptance and functional tests, see levels of testing for more information.  </p> <p>This module extends the PHPBrowser module adding WordPress-specific configuration parameters and methods.  </p> <p>The module simulates a user interaction with the site without Javascript support; if you need to test your project with Javascript support use the WPWebDriver module.  </p>"},{"location":"v3/modules/WPBrowser/#module-requirements-for-codeception-40","title":"Module requirements for Codeception 4.0+","text":"<p>This module requires the <code>codeception/module-phpbrowser</code> Composer package to work when wp-browser is used with Codeception 4.0.  </p> <p>To install the package run: </p> <pre><code>composer require --dev codeception/module-phpbrowser:^1.0\n</code></pre>"},{"location":"v3/modules/WPBrowser/#configuration","title":"Configuration","text":"<p>Since this module extends the <code>PHPBrowser</code> module provided by Codeception, please refer to the PHPBrowser configuration section for more information about the base configuration parameters.  </p> <ul> <li><code>url</code> required - Start URL of your WordPress project, e.g. <code>http://wp.test</code>.</li> <li><code>headers</code> - Default headers are set before each test; this might be useful to simulate a specific user agent during the tests or to identify the request source. Note that the headers defined in the config should be prefaced with <code>HTTP_</code> in your <code>wp-config.php</code> file. This can be used to select which database to use.</li> <li><code>handler</code> (default: <code>curl</code>) - The Guzzle handler to use. By default <code>curl</code> is used, also possible to pass <code>stream</code>, or any valid class name as Handler.</li> <li><code>middleware</code> - The Guzzle middlewares to add. An array of valid callables is required; see here for more information.</li> <li><code>curl</code> - curl options; only applied if using the <code>curl</code> handler; more options are available.</li> <li><code>adminUsername</code> required - This is the login name, not the \"nice\" name, of the administrator user of the WordPress test site. This will be used to fill the username field in WordPress login page.  </li> <li><code>adminPassword</code> required - This is the the password of the administrator use of the WordPress test site. This will be used to fill the password in WordPress login page.  </li> <li><code>adminPath</code> required - The path, relative to the WordPress test site home URL, to the administration area, usually <code>/wp-admin</code>.</li> </ul>"},{"location":"v3/modules/WPBrowser/#example-configuration","title":"Example configuration","text":"<pre><code>  modules:\n      enabled:\n          - WPBrowser\n      config:\n          WPBrowser:\n              url: 'http://wordpress.localhost'\n              adminUsername: 'admin'\n              adminPassword: 'password'\n              adminPath: '/wp-admin'\n              headers:\n                X_TEST_REQUEST: 1\n                X_WPBROWSER_REQUEST: 1\n</code></pre> <p>Read here how to use the headers information to automatically change the database during acceptance and functional tests.</p>"},{"location":"v3/modules/WPBrowser/#public-api","title":"Public API","text":"<ul> <li> activatePlugin </li> <li> amEditingPostWithId </li> <li> amOnAdminAjaxPage </li> <li> amOnAdminPage </li> <li> amOnCronPage </li> <li> amOnPagesPage </li> <li> amOnPluginsPage </li> <li> deactivatePlugin </li> <li> dontSeePluginInstalled </li> <li> grabCookiesWithPattern </li> <li> grabWordPressTestCookie </li> <li> logOut </li> <li> loginAs </li> <li> loginAsAdmin </li> <li> seeErrorMessage </li> <li> seeMessage </li> <li> seePluginActivated </li> <li> seePluginDeactivated </li> <li> seePluginInstalled </li> <li> seeWpDiePage </li> </ul> activatePlugin <p>In the plugin administration screen activates a plugin clicking the \"Activate\" link. The method will not handle authentication to the admin area.</p> <pre><code>// Activate a plugin.\n  $I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;activatePlugin('hello-dolly');\n  // Activate a list of plugins.\n  $I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;activatePlugin(['hello-dolly','another-plugin']);\n</code></pre> Parameters <ul> <li><code>string/\\Codeception\\Module\\array $pluginSlug - The plugin slug, like \"hello-dolly\" or a list of plugin slugs. amEditingPostWithId <p>Go to the admin page to edit the post with the specified ID. The method will not handle authentication the admin area.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $postId = $I-&gt;havePostInDatabase();\n  $I-&gt;amEditingPostWithId($postId);\n  $I-&gt;fillField('post_title', 'Post title');\n</code></pre> Parameters <ul> <li><code>int</code> $id - The post ID.</li></ul> amOnAdminAjaxPage <p>Go to the <code>admin-ajax.php</code> page to start a synchronous, and blocking, <code>GET</code> AJAX request. The method will not handle authentication, nonces or authorization.</p> <pre><code>$I-&gt;amOnAdminAjaxPage(['action' =&gt; 'my-action', 'data' =&gt; ['id' =&gt; 23], 'nonce' =&gt; $nonce]);\n</code></pre> Parameters <ul> <li><code>string/\\Codeception\\Module\\array $queryVars - A string or array of query variables to append to the AJAX path. amOnAdminPage <p>Go to a page in the admininstration area of the site. This method will not handle authentication to the administration area.</p> <pre><code>$I-&gt;loginAs('user', 'password');\n  // Go to the plugins management screen.\n  $I-&gt;amOnAdminPage('/plugins.php');\n</code></pre> Parameters <ul> <li><code>string</code> $page - The path, relative to the admin area URL, to the page.</li></ul> amOnCronPage <p>Go to the cron page to start a synchronous, and blocking, <code>GET</code> request to the cron script.</p> <pre><code>// Triggers the cron job with an optional query argument.\n  $I-&gt;amOnCronPage('/?some-query-var=some-value');\n</code></pre> Parameters <ul> <li><code>string/\\Codeception\\Module\\array $queryVars - A string or array of query variables to append to the AJAX path. amOnPagesPage <p>Go the \"Pages\" administration screen. The method will not handle authentication.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPagesPage();\n  $I-&gt;see('Add New');\n</code></pre> amOnPluginsPage <p>Go to the plugins administration screen. The method will not handle authentication.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;activatePlugin('hello-dolly');\n</code></pre> deactivatePlugin <p>In the plugin administration screen deactivate a plugin clicking the \"Deactivate\" link. The method will not handle authentication and navigation to the plugins administration page.</p> <pre><code>// Deactivate one plugin.\n  $I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;deactivatePlugin('hello-dolly');\n  // Deactivate a list of plugins.\n  $I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;deactivatePlugin(['hello-dolly', 'my-plugin']);\n</code></pre> Parameters <ul> <li><code>string/\\Codeception\\Module\\array $pluginSlug - The plugin slug, like \"hello-dolly\", or a list of plugin slugs. dontSeePluginInstalled <p>Assert a plugin is not installed in the plugins administration screen. The method will not handle authentication and navigation to the plugin administration screen.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;dontSeePluginInstalled('my-plugin');\n</code></pre> Parameters <ul> <li><code>string</code> $pluginSlug - The plugin slug, like \"hello-dolly\".</li></ul> grabCookiesWithPattern <p>Returns all the cookies whose name matches a regex pattern.</p> <pre><code>$I-&gt;loginAs('customer','password');\n  $I-&gt;amOnPage('/shop');\n  $cartCookies = $I-&gt;grabCookiesWithPattern(\"#^shop_cart\\\\.*#\");\n</code></pre> Parameters <ul> <li><code>string</code> $cookiePattern - The regular expression pattern to use for the matching.</li></ul> grabWordPressTestCookie <p>Returns WordPress default test cookie object if present.</p> <pre><code>// Grab the default WordPress test cookie.\n  $wpTestCookie = $I-&gt;grabWordPressTestCookie();\n  // Grab a customized version of the test cookie.\n  $myTestCookie = $I-&gt;grabWordPressTestCookie('my_test_cookie');\n</code></pre> Parameters <ul> <li><code>string</code> $name - Optional, overrides the default cookie name.</li></ul> logOut <p>Navigate to the default WordPress logout page and click the logout link.</p> <pre><code>// Log out using the `wp-login.php` form and return to the current page.\n  $I-&gt;logOut(true);\n  // Log out using the `wp-login.php` form and remain there.\n  $I-&gt;logOut(false);\n  // Log out using the `wp-login.php` form and move to another page.\n  $I-&gt;logOut('/some-other-page');\n</code></pre> Parameters <ul> <li><code>bool/bool/string</code> $redirectTo - Whether to redirect to another (optionally specified) page after the logout.</li></ul> loginAs <p>Login as the specified user. The method will not follow redirection, after the login, to any page.</p> <pre><code>$I-&gt;loginAs('user', 'password');\n  $I-&gt;amOnAdminPage('/');\n  $I-&gt;see('Dashboard');\n</code></pre> Parameters <ul> <li><code>string</code> $username - The user login name.</li> <li><code>string</code> $password - The user password in plain text.</li></ul> loginAsAdmin <p>Login as the administrator user using the credentials specified in the module configuration. The method will not follow redirection, after the login, to any page.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnAdminPage('/');\n  $I-&gt;see('Dashboard');\n</code></pre> seeErrorMessage <p>In an administration screen look for an error admin notice. The check is class-based to decouple from internationalization. The method will not handle authentication and navigation the administration area. <code>.notice.notice-error</code> ones.</p> <pre><code>$I-&gt;loginAsAdmin()\n  $I-&gt;amOnAdminPage('/');\n  $I-&gt;seeErrorMessage('.my-plugin');\n</code></pre> Parameters <ul> <li><code>string/string/\\Codeception\\Module\\array $classes - A list of classes the notice should have other than the seeMessage <p>In an administration screen look for an admin notice. The check is class-based to decouple from internationalization. The method will not handle authentication and navigation the administration area.</p> <pre><code>$I-&gt;loginAsAdmin()\n  $I-&gt;amOnAdminPage('/');\n  $I-&gt;seeMessage('.missing-api-token.my-plugin');\n</code></pre> Parameters <ul> <li><code>string/\\Codeception\\Module\\array/string $classes - A list of classes the message should have in addition to the <code>.notice</code> one. seePluginActivated <p>Assert a plugin is activated in the plugin administration screen. The method will not handle authentication and navigation to the plugin administration screen.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;seePluginActivated('my-plugin');\n</code></pre> Parameters <ul> <li><code>string</code> $pluginSlug - The plugin slug, like \"hello-dolly\".</li></ul> seePluginDeactivated <p>Assert a plugin is not activated in the plugins administration screen. The method will not handle authentication and navigation to the plugin administration screen.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;seePluginDeactivated('my-plugin');\n</code></pre> Parameters <ul> <li><code>string</code> $pluginSlug - The plugin slug, like \"hello-dolly\".</li></ul> seePluginInstalled <p>Assert a plugin is installed, no matter its activation status, in the plugin administration screen. The method will not handle authentication and navigation to the plugin administration screen.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;seePluginInstalled('my-plugin');\n</code></pre> Parameters <ul> <li><code>string</code> $pluginSlug - The plugin slug, like \"hello-dolly\".</li></ul> seeWpDiePage <p>Checks that the current page is one generated by the <code>wp_die</code> function. The method will try to identify the page based on the default WordPress die page HTML attributes.</p> <pre><code>$I-&gt;loginAs('user', 'password');\n  $I-&gt;amOnAdminPage('/forbidden');\n  $I-&gt;seeWpDiePage();\n</code></pre> <p>This class extends \\Codeception\\Module\\PhpBrowser</p> <p>This class implements \\Codeception\\Lib\\Interfaces\\MultiSession, \\Codeception\\Lib\\Interfaces\\Remote, \\Codeception\\Lib\\Interfaces\\Web, \\Codeception\\Lib\\Interfaces\\PageSourceSaver, \\Codeception\\Lib\\Interfaces\\ElementLocator, \\Codeception\\Lib\\Interfaces\\ConflictsWithModule</p>"},{"location":"v3/modules/WPCLI/","title":"WPCLI module","text":"<p>This module should be used in acceptance and functional tests to setup, or verify, tests pre and post conditions using WP-CLI commands. This module allows invoking WP-CLI commands, refer to the official site for more information.</p> <p>The module will use its own version of WP-CLI, not the one installed in the machine running the tests!</p> <p>By default, wp-browser will only include the <code>wp-cli/wp-cli</code> package; this package contains the basic files to run WP-CLI and does not contain all the commands that come with a typical wp-cli installation. If, in your tests, you require all the commands that usually come installed with WP-CLI, then you should require the <code>wp-cli/wp-cli-bundle</code> package as a development dependency of your project, see below.</p>"},{"location":"v3/modules/WPCLI/#fixing-not-a-registered-command-issue","title":"Fixing \"not a registered command\" issue","text":"<p>To keep the conflicts at a manageable level, the wp-browser project does not include all the commands WP-CLI usually comes bundled with. Running, in the context of an automated test, a WP-CLI command that would work on your machine, e.g. <code>wp plugin list --status=active</code>, will not work on a default installation of wp-browser and you will get the following error message:</p> <pre><code>[ModuleException] WPCLI: wp-cli terminated with status [1] and output [Error: 'plugin' is not a registered wp command. See 'wp help' for available commands.]\n</code></pre> <p>To resolve the message just add the package you require as a development dependency or add the whole WP-CLI bundle:</p> <pre><code>composer require --dev wp-cli/wp-cli-bundle\n</code></pre> <p>The package will make all the default WP-CLI commands available to the WP-CLI version used in tests.</p>"},{"location":"v3/modules/WPCLI/#module-requirements-for-codeception-40","title":"Module requirements for Codeception 4.0+","text":"<p>This module requires the <code>codeception/module-cli</code> Composer package to work when wp-browser is used with Codeception 4.0.  </p> <p>To install the package run: </p> <pre><code>composer require --dev codeception/module-cli:^1.0\n</code></pre>"},{"location":"v3/modules/WPCLI/#detecting-requests-coming-from-this-module","title":"Detecting requests coming from this module","text":"<p>When it runs this module will set the <code>WPBROWSER_HOST_REQUEST</code> environment variable. You can detect and use that information to, as an example, use the correct database in your test site <code>wp-config.php</code> file:</p> <pre><code>&lt;?php\nif ( \n    // Custom header.\n    isset( $_SERVER['HTTP_X_TESTING'] )\n    // Custom user agent.\n    || ( isset( $_SERVER['HTTP_USER_AGENT'] ) &amp;&amp; $_SERVER['HTTP_USER_AGENT'] === 'wp-browser' )\n    // The env var set by the WPClIr or WordPress modules.\n    || getenv( 'WPBROWSER_HOST_REQUEST' )\n) {\n    // Use the test database if the request comes from a test.\n    define( 'DB_NAME', 'wordpress_test' );\n} else {\n    // Else use the default one.\n    define( 'DB_NAME', 'wordpress' );\n}\n</code></pre>"},{"location":"v3/modules/WPCLI/#configuration","title":"Configuration","text":"<ul> <li><code>path</code> required - the absolute, or relative, path to the WordPress root folder. This will be mapped to the <code>--path</code> argument of the wp-cli binary.  </li> <li><code>throw</code> - defaults to <code>true</code> to throw an exception when a wp-cli command does not return an exit status of <code>0</code>; if set to <code>false</code> then the exit status of the commands will be returned as is.</li> <li><code>timeout</code> - defaults to <code>60</code> (seconds) to set each process execution timeout to a certain value; set to <code>null</code>, <code>false</code> or <code>0</code> to disable timeout completely.</li> </ul> <p>Additionally the module configuration will forward any configuration parameter to <code>wp-cli</code> as a flag or option. In the example configuration below the <code>allow-root</code> flag and the <code>some-option</code> option will be passed to <code>wp-cli</code> directly and prepended to the command as global options.</p> <p>Note: these extract configuration flags and options will be prepended to all commands executed by wp-cli!</p>"},{"location":"v3/modules/WPCLI/#environment-configuration","title":"Environment configuration","text":"<p>The wp-cli binary supports a set of environment variables to modify its behavior.   </p> <p>These environment variables can be set on the commands ran by the <code>WPCLI</code> module using the optional <code>env</code> array in the module configuration. The example configuration below shows all of them with some example values. Most of the times you won't need any of these, but they are there for more fine-grained control over the module operations.  </p> <p>The module is not validating the environment variables in any way! Those values will be evaluated by wp-cli at runtime and might generate errors if not correctly configured.</p>"},{"location":"v3/modules/WPCLI/#example-configuration","title":"Example configuration","text":"<pre><code>modules:\n    enabled:\n        - WPCLI\n    config:\n        WPCLI:\n            path: /Users/Luca/Sites/wp\n            throw: true\n            timeout: 60\n            # This will be prepended to the command, `wp --allow-root &lt;command&gt;`.\n            allow-root: true\n            # This will be prepended to the command, `wp --some-option=some-value &lt;command&gt;`.\n            some-option: some-value\n            env:\n                # Any one of these, if provided, will be set as environment variable for the the cli command process. \n                # See https://make.wordpress.org/cli/handbook/config/#environment-variables for information.\n                # Equivalent to `WP_CLI_STRICT_ARGS_MODE=1 wp &lt;command&gt;'.\n                strict-args: true\n                # Equivalent to `WP_CLI_CACHE_DIR=/tmp/wp-cli-cache wp &lt;command&gt;'.\n                cache-dir: '/tmp/wp-cli-cache'\n                # Equivalent to `WP_CLI_CONFIG_PATH=/app/public wp &lt;command&gt;'.\n                config-path: '/app/public'\n                # Equivalent to `WP_CLI_CUSTOM_SHELL=/bin/zsh wp &lt;command&gt;'.\n                custom-shell: '/bin/zsh'\n                # Equivalent to `WP_CLI_DISABLE_AUTO_CHECK_UPDATE=1 wp &lt;command&gt;'.\n                disable-auto-update: true\n                # Equivalent to `WP_CLI_PACKAGES_DIR=/wp-cli/packages wp &lt;command&gt;'.\n                packages-dir: '/wp-cli/packages'\n                # Equivalent to `WP_CLI_PHP=/usr/local/bin/php/7.2/php wp &lt;command&gt;'.\n                php: '/usr/local/bin/php/7.2/php'\n                # Equivalent to `WP_CLI_PHP_ARGS='foo=bar some=23' wp &lt;command&gt;'.\n                php-args: 'foo=bar some=23'\n</code></pre>"},{"location":"v3/modules/WPCLI/#public-api","title":"Public API","text":"<ul> <li> buildFullCommand </li> <li> cli </li> <li> cliToArray </li> <li> cliToString </li> <li> dontSeeInShellOutput </li> <li> seeInShellOutput </li> <li> seeResultCodeIs </li> <li> seeResultCodeIsNot </li> <li> seeShellOutputMatches </li> </ul> buildFullCommand <p>Builds the full command to run including the PHP binary and the wp-cli boot file path.</p> <pre><code>// This method is defined in the WithWpCli trait.\n  // Set the wp-cli path, `$this` is a test case.\n  $this-&gt;setUpWpCli( '/var/www/html' );\n  // Builds the full wp-cli command, including the `path` variable.\n  $fullCommand =  $this-&gt;buildFullCommand(['core', 'version']);\n  // The full command can then be used to run it with another process handler.\n  $wpCliProcess = new Process($fullCommand);\n  $wpCliProcess-&gt;run();\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/string $command - The command to run. cli <p>Executes a wp-cli command targeting the test WordPress installation. minus <code>wp</code>. For back-compatibility purposes you can still pass the commandline as a string, but the array format is the preferred and supported method.</p> <pre><code>// Activate a plugin via wp-cli in the test WordPress site.\n  $I-&gt;cli(['plugin', 'activate', 'my-plugin']);\n  // Change a user password.\n  $I-&gt;cli(['user', 'update', 'luca', '--user_pass=newpassword']);\n</code></pre> Parameters <ul> <li><code>string/string/\\Codeception\\Module\\array $userCommand - The string of command and parameters as it would be passed to wp-cli cliToArray <p>Returns the output of a wp-cli command as an array optionally allowing a callback to process the output. minus <code>wp</code>. For back-compatibility purposes you can still pass the commandline as a string, but the array format is the preferred and supported method.</p> <pre><code>// Return a list of inactive themes, like ['twentyfourteen', 'twentyfifteen'].\n  $inactiveThemes = $I-&gt;cliToArray(['theme', 'list', '--status=inactive', '--field=name']);\n  // Get the list of installed plugins and only keep the ones starting with \"foo\".\n  $fooPlugins = $I-&gt;cliToArray(['plugin', 'list', '--field=name'], function($output){\n  return array_filter(explode(PHP_EOL, $output), function($name){\n  return strpos(trim($name), 'foo') === 0;\n  });\n  });\n</code></pre> Parameters <ul> <li><code>string/string/\\Codeception\\Module\\array $userCommand - The string of command and parameters as it would be passed to wp-cli <li><code>\\callable</code> $splitCallback - An optional callback function to split the results array.</li> cliToString <p>Returns the output of a wp-cli command as a string. minus <code>wp</code>. For back-compatibility purposes you can still pass the commandline as a string, but the array format is the preferred and supported method.</p> <pre><code>// Return the current site administrator email, using string command format.\n  $adminEmail = $I-&gt;cliToString('option get admin_email');\n  // Get the list of active plugins in JSON format, two ways.\n  $activePlugins = $I-&gt;cliToString(['plugin', 'list','--status=active', '--format=json']);\n  $activePlugins = $I-&gt;cliToString(['option', 'get', 'active_plugins' ,'--format=json']);\n</code></pre> Parameters <ul> <li><code>string/\\Codeception\\Module\\array $userCommand - The string of command and parameters as it would be passed to wp-cli dontSeeInShellOutput <p>Checks that output from last command doesn't contain text.</p> <pre><code>// Return the current site administrator email, using string command format.\n  $I-&gt;cli('plugin list --status=active');\n  $I-&gt;dontSeeInShellOutput('my-inactive/plugin.php');\n</code></pre> Parameters <ul> <li><code>string</code> $text - The text to assert is not in the output.</li></ul> seeInShellOutput <p>Checks that output from last command contains text.</p> <pre><code>// Return the current site administrator email, using string command format.\n  $I-&gt;cli('option get admin_email');\n</code></pre> Parameters <ul> <li><code>string</code> $text - The text to assert is in the output.</li></ul> seeResultCodeIs <p>Checks the result code from the last command.</p> <pre><code>// Return the current site administrator email, using string command format.\n  $I-&gt;cli('option get admin_email');\n  $I-&gt;seeResultCodeIs(0);\n</code></pre> Parameters <ul> <li><code>int</code> $code - The desired result code.</li></ul> seeResultCodeIsNot <p>Checks the result code from the last command.</p> <pre><code>// Return the current site administrator email, using string command format.\n  $I-&gt;cli('invalid command');\n  $I-&gt;seeResultCodeIsNot(0);\n</code></pre> Parameters <ul> <li><code>int</code> $code - The result code the command should not have exited with.</li></ul> seeShellOutputMatches <p>Checks that output from the last command matches a given regular expression.</p> <pre><code>// Return the current site administrator email, using string command format.\n  $I-&gt;cli('option get admin_email');\n</code></pre> Parameters <ul> <li><code>string</code> $regex - The regex pattern, including delimiters, to assert the output matches against.</li></ul> <p>This class extends \\Codeception\\Module</p>"},{"location":"v3/modules/WPDb/","title":"WPDb module","text":"<p>This module should be used in acceptance and functional tests, see levels of testing for more information. This module extends the Db module adding WordPress-specific configuration parameters and methods. The module provides methods to read, write and update the WordPress database directly, without relying on WordPress methods, using WordPress functions or triggering WordPress filters.  </p>"},{"location":"v3/modules/WPDb/#module-requirements-for-codeception-40","title":"Module requirements for Codeception 4.0+","text":"<p>This module requires the <code>codeception/module-db</code> Composer package to work when wp-browser is used with Codeception 4.0.  </p> <p>To install the package run: </p> <pre><code>composer require --dev codeception/module-db:^1.0\n</code></pre>"},{"location":"v3/modules/WPDb/#backup-your-content","title":"Backup your content","text":"<p>This module, like the Codeception Db one it extends, by default will load a database dump in the database it's using. This means that the database contents will be replaced by the dump contents on each run of a suite using the module. You can set the <code>populate</code> and <code>cleanup</code> parameters to <code>false</code> to prevent this default behavior but it's usually not what you need in an automated test. Make a backup of any database you're using in tests that contains any information you care about before you run any test!</p>"},{"location":"v3/modules/WPDb/#change-the-database-used-depending-on-whether-your-running-tests-or-not","title":"Change the database used depending on whether you're running tests or not","text":"<p>The chore of having to plug different databases, or backup them, depending on whether you're manually testing the site or automatically testing can be mitigated switching them automatically depending on the browser user agent or request headers. This module was born to be used in acceptance and functional tests (see levels of testing for more information) and will often be coupled with modules like the WPBrowser one or the WPWebDriver one. Depending on which of the two modules is being used in the suite there are different ways to automate the \"database switching\".</p>"},{"location":"v3/modules/WPDb/#automatically-changing-database-based-on-the-browser-user-agent","title":"Automatically changing database based on the browser user agent","text":"<p>If you would like to automate the \"switching above\" below you will find an example setup. Update the test site <code>wp-config.php</code> file from this:</p> <pre><code>define( 'DB_NAME', 'wordpress' );\n</code></pre> <p>to this:</p> <pre><code>&lt;?php\nif ( \n    // Custom header.\n    isset( $_SERVER['HTTP_X_TESTING'] )\n    // Custom user agent.\n    || ( isset( $_SERVER['HTTP_USER_AGENT'] ) &amp;&amp; $_SERVER['HTTP_USER_AGENT'] === 'wp-browser' )\n    // The env var set by the WPClIr or WordPress modules.\n    || getenv( 'WPBROWSER_HOST_REQUEST' )\n) {\n    // Use the test database if the request comes from a test.\n    define( 'DB_NAME', 'wordpress_test' );\n} else {\n    // Else use the default one.\n    define( 'DB_NAME', 'wordpress' );\n}\n</code></pre> <p>If you're using the WPWebDriver module set the user agent in the browser, in this example I'm setting the user agent in Chromedriver:</p> <pre><code>class_name: AcceptanceTester\nmodules:\n    enabled:\n        - \\Helper\\Acceptance\n        - WPDb\n        - WPWebDriver\n    config:\n        WPDb:\n            dsn: 'mysql:host=%WP_DB_HOST%;dbname=%WP_DB_NAME%'\n            user: %WP_DB_USER%\n            password: %WP_DB_PASSWORD%\n            dump: tests/_data/dump.sql\n            populate: true\n            cleanup: false\n            url: '%WP_URL%'\n            tablePrefix: %WP_TABLE_PREFIX%\n            urlReplacement: true\n        WPWebDriver:\n            url: '%WP_URL%'\n            adminUsername: '%WP_ADMIN_USERNAME%'\n            adminPassword: '%WP_ADMIN_PASSWORD%'\n            adminPath: '%WP_ADMIN_PATH%'\n            browser: chrome\n            host: localhost\n            port: 4444\n            window_size: false\n            wait: 5\n            capabilities:\n                # Used in more recent releases of Selenium.\n                \"goog:chromeOptions\":\n                    args: [\"--no-sandbox\", \"--headless\", \"--disable-gpu\", \"--user-agent=wp-browser\"]\n                # Support the old format for back-compatibility purposes. \n                \"chromeOptions\":\n                    args: [\"--no-sandbox\", \"--headless\", \"--disable-gpu\", \"--user-agent=wp-browser\"]\n</code></pre> <p>If you're using the WPBrowser module send a specific header in the context of test requests: </p> <pre><code>class_name: AcceptanceTester\nmodules:\n    enabled:\n        - \\Helper\\Acceptance\n        - WPDb\n        - WPBrowser\n    config:\n        WPDb:\n              dsn: 'mysql:host=%DB_HOST%;dbname=%WP_DB_NAME%'\n              user: %WP_DB_USER%\n              password: %WP_DB_PASSWORD%\n              dump: 'tests/_data/dump.sql'\n              populate: true\n              cleanup: true\n              reconnect: false\n              url: '%WP_URL%'\n              tablePrefix: 'wp_'\n        WPBrowser:\n              url: '%WP_URL%'\n              adminUsername: 'admin'\n              adminPassword: 'admin'\n              adminPath: '/wp-admin'\n              headers: \n                X-Testing: 'wp-browser'\n</code></pre>"},{"location":"v3/modules/WPDb/#configuration","title":"Configuration","text":"<ul> <li><code>dsn</code> required - the database POD DSN connection details; read more on PHP PDO documentation. If the database is accessible (as is the case on the latest version of [Local by Flywheel][http://localwp.com]) via unix socket, then the string to insert here should look like this <code>mysql:unix_socket=/path/to/the/mysql.sock;dbname=wordpress</code>.</li> <li><code>user</code> required - the database user.</li> <li><code>password</code> required - the database password.</li> <li><code>url</code> required - the full URL, including the HTTP scheme, of the website whose database is being accessed. WordPress uses hard-codece URLs in the database, that URL will be set by this module when applying the SQL dump file during population or cleanup.</li> <li><code>dump</code> required - defaults to <code>null</code>; sets the path, relative to the project root folder, or absolute to the SQL dump file that will be used to set the tests initial database fixture. If set to <code>null</code> then the <code>populate</code>, <code>cleanup</code> and <code>populator</code> parameters will be ignored.</li> <li><code>populate</code> - defaults to <code>true</code> to empty the target database and import the SQL dump(s) specified in the <code>dump</code> argument before the test suite is started.</li> <li><code>cleanup</code> - defaults to <code>true</code> empty the target database and import the SQL dump(s) specified in the <code>dump</code> argument before each test. </li> <li><code>urlReplacement</code> - defaults to <code>true</code> to replace, while using the built-in, PHP-based, dump import solution the hard-coded WordPress URL in the database with the specified one.</li> <li><code>originalUrl</code> - specifies the original URL hard-coded into the version controlled SQL dump files. This can help prevent some URL replacement issues when the <code>urlReplacement</code> configuration parameter is set to <code>true</code>.</li> <li><code>populator</code> - defaults to <code>null</code>, if set to an executable shell command then that command will be used to populate the database in place of the built-in PHP solution; URL replacement will not apply in this case. Read more about this on Codeception documentation.</li> <li><code>reconnect</code> - defaults to <code>true</code> to force the module to reconnect to the database before each test in place of only connecting at the start of the tests.</li> <li><code>waitlock</code> - defaults to <code>10</code>; wait lock (in seconds) that the database session should use for DDL statements.</li> <li><code>tablePrefix</code> - defaults to <code>wp_</code>; sets the prefix of the tables that the module will manipulate.</li> <li><code>letAdminEmailVerification</code> - defaults to an empty value to remove the Administrator Email Verification screen introduced in WordPress 5.3. Set to <code>true</code> to not remove the screen and show it when an administrator user first logs in.</li> <li><code>letCron</code> - defaults to an empty value to avoid <code>wp-cron</code> from being spawned during tests. Setting this to <code>true</code> will let <code>wp-cron</code> requests to fire during tests.</li> </ul>"},{"location":"v3/modules/WPDb/#example-configuration","title":"Example configuration","text":"<pre><code>modules:\n  enabled:\n      - WPDb\n  config:\n      WPDb:\n          dsn: 'mysql:host=localhost;dbname=wordpress'\n          user: 'root'\n          password: 'password'\n          dump: 'tests/_data/dump.sql'\n          populate: true\n          cleanup: true\n          waitlock: 10\n          url: 'http://wordpress.localhost'\n          urlReplacement: true\n          tablePrefix: 'wp_'\n</code></pre>"},{"location":"v3/modules/WPDb/#using-the-module-with-the-wploader-one","title":"Using the module with the WPLoader one","text":"<p>This module is often used in conjunction with the WPLoader one to use WordPress-defined functions, classes and methods in acceptance or functional tests. The WPLoader module should be set to only load WordPress and this module should be listed, in the <code>modules.enabled</code> section of the suite configuration file before the <code>WPLoader</code> one:</p> <pre><code>modules:\n  enabled:\n      - WPDb # this before...\n      - WPLoader # ...this one.\n  config:\n      WPDb:\n        # ...\n      WPLoader:\n        loadOnly: true\n        # ... \n</code></pre> <p>This will avoid issues where the <code>WPLoader</code> module could <code>exit</code>, terminating the test run, due to an inconsistent database state.</p>"},{"location":"v3/modules/WPDb/#public-api","title":"Public API","text":"<ul> <li> countRowsInDatabase </li> <li> dontHaveAttachmentFilesInDatabase </li> <li> dontHaveAttachmentInDatabase </li> <li> dontHaveBlogInDatabase </li> <li> dontHaveCommentInDatabase </li> <li> dontHaveCommentMetaInDatabase </li> <li> dontHaveInDatabase </li> <li> dontHaveLinkInDatabase </li> <li> dontHaveOptionInDatabase </li> <li> dontHavePostInDatabase </li> <li> dontHavePostMetaInDatabase </li> <li> dontHavePostThumbnailInDatabase </li> <li> dontHaveSiteOptionInDatabase </li> <li> dontHaveSiteTransientInDatabase </li> <li> dontHaveTableInDatabase </li> <li> dontHaveTermInDatabase </li> <li> dontHaveTermMetaInDatabase </li> <li> dontHaveTermRelationshipInDatabase </li> <li> dontHaveTermTaxonomyInDatabase </li> <li> dontHaveTransientInDatabase </li> <li> dontHaveUserInDatabase </li> <li> dontHaveUserInDatabaseWithEmail </li> <li> dontHaveUserMetaInDatabase </li> <li> dontSeeAttachmentInDatabase </li> <li> dontSeeBlogInDatabase </li> <li> dontSeeCommentInDatabase </li> <li> dontSeeCommentMetaInDatabase </li> <li> dontSeeLinkInDatabase </li> <li> dontSeeOptionInDatabase </li> <li> dontSeePageInDatabase </li> <li> dontSeePostInDatabase </li> <li> dontSeePostMetaInDatabase </li> <li> dontSeePostWithTermInDatabase </li> <li> dontSeeSiteOptionInDatabase </li> <li> dontSeeTableInDatabase </li> <li> dontSeeTermInDatabase </li> <li> dontSeeTermMetaInDatabase </li> <li> dontSeeTermTaxonomyInDatabase </li> <li> dontSeeUserInDatabase </li> <li> dontSeeUserMetaInDatabase </li> <li> getSiteDomain </li> <li> getUsersTableName </li> <li> grabAllFromDatabase </li> <li> grabAttachmentAttachedFile </li> <li> grabAttachmentMetadata </li> <li> grabBlogDomain </li> <li> grabBlogPath </li> <li> grabBlogTableName </li> <li> grabBlogTableNames </li> <li> grabBlogTablePrefix </li> <li> grabBlogVersionsTableName </li> <li> grabBlogsTableName </li> <li> grabCommentmetaTableName </li> <li> grabCommentsTableName </li> <li> grabLatestEntryByFromDatabase </li> <li> grabLinksTableName </li> <li> grabOptionFromDatabase </li> <li> grabPostMetaFromDatabase </li> <li> grabPostmetaTableName </li> <li> grabPostsTableName </li> <li> grabPrefixedTableNameFor </li> <li> grabRegistrationLogTableName </li> <li> grabSignupsTableName </li> <li> grabSiteMetaTableName </li> <li> grabSiteOptionFromDatabase </li> <li> grabSiteTableName </li> <li> grabSiteTransientFromDatabase </li> <li> grabSiteUrl </li> <li> grabTablePrefix </li> <li> grabTermIdFromDatabase </li> <li> grabTermMetaTableName </li> <li> grabTermRelationshipsTableName </li> <li> grabTermTaxonomyIdFromDatabase </li> <li> grabTermTaxonomyTableName </li> <li> grabTermsTableName </li> <li> grabUserIdFromDatabase </li> <li> grabUserMetaFromDatabase </li> <li> grabUsermetaTableName </li> <li> grabUsersTableName </li> <li> haveAttachmentInDatabase </li> <li> haveBlogInDatabase </li> <li> haveCommentInDatabase </li> <li> haveCommentMetaInDatabase </li> <li> haveLinkInDatabase </li> <li> haveManyBlogsInDatabase </li> <li> haveManyCommentsInDatabase </li> <li> haveManyLinksInDatabase </li> <li> haveManyPostsInDatabase </li> <li> haveManyTermsInDatabase </li> <li> haveManyUsersInDatabase </li> <li> haveMenuInDatabase </li> <li> haveMenuItemInDatabase </li> <li> haveOptionInDatabase </li> <li> havePageInDatabase </li> <li> havePostInDatabase </li> <li> havePostThumbnailInDatabase </li> <li> havePostmetaInDatabase </li> <li> haveSiteOptionInDatabase </li> <li> haveSiteTransientInDatabase </li> <li> haveTermInDatabase </li> <li> haveTermMetaInDatabase </li> <li> haveTermRelationshipInDatabase </li> <li> haveTransientInDatabase </li> <li> haveUserCapabilitiesInDatabase </li> <li> haveUserInDatabase </li> <li> haveUserLevelsInDatabase </li> <li> haveUserMetaInDatabase </li> <li> importSql </li> <li> importSqlDumpFile </li> <li> seeAttachmentInDatabase </li> <li> seeBlogInDatabase </li> <li> seeCommentInDatabase </li> <li> seeCommentMetaInDatabase </li> <li> seeLinkInDatabase </li> <li> seeOptionInDatabase </li> <li> seePageInDatabase </li> <li> seePostInDatabase </li> <li> seePostMetaInDatabase </li> <li> seePostWithTermInDatabase </li> <li> seeSiteOptionInDatabase </li> <li> seeSiteSiteTransientInDatabase </li> <li> seeTableInDatabase </li> <li> seeTermInDatabase </li> <li> seeTermMetaInDatabase </li> <li> seeTermRelationshipInDatabase </li> <li> seeTermTaxonomyInDatabase </li> <li> seeUserInDatabase </li> <li> seeUserMetaInDatabase </li> <li> useBlog </li> <li> useMainBlog </li> <li> useTheme </li> </ul> countRowsInDatabase <p>Returns the number of table rows matching a criteria.</p> <pre><code>$I-&gt;haveManyPostsInDatabase(3, ['post_status' =&gt; 'draft' ]);\n  $I-&gt;haveManyPostsInDatabase(3, ['post_status' =&gt; 'private' ]);\n  // Make sure there are now the expected number of draft posts.\n  $postsTable = $I-&gt;grabPostsTableName();\n  $draftsCount = $I-&gt;countRowsInDatabase($postsTable, ['post_status' =&gt; 'draft']);\n</code></pre> Parameters <ul> <li><code>string</code> $table - The table to count the rows in.</li> <li><code>array/\\Codeception\\Module\\array/array $criteria - Search criteria, if empty all table rows will be counted. dontHaveAttachmentFilesInDatabase <p>Removes all the files attached with an attachment post, it will not remove the database entries. Requires the <code>WPFilesystem</code> module to be loaded in the suite.</p> <pre><code>$posts = $I-&gt;grabPostsTableName();\n  $attachmentIds = $I-&gt;grabColumnFromDatabase($posts, 'ID', ['post_type' =&gt; 'attachment']);\n  // This will only remove the files, not the database entries.\n  $I-&gt;dontHaveAttachmentFilesInDatabase($attachmentIds);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/int $attachmentIds - An attachment post ID or an array of attachment post IDs. dontHaveAttachmentInDatabase <p>Removes an attachment from the posts table. table. the suite.</p> <pre><code>$postmeta = $I-&gt;grabpostmetatablename();\n  $thumbnailId = $I-&gt;grabFromDatabase($postmeta, 'meta_value', [\n  'post_id' =&gt; $id,\n  'meta_key'=&gt;'thumbnail_id'\n  ]);\n  // Remove only the database entry (including postmeta) but not the files.\n  $I-&gt;dontHaveAttachmentInDatabase($thumbnailId);\n  // Remove the database entry (including postmeta) and the files.\n  $I-&gt;dontHaveAttachmentInDatabase($thumbnailId, true, true);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria to find the attachment post in the posts <li><code>bool</code> $purgeMeta - If set to <code>true</code> then the meta for the attachment will be purged too.</li> <li><code>bool</code> $removeFiles - Remove all files too, requires the <code>WPFilesystem</code> module to be loaded in</li> dontHaveBlogInDatabase <p>Removes one ore more blogs from the database.</p> <pre><code>// Remove the blog, all its tables and files.\n  $I-&gt;dontHaveBlogInDatabase(['path' =&gt; 'test/one']);\n  // Remove the blog entry, not the tables though.\n  $I-&gt;dontHaveBlogInDatabase(['blog_id' =&gt; $blogId]);\n  // Remove multiple blogs.\n  $I-&gt;dontHaveBlogInDatabase(['domain' =&gt; 'test']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria to find the blog rows in the blogs table. <li><code>bool</code> $removeTables - Remove the blog tables.</li> <li><code>bool</code> $removeUploads - Remove the blog uploads; requires the <code>WPFilesystem</code> module.</li> dontHaveCommentInDatabase <p>Removes an entry from the comments table.</p> <pre><code>$I-&gt;dontHaveCommentInDatabase(['comment_post_ID' =&gt; 23, 'comment_url' =&gt; 'http://example.copm']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. <li><code>bool</code> $purgeMeta - If set to <code>true</code> then the meta for the comment will be purged too.</li> dontHaveCommentMetaInDatabase <p>Removes a post comment meta from the database</p> <pre><code>// Remove all meta for the comment with an ID of 23.\n  $I-&gt;dontHaveCommentMetaInDatabase(['comment_id' =&gt; 23]);\n  // Remove the `count` comment meta for the comment with an ID of 23.\n  $I-&gt;dontHaveCommentMetaInDatabase(['comment_id' =&gt; 23, 'meta_key' =&gt; 'count']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontHaveInDatabase <p>Deletes a database entry. criteria.</p> <pre><code>$I-&gt;dontHaveInDatabase('custom_table', ['book_ID' =&gt; 23, 'book_genre' =&gt; 'fiction']);\n</code></pre> Parameters <ul> <li><code>string</code> $table - The table name.</li> <li><code>\\Codeception\\Module\\array/array $criteria - An associative array of the column names and values to use as deletion dontHaveLinkInDatabase <p>Removes a link from the database.</p> <pre><code>$I-&gt;dontHaveLinkInDatabase(['link_url' =&gt; 'http://example.com']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontHaveOptionInDatabase <p>Removes an entry from the options table.</p> <pre><code>// Remove the `foo` option.\n  $I-&gt;dontHaveOptionInDatabase('foo');\n  // Remove the 'bar' option only if it has the `baz` value.\n  $I-&gt;dontHaveOptionInDatabase('bar', 'baz');\n</code></pre> Parameters <ul> <li><code>string</code> $key - The option name.</li> <li><code>mixed/null</code> $value - If set the option will only be removed if its value matches the passed one.</li></ul> dontHavePostInDatabase <p>Removes an entry from the posts table.</p> <pre><code>$posts = $I-&gt;haveManyPostsInDatabase(3, ['post_title' =&gt; 'Test {{n}}']);\n  $I-&gt;dontHavePostInDatabase(['post_title' =&gt; 'Test 2']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. <li><code>bool</code> $purgeMeta - If set to <code>true</code> then the meta for the post will be purged too.</li> dontHavePostMetaInDatabase <p>Removes an entry from the postmeta table.</p> <pre><code>$postId = $I-&gt;havePostInDatabase(['meta_input' =&gt; ['rating' =&gt; 23]]);\n  $I-&gt;dontHavePostMetaInDatabase(['post_id' =&gt; $postId, 'meta_key' =&gt; 'rating']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontHavePostThumbnailInDatabase <p>Remove the thumbnail (featured image) from a post, if any. Please note: the method will NOT remove the attachment post, post meta and file.</p> <pre><code>$attachmentId = $I-&gt;haveAttachmentInDatabase(codecept_data_dir('some-image.png'));\n  $postId = $I-&gt;havePostInDatabase();\n  // Attach the thumbnail to the post.\n  $I-&gt;havePostThumbnailInDatabase($postId, $attachmentId);\n  // Remove the thumbnail from the post.\n  $I-&gt;dontHavePostThumbnailInDatabase($postId);\n</code></pre> Parameters <ul> <li><code>int</code> $postId - The post ID to remove the thumbnail (featured image) from.</li></ul> dontHaveSiteOptionInDatabase <p>Removes a site option from the database.</p> <pre><code>// Remove the `foo_count` option.\n  $I-&gt;dontHaveSiteOptionInDatabase('foo_count');\n  // Remove the `foo_count` option only if its value is `23`.\n  $I-&gt;dontHaveSiteOptionInDatabase('foo_count', 23);\n</code></pre> Parameters <ul> <li><code>string</code> $key - The option name.</li> <li><code>mixed/null</code> $value - If set the option will only be removed it its value matches the specified one.</li></ul> dontHaveSiteTransientInDatabase <p>Removes a site transient from the database.</p> <pre><code>$I-&gt;dontHaveSiteTransientInDatabase(['my_plugin_site_buffer']);\n</code></pre> Parameters <ul> <li><code>string</code> $key - The name of the transient to delete.</li></ul> dontHaveTableInDatabase <p>Removes a table from the database. The case where a table does not exist is handled without raising an error.</p> <pre><code>$ordersTable = $I-&gt;grabPrefixedTableNameFor('orders');\n  $I-&gt;dontHaveTableInDatabase($ordersTable);\n</code></pre> Parameters <ul> <li><code>string</code> $fullTableName - The full table name, including the table prefix.</li></ul> dontHaveTermInDatabase <p>Removes a term from the database.</p> <pre><code>$I-&gt;dontHaveTermInDatabase(['name' =&gt; 'romance']);\n  $I-&gt;dontHaveTermInDatabase(['slug' =&gt; 'genre--romance']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. <li><code>bool</code> $purgeMeta - Whether the terms meta should be purged along side with the meta or not.</li> dontHaveTermMetaInDatabase <p>Removes a term meta from the database.</p> <pre><code>// Remove the \"karma\" key.\n  $I-&gt;dontHaveTermMetaInDatabase(['term_id' =&gt; $termId, 'meta_key' =&gt; 'karma']);\n  // Remove all meta for the term.\n  $I-&gt;dontHaveTermMetaInDatabase(['term_id' =&gt; $termId]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontHaveTermRelationshipInDatabase <p>Removes an entry from the term_relationships table.</p> <pre><code>// Remove the relation between a post and a category.\n  $I-&gt;dontHaveTermRelationshipInDatabase(['object_id' =&gt; $postId, 'term_taxonomy_id' =&gt; $ttaxId]);\n  // Remove all terms for a post.\n  $I-&gt;dontHaveTermMetaInDatabase(['object_id' =&gt; $postId]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontHaveTermTaxonomyInDatabase <p>Removes an entry from the <code>term_taxonomy</code> table.</p> <pre><code>// Remove a specific term from the genre taxonomy.\n  $I-&gt;dontHaveTermTaxonomyInDatabase(['term_id' =&gt; $postId, 'taxonomy' =&gt; 'genre']);\n  // Remove all terms for a taxonomy.\n  $I-&gt;dontHaveTermTaxonomyInDatabase(['taxonomy' =&gt; 'genre']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontHaveTransientInDatabase <p>Removes a transient from the database.</p> <pre><code>// Removes the `tweets` transient from the database, if set.\n  $I-&gt;dontHaveTransientInDatabase('tweets');\n</code></pre> Parameters <ul> <li><code>string</code> $transient - The name of the transient to delete.</li></ul> dontHaveUserInDatabase <p>Removes a user from the database.</p> <pre><code>$bob = $I-&gt;haveUserInDatabase('bob');\n  $alice = $I-&gt;haveUserInDatabase('alice');\n  // Remove Bob's user and meta.\n  $I-&gt;dontHaveUserInDatabase('bob');\n  // Remove Alice's user but not meta.\n  $I-&gt;dontHaveUserInDatabase($alice);\n</code></pre> Parameters <ul> <li><code>int/string</code> $userIdOrLogin - The user ID or login name.</li> <li><code>bool</code> $purgeMeta - Whether the user meta should be purged alongside the user or not.</li></ul> dontHaveUserInDatabaseWithEmail <p>Removes a user(s) from the database using the user email address.</p> <pre><code>$luca = $I-&gt;haveUserInDatabase('luca', 'editor', ['user_email' =&gt; 'luca@example.org']);\n</code></pre> Parameters <ul> <li><code>string</code> $userEmail - The email of the user to remove.</li> <li><code>bool</code> $purgeMeta - Whether the user meta should be purged alongside the user or not.</li></ul> dontHaveUserMetaInDatabase <p>Removes an entry from the usermeta table.</p> <pre><code>// Remove the `karma` user meta for a user.\n  $I-&gt;dontHaveUserMetaInDatabase(['user_id' =&gt; 23, 'meta_key' =&gt; 'karma']);\n  // Remove all the user meta for a user.\n  $I-&gt;dontHaveUserMetaInDatabase(['user_id' =&gt; 23]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontSeeAttachmentInDatabase <p>Checks that an attachment is not in the database.</p> <pre><code>$url = 'https://example.org/images/foo.png';\n  $I-&gt;dontSeeAttachmentInDatabase(['guid' =&gt; $url]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontSeeBlogInDatabase <p>Checks that a row is not present in the <code>blogs</code> table.</p> <pre><code>$I-&gt;haveManyBlogsInDatabase(2, ['path' =&gt; 'test-{{n}}'], false)\n  $I-&gt;dontSeeBlogInDatabase(['path' =&gt; '/test-3/'])\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontSeeCommentInDatabase <p>Checks that a comment is not in the database. Will look up the \"comments\" table.</p> <pre><code>// Checks for one comment.\n  $I-&gt;dontSeeCommentInDatabase(['comment_ID' =&gt; 23]);\n  // Checks for comments from a user.\n  $I-&gt;dontSeeCommentInDatabase(['user_id' =&gt; 89]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - The search criteria. dontSeeCommentMetaInDatabase <p>Checks that a comment meta value is not in the database. Will look up the \"commentmeta\" table.</p> <pre><code>// Delete a comment `karma` meta.\n  $I-&gt;dontSeeCommentMetaInDatabase(['comment_id' =&gt; 23, 'meta_key' =&gt; 'karma']);\n  // Delete all meta for a comment.\n  $I-&gt;dontSeeCommentMetaInDatabase(['comment_id' =&gt; 23]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontSeeLinkInDatabase <p>Checks that a link is not in the <code>links</code> database table.</p> <pre><code>$I-&gt;dontSeeLinkInDatabase(['link_url' =&gt; 'http://example.com']);\n  $I-&gt;dontSeeLinkInDatabase(['link_url' =&gt; 'http://example.com', 'link_name' =&gt; 'example']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontSeeOptionInDatabase <p>Checks that an option is not in the database for the current blog. If the value is an object or an array then the serialized option will be checked.</p> <pre><code>$I-&gt;dontHaveOptionInDatabase('posts_per_page');\n  $I-&gt;dontSeeOptionInDatabase('posts_per_page');\n  $I-&gt;dontSeeOptionInDatabase('posts_per_page', 23);\n  $I-&gt;dontSeeOptionInDatabase(['option_name' =&gt; 'posts_per_page']);\n  $I-&gt;dontSeeOptionInDatabase(['option_name' =&gt; 'posts_per_page', 'option_value' =&gt; 23]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/string $criteriaOrName - An array of search criteria or the option name. <li><code>mixed/null</code> $value - The optional value to try and match, only used if the option name is provided.</li> dontSeePageInDatabase <p>Checks that a page is not in the database.</p> <pre><code>// Assert a page with an ID does not exist.\n  $I-&gt;dontSeePageInDatabase(['ID' =&gt; 23]);\n  // Assert a page with a slug and ID.\n  $I-&gt;dontSeePageInDatabase(['post_name' =&gt; 'test', 'ID' =&gt; 23]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontSeePostInDatabase <p>Checks that a post is not in the database.</p> <pre><code>// Asserts a post with title 'Test' is not in the database.\n  $I-&gt;dontSeePostInDatabase(['post_title' =&gt; 'Test']);\n  // Asserts a post with title 'Test' and content 'Test content' is not in the database.\n  $I-&gt;dontSeePostInDatabase(['post_title' =&gt; 'Test', 'post_content' =&gt; 'Test content']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontSeePostMetaInDatabase <p>Checks that a post meta value does not exist. If the meta value is an object or an array then the check will be made on its serialized version.</p> <pre><code>$postId = $I-&gt;havePostInDatabase(['meta_input' =&gt; ['foo' =&gt; 'bar']]);\n  $I-&gt;dontSeePostMetaInDatabase(['post_id' =&gt; $postId, 'meta_key' =&gt; 'woot']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontSeePostWithTermInDatabase <p>Checks that a post to term relation does not exist in the database. The method will check the \"term_relationships\" table.</p> <pre><code>$fiction = $I-&gt;haveTermInDatabase('fiction', 'genre');\n  $nonFiction = $I-&gt;haveTermInDatabase('non-fiction', 'genre');\n  $postId = $I-&gt;havePostInDatabase(['tax_input' =&gt; ['genre' =&gt; ['fiction']]]);\n  $I-&gt;dontSeePostWithTermInDatabase($postId, $nonFiction['term_taxonomy_id], );\n  passed this parameter will be interpreted as a `term_id`, else as a\n  the\n  term order.\n  to build a `taxonomy_term_id` from the `term_id`.\n</code></pre> Parameters <ul> <li><code>int</code> $post_id - The post ID.</li> <li><code>int</code> $term_taxonomy_id - The term <code>term_id</code> or <code>term_taxonomy_id</code>; if the <code>$taxonomy</code> argument is</li> <li><code>int/null</code> $term_order - The order the term applies to the post, defaults to <code>null</code> to not use</li> <li><code>string/null</code> $taxonomy - The taxonomy the <code>term_id</code> is for; if passed this parameter will be used</li></ul> dontSeeSiteOptionInDatabase <p>Checks that a site option is not in the database.</p> <pre><code>// Check that the option is not set in the database.\n  $I-&gt;dontSeeSiteOptionInDatabase('foo_count');\n  // Check that the option is not set with a specific value.\n  $I-&gt;dontSeeSiteOptionInDatabase('foo_count', 23);\n  $I-&gt;dontSeeSiteOptionInDatabase(['option_name =&gt; 'foo_count', 'option_value' =&gt; 23]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/string $criteriaOrName - An array of search criteria or the option name. <li><code>mixed/null</code> $value - The optional value to try and match, only used if the option name is provided.</li> dontSeeTableInDatabase <p>Checks that a table is not in the database.</p> <pre><code>$options = $I-&gt;grabPrefixedTableNameFor('options');\n  $I-&gt;dontHaveTableInDatabase($options)\n  $I-&gt;dontSeeTableInDatabase($options);\n</code></pre> Parameters <ul> <li><code>string</code> $table - The full table name, including the table prefix.</li></ul> dontSeeTermInDatabase <p>Makes sure a term is not in the database. Looks up both the <code>terms</code> table and the <code>term_taxonomy</code> tables. and the <code>term_taxonomy</code> tables.</p> <pre><code>// Asserts a 'fiction' term is not in the database.\n  $I-&gt;dontSeeTermInDatabase(['name' =&gt; 'fiction']);\n  // Asserts a 'fiction' term with slug 'genre--fiction' is not in the database.\n  $I-&gt;dontSeeTermInDatabase(['name' =&gt; 'fiction', 'slug' =&gt; 'genre--fiction']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of criteria to search for the term, can be columns from the <code>terms</code> dontSeeTermMetaInDatabase <p>Checks that a term meta is not in the database.</p> <pre><code>list($termId, $termTaxonomyId) = $I-&gt;haveTermInDatabase('fiction', 'genre');\n  $I-&gt;haveTermMetaInDatabase($termId, 'rating', 4);\n  $I-&gt;dontSeeTermMetaInDatabase(['term_id' =&gt; $termId,'meta_key' =&gt; 'average_review']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontSeeTermTaxonomyInDatabase <p>Checks that a term taxonomy is not in the database.</p> <pre><code>list($termId, $termTaxonomyId) = $I-&gt;haveTermInDatabase('fiction', 'genre');\n  $I-&gt;dontSeeTermTaxonomyInDatabase(['term_id' =&gt; $termId, 'taxonomy' =&gt; 'country']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontSeeUserInDatabase <p>Checks that a user is not in the database.</p> <pre><code>// Asserts a user does not exist in the database.\n  $I-&gt;dontSeeUserInDatabase(['user_login' =&gt; 'luca']);\n  // Asserts a user with email and login is not in the database.\n  $I-&gt;dontSeeUserInDatabase(['user_login' =&gt; 'luca', 'user_email' =&gt; 'luca@theaveragedev.com']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. dontSeeUserMetaInDatabase <p>Check that a user meta value is not in the database.</p> <pre><code>// Asserts a user does not have a 'karma' meta assigned.\n  $I-&gt;dontSeeUserMetaInDatabase(['user_id' =&gt; 23, 'meta_key' =&gt; 'karma']);\n  // Asserts no user has any 'karma' meta assigned.\n  $I-&gt;dontSeeUserMetaInDatabase(['meta_key' =&gt; 'karma']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. getSiteDomain <p>Returns the site domain inferred from the <code>url</code> set in the config.</p> <pre><code>$domain = $I-&gt;getSiteDomain();\n  // We should be redirected to the HTTPS version when visiting the HTTP version.\n  $I-&gt;amOnPage('http://' . $domain);\n  $I-&gt;seeCurrentUrlEquals('https://' . $domain);\n</code></pre> getUsersTableName <p>Returns the prefixed users table name.</p> <pre><code>// Given a `wp_` table prefix returns `wp_users`.\n  $usersTable = $I-&gt;getUsersTableName();\n  // Given a `wp_` table prefix returns `wp_users`.\n  $I-&gt;useBlog(23);\n  $usersTable = $I-&gt;getUsersTableName();\n</code></pre> grabAllFromDatabase <p>Returns all entries matching a criteria from the database.</p> <pre><code>$books = $I-&gt;grabPrefixedTableNameFor('books');\n  $I-&gt;grabAllFromDatabase($books, 'title', ['genre' =&gt; 'fiction']);\n</code></pre> Parameters <ul> <li><code>string</code> $table - The table to grab the values from.</li> <li><code>string</code> $column - The column to fetch.</li> <li><code>\\Codeception\\Module\\array $criteria - The search criteria. grabAttachmentAttachedFile <p>Returns the path, as stored in the database, of an attachment <code>_wp_attached_file</code> meta. The attached file is, usually, an attachment origal file.</p> <pre><code>$file = $I-&gt;grabAttachmentAttachedFile($attachmentId);\n  $fileInfo = new SplFileInfo($file);\n  $I-&gt;assertEquals('jpg', $fileInfo-&gt;getExtension());\n</code></pre> Parameters <ul> <li><code>int</code> $attachmentPostId - The attachment post ID.</li></ul> grabAttachmentMetadata <p>Returns the metadata array for an attachment post. This is the value of the <code>_wp_attachment_metadata</code> meta.</p> <pre><code>$metadata = $I-&gt;grabAttachmentMetadata($attachmentId);\n  $I-&gt;assertEquals(['thumbnail', 'medium', 'medium_large'], array_keys($metadata['sizes']);\n</code></pre> Parameters <ul> <li><code>int</code> $attachmentPostId - The attachment post ID.</li></ul> grabBlogDomain <p>Returns a blog domain given its ID.</p> <pre><code>$blogIds = $I-&gt;haveManyBlogsInDatabase(3);\n  $domains = array_map(function($blogId){\n  return $I-&gt;grabBlogDomain($blogId);\n  }, $blogIds);\n</code></pre> Parameters <ul> <li><code>int</code> $blogId - The blog ID.</li></ul> grabBlogPath <p>Grabs a blog domain from the blogs table.</p> <pre><code>$blogId = $I-&gt;haveBlogInDatabase('test');\n  $path = $I-&gt;grabBlogDomain($blogId);\n  $I-&gt;amOnSubdomain($path);\n  $I-&gt;amOnPage('/');\n</code></pre> Parameters <ul> <li><code>int</code> $blogId - The blog ID.</li></ul> grabBlogTableName <p>Returns the full name of a table for a blog from a multisite installation database.</p> <pre><code>$blogOptionTable = $I-&gt;grabBlogTableName($blogId, 'option');\n</code></pre> Parameters <ul> <li><code>int</code> $blogId - The blog ID.</li> <li><code>string</code> $table - The table name, without table prefix.</li></ul> grabBlogTableNames <p>Returns a list of tables for a blog ID.</p> <pre><code>$blogId = $I-&gt;haveBlogInDatabase('test');\n  $tables = $I-&gt;grabBlogTableNames($blogId);\n  $options = array_filter($tables, function($tableName){\n  return str_pos($tableName, 'options') !== false;\n  });\n</code></pre> Parameters <ul> <li><code>int</code> $blogId - The ID of the blog to fetch the tables for.</li></ul> grabBlogTablePrefix <p>Returns the table prefix for a blog.</p> <pre><code>$blogId = $I-&gt;haveBlogInDatabase('test');\n  $blogTablePrefix = $I-&gt;getBlogTablePrefix($blogId);\n  $blogOrders = $I-&gt;blogTablePrefix . 'orders';\n</code></pre> Parameters <ul> <li><code>int</code> $blogId - The blog ID.</li></ul> grabBlogVersionsTableName <p>Gets the prefixed <code>blog_versions</code> table name.</p> <pre><code>// Assuming a `wp_` table prefix it will return `wp_blog_versions`.\n  $blogVersionsTable = $I-&gt;grabBlogVersionsTableName();\n  $I-&gt;useBlog(23);\n  // Assuming a `wp_` table prefix it will return `wp_blog_versions`.\n  $blogVersionsTable = $I-&gt;grabBlogVersionsTableName();\n</code></pre> grabBlogsTableName <p>Gets the prefixed <code>blogs</code> table name.</p> <pre><code>// Assuming a `wp_` table prefix it will return `wp_blogs`.\n  $blogVersionsTable = $I-&gt;grabBlogsTableName();\n  $I-&gt;useBlog(23);\n  // Assuming a `wp_` table prefix it will return `wp_blogs`.\n  $blogVersionsTable = $I-&gt;grabBlogsTableName();\n</code></pre> grabCommentmetaTableName <p>Returns the prefixed comment meta table name.</p> <pre><code>// Get all the values of 'karma' for all comments.\n  $commentMeta = $I-&gt;grabCommentmetaTableName();\n  $I-&gt;grabAllFromDatabase($commentMeta, 'meta_value', ['meta_key' =&gt; 'karma']);\n</code></pre> grabCommentsTableName <p>Gets the comments table name.</p> <pre><code>// Will be `wp_comments`.\n  $comments = $I-&gt;grabCommentsTableName();\n  // Will be `wp_23_comments`.\n  $I-&gt;useBlog(23);\n  $comments = $I-&gt;grabCommentsTableName();\n</code></pre> grabLatestEntryByFromDatabase <p>Returns the id value of the last table entry.</p> <pre><code>$I-&gt;haveManyPostsInDatabase();\n  $postsTable = $I-&gt;grabPostsTableName();\n  $last = $I-&gt;grabLatestEntryByFromDatabase($postsTable, 'ID');\n  items.\n</code></pre> Parameters <ul> <li><code>string</code> $tableName - The table to fetch the last insertion for.</li> <li><code>string</code> $idColumn - The column that is used, in the table, to uniquely identify</li></ul> grabLinksTableName <p>Returns the prefixed links table name.</p> <pre><code>// Given a `wp_` table prefix returns `wp_links`.\n  $linksTable = $I-&gt;grabLinksTableName();\n  // Given a `wp_` table prefix returns `wp_23_links`.\n  $I-&gt;useBlog(23);\n  $linksTable = $I-&gt;grabLinksTableName();\n</code></pre> grabOptionFromDatabase <p>Gets an option value from the database.</p> <pre><code>$count = $I-&gt;grabOptionFromDatabase('foo_count');\n</code></pre> Parameters <ul> <li><code>string</code> $option_name - The name of the option to grab from the database.</li></ul> grabPostMetaFromDatabase <p>Gets the value of one or more post meta values from the database.</p> <pre><code>$thumbnail_id = $I-&gt;grabPostMetaFromDatabase($postId, '_thumbnail_id', true);\n</code></pre> Parameters <ul> <li><code>int</code> $postId - The post ID.</li> <li><code>string</code> $metaKey - The key of the meta to retrieve.</li> <li><code>bool</code> $single - Whether to return a single meta value or an array of all available meta values.</li></ul> grabPostmetaTableName <p>Returns the prefixed post meta table name.</p> <pre><code>// Returns 'wp_postmeta'.\n  $I-&gt;grabPostmetaTableName();\n  // Returns 'wp_23_postmeta'.\n  $I-&gt;useBlog(23);\n  $I-&gt;grabPostmetaTableName();\n</code></pre> grabPostsTableName <p>Gets the posts prefixed table name.</p> <pre><code>// Given a `wp_` table prefix returns `wp_posts`.\n  $postsTable = $I-&gt;grabPostsTableName();\n  // Given a `wp_` table prefix returns `wp_23_posts`.\n  $I-&gt;useBlog(23);\n  $postsTable = $I-&gt;grabPostsTableName();\n</code></pre> grabPrefixedTableNameFor <p>Returns a prefixed table name for the current blog. If the table is not one to be prefixed (e.g. <code>users</code>) then the proper table name will be returned.</p> <pre><code>// Will return wp_users.\n  $usersTable = $I-&gt;grabPrefixedTableNameFor('users');\n  // Will return wp_options.\n  $optionsTable = $I-&gt;grabPrefixedTableNameFor('options');\n  // Use a different blog and get its options table.\n  $I-&gt;useBlog(2);\n  $blogOptionsTable = $I-&gt;grabPrefixedTableNameFor('options');\n</code></pre> Parameters <ul> <li><code>string</code> $tableName - The table name, e.g. <code>options</code>.</li></ul> grabRegistrationLogTableName <p>Gets the prefixed <code>registration_log</code> table name.</p> <pre><code>// Assuming a `wp_` table prefix it will return `wp_registration_log`.\n  $blogVersionsTable = $I-&gt;grabRegistrationLogTableName();\n  $I-&gt;useBlog(23);\n  // Assuming a `wp_` table prefix it will return `wp_registration_log`.\n  $blogVersionsTable = $I-&gt;grabRegistrationLogTableName();\n</code></pre> grabSignupsTableName <p>Gets the prefixed <code>signups</code> table name.</p> <pre><code>// Assuming a `wp_` table prefix it will return `wp_signups`.\n  $blogVersionsTable = $I-&gt;grabSignupsTableName();\n  $I-&gt;useBlog(23);\n  // Assuming a `wp_` table prefix it will return `wp_signups`.\n  $blogVersionsTable = $I-&gt;grabSignupsTableName();\n</code></pre> grabSiteMetaTableName <p>Gets the prefixed <code>sitemeta</code> table name.</p> <pre><code>// Assuming a `wp_` table prefix it will return `wp_sitemeta`.\n  $blogVersionsTable = $I-&gt;grabSiteMetaTableName();\n  $I-&gt;useBlog(23);\n  // Assuming a `wp_` table prefix it will return `wp_sitemeta`.\n  $blogVersionsTable = $I-&gt;grabSiteMetaTableName();\n</code></pre> grabSiteOptionFromDatabase <p>Gets a site option from the database.</p> <pre><code>$fooCountOptionId = $I-&gt;haveSiteOptionInDatabase('foo_count','23');\n</code></pre> Parameters <ul> <li><code>string</code> $key - The name of the option to read from the database.</li></ul> grabSiteTableName <p>Gets the prefixed <code>site</code> table name.</p> <pre><code>// Assuming a `wp_` table prefix it will return `wp_site`.\n  $blogVersionsTable = $I-&gt;grabSiteTableName();\n  $I-&gt;useBlog(23);\n  // Assuming a `wp_` table prefix it will return `wp_site`.\n  $blogVersionsTable = $I-&gt;grabSiteTableName();\n</code></pre> grabSiteTransientFromDatabase <p>Gets a site transient from the database.</p> <pre><code>$I-&gt;grabSiteTransientFromDatabase('total_comments');\n  $I-&gt;grabSiteTransientFromDatabase('api_data');\n</code></pre> Parameters <ul> <li><code>string</code> $key - The site transient to fetch the value for, w/o the <code>_site_transient_</code> prefix.</li></ul> grabSiteUrl <p>Returns the current site URL as specified in the module configuration.</p> <pre><code>$shopPath = $I-&gt;grabSiteUrl('/shop');\n</code></pre> Parameters <ul> <li><code>string</code> $path - A path that should be appended to the site URL.</li></ul> grabTablePrefix <p>Returns the table prefix, namespaced for secondary blogs if selected.</p> <pre><code>// Assuming a table prefix of `wp_` it will return `wp_`;\n  $tablePrefix = $I-&gt;grabTablePrefix();\n  $I-&gt;useBlog(23);\n  // Assuming a table prefix of `wp_` it will return `wp_23_`;\n  $tablePrefix = $I-&gt;grabTablePrefix();\n</code></pre> grabTermIdFromDatabase <p>Gets a term ID from the database. Looks up the prefixed <code>terms</code> table, e.g. <code>wp_terms</code>.</p> <pre><code>// Return the 'fiction' term 'term_id'.\n  $termId = $I-&gt;grabTermIdFromDatabase(['name' =&gt; 'fiction']);\n  // Get a term ID by more stringent criteria.\n  $termId = $I-&gt;grabTermIdFromDatabase(['name' =&gt; 'fiction', 'slug' =&gt; 'genre--fiction']);\n  // Return the 'term_id' of the first term for a group.\n  $termId = $I-&gt;grabTermIdFromDatabase(['term_group' =&gt; 23]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. grabTermMetaTableName <p>Gets the terms meta table prefixed name.</p> <pre><code>// Returns 'wp_termmeta'.\n  $I-&gt;grabTermMetaTableName();\n  // Returns 'wp_23_termmeta'.\n  $I-&gt;useBlog(23);\n  $I-&gt;grabTermMetaTableName();\n</code></pre> grabTermRelationshipsTableName <p>Gets the prefixed term relationships table name, e.g. <code>wp_term_relationships</code>.</p> <pre><code>$I-&gt;grabTermRelationshipsTableName();\n</code></pre> grabTermTaxonomyIdFromDatabase <p>Gets a <code>term_taxonomy_id</code> from the database. Looks up the prefixed <code>terms_relationships</code> table, e.g. <code>wp_term_relationships</code>.</p> <pre><code>// Get the `term_taxonomy_id` for a term and a taxonomy.\n  $I-&gt;grabTermTaxonomyIdFromDatabase(['term_id' =&gt; $fictionId, 'taxonomy' =&gt; 'genre']);\n  // Get the `term_taxonomy_id` for the first term with a count of 23.\n  $I-&gt;grabTermTaxonomyIdFromDatabase(['count' =&gt; 23]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. grabTermTaxonomyTableName <p>Gets the prefixed term and taxonomy table name, e.g. <code>wp_term_taxonomy</code>.</p> <pre><code>// Returns 'wp_term_taxonomy'.\n  $I-&gt;grabTermTaxonomyTableName();\n  // Returns 'wp_23_term_taxonomy'.\n  $I-&gt;useBlog(23);\n  $I-&gt;grabTermTaxonomyTableName();\n</code></pre> grabTermsTableName <p>Gets the prefixed terms table name, e.g. <code>wp_terms</code>.</p> <pre><code>// Returns 'wp_terms'.\n  $I-&gt;grabTermsTableName();\n  // Returns 'wp_23_terms'.\n  $I-&gt;useBlog(23);\n  $I-&gt;grabTermsTableName();\n</code></pre> grabUserIdFromDatabase <p>Gets the a user ID from the database using the user login.</p> <pre><code>$userId = $I-&gt;grabUserIdFromDatabase('luca');\n</code></pre> Parameters <ul> <li><code>string</code> $userLogin - The user login name.</li></ul> grabUserMetaFromDatabase <p>Gets a user meta from the database.</p> <pre><code>// Returns a user 'karma' value.\n  $I-&gt;grabUserMetaFromDatabase($userId, 'karma');\n  // Returns an array, the unserialized version of the value stored in the database.\n  $I-&gt;grabUserMetaFromDatabase($userId, 'api_data');\n</code></pre> Parameters <ul> <li><code>int</code> $userId - The ID of th user to get the meta for.</li> <li><code>string</code> $meta_key - The meta key to fetch the value for.</li></ul> grabUsermetaTableName <p>Returns the prefixed users meta table name.</p> <pre><code>// Given a `wp_` table prefix returns `wp_usermeta`.\n  $usermetaTable = $I-&gt;grabUsermetaTableName();\n  // Given a `wp_` table prefix returns `wp_usermeta`.\n  $I-&gt;useBlog(23);\n  $usermetaTable = $I-&gt;grabUsermetaTableName();\n</code></pre> grabUsersTableName <p>Returns the prefixed users table name.</p> <pre><code>// Given a `wp_` table prefix returns `wp_users`.\n  $usersTable = $I-&gt;grabUsersTableName();\n  // Given a `wp_` table prefix returns `wp_users`.\n  $I-&gt;useBlog(23);\n  $usersTable = $I-&gt;grabUsersTableName();\n</code></pre> haveAttachmentInDatabase <p>Creates the database entries representing an attachment and moves the attachment file to the right location. timestamp that should be used to build the \"year/time\" uploads sub-folder structure. override the image sizes created by default.</p> <pre><code>$file = codecept_data_dir('images/test.png');\n  $attachmentId = $I-&gt;haveAttachmentInDatabase($file);\n  $image = codecept_data_dir('images/test-2.png');\n  $lastWeekAttachment = $I-&gt;haveAttachmentInDatabase($image, '-1 week');\n  Requires the WPFilesystem module.\n</code></pre> Parameters <ul> <li><code>string</code> $file - The absolute path to the attachment file.</li> <li><code>string/string/int</code> $date - Either a string supported by the <code>strtotime</code> function or a UNIX</li> <li><code>array/\\Codeception\\Module\\array/array $overrides - An associative array of values overriding the default ones. <li><code>\\Codeception\\Module\\array&gt; $imageSizes - An associative array in the format [  =&gt; [,]] to haveBlogInDatabase <p>Inserts a blog in the <code>blogs</code> table.</p> <pre><code>// Create the `test` subdomain blog.\n  $blogId = $I-&gt;haveBlogInDatabase('test', ['administrator' =&gt; $userId]);\n  // Create the `/test` subfolder blog.\n  $blogId = $I-&gt;haveBlogInDatabase('test', ['administrator' =&gt; $userId], false);\n  or subfolder (`true`)\n</code></pre> Parameters <ul> <li><code>string</code> $domainOrPath - The subdomain or the path to the be used for the blog.</li> <li><code>array/\\Codeception\\Module\\array/array $overrides - An array of values to override the defaults. <li><code>bool</code> $subdomain - Whether the new blog should be created as a subdomain (<code>true</code>)</li> haveCommentInDatabase <p>Inserts a comment in the database.</p> <pre><code>$I-&gt;haveCommentInDatabase($postId, ['comment_content' =&gt; 'Test Comment', 'comment_karma' =&gt; 23]);\n</code></pre> Parameters <ul> <li><code>int</code> $comment_post_ID - The id of the post the comment refers to.</li> <li><code>array/\\Codeception\\Module\\array/array $data - The comment data overriding default and random generated values. haveCommentMetaInDatabase <p>Inserts a comment meta field in the database. Array and object meta values will be serialized.</p> <pre><code>$I-&gt;haveCommentMetaInDatabase($commentId, 'api_ID', 23);\n  // The value will be serialized.\n  $apiData = ['ID' =&gt; 23, 'user' =&gt; 89, 'origin' =&gt; 'twitter'];\n  $I-&gt;haveCommentMetaInDatabase($commentId, 'api_data', $apiData);\n</code></pre> Parameters <ul> <li><code>int</code> $comment_id - The ID of the comment to insert the meta for.</li> <li><code>string</code> $meta_key - The key of the comment meta to insert.</li> <li><code>mixed</code> $meta_value - The value of the meta to insert, if serializable it will be serialized.</li></ul> haveLinkInDatabase <p>Inserts a link in the database.</p> <pre><code>$linkId = $I-&gt;haveLinkInDatabase(['link_url' =&gt; 'http://example.org']);\n</code></pre> Parameters <ul> <li><code>array/\\Codeception\\Module\\array/array $overrides - The data to insert. haveManyBlogsInDatabase <p>Inserts many blogs in the database. by the count.</p> <pre><code>$blogIds = $I-&gt;haveManyBlogsInDatabase(3, ['domain' =&gt;'test-{{n}}']);\n  foreach($blogIds as $blogId){\n  $I-&gt;useBlog($blogId);\n  $I-&gt;haveManuPostsInDatabase(3);\n  }\n</code></pre> Parameters <ul> <li><code>int</code> $count - The number of blogs to create.</li> <li><code>array/\\Codeception\\Module\\array/array $overrides - An array of values to override the default ones; <code>{{n}}</code> will be replaced <li><code>bool</code> $subdomain - Whether the new blogs should be created as a subdomain or subfolder.</li> haveManyCommentsInDatabase <p>Inserts many comments in the database.</p> <pre><code>// Insert 3 random comments for a post.\n  $I-&gt;haveManyCommentsInDatabase(3, $postId);\n  // Insert 3 random comments for a post.\n  $I-&gt;haveManyCommentsInDatabase(3, $postId, ['comment_content' =&gt; 'Comment {{n}}']);\n</code></pre> Parameters <ul> <li><code>int</code> $count - The number of comments to insert.</li> <li><code>int</code> $comment_post_ID - The comment parent post ID.</li> <li><code>array/\\Codeception\\Module\\array/array $overrides - An associative array to override the defaults. haveManyLinksInDatabase <p>Inserts many links in the database <code>links</code> table.</p> <pre><code>// Insert 3 randomly generated links in the database.\n  $linkIds = $I-&gt;haveManyLinksInDatabase(3);\n  // Inserts links in the database replacing the `n` placeholder.\n  $linkIds = $I-&gt;haveManyLinksInDatabase(3, ['link_url' =&gt; 'http://example.org/test-{{n}}']);\n</code></pre> Parameters <ul> <li><code>int</code> $count - The number of links to insert.</li> <li><code>array/\\Codeception\\Module\\array/array $overrides - Overrides for the default arguments. haveManyPostsInDatabase <p>Inserts many posts in the database returning their IDs. An array of values to override the defaults. The <code>{{n}}</code> placeholder can be used to have the post count inserted in its place; e.g. <code>Post Title - {{n}}</code> will be set to <code>Post Title - 0</code> for the first post, <code>Post Title - 1</code> for the second one and so on. The same applies to meta values as well.</p> <pre><code>// Insert 3 random posts.\n  $I-&gt;haveManyPostsInDatabase(3);\n  // Insert 3 posts with generated titles.\n  $I-&gt;haveManyPostsInDatabase(3, ['post_title' =&gt; 'Test post {{n}}']);\n</code></pre> Parameters <ul> <li><code>int</code> $count - The number of posts to insert.</li> <li><code>array/\\Codeception\\Module\\array/array $overrides haveManyTermsInDatabase <p>Inserts many terms in the database.</p> <pre><code>$terms = $I-&gt;haveManyTermsInDatabase(3, 'genre-{{n}}', 'genre');\n  $termIds = array_column($terms, 0);\n  $termTaxonomyIds = array_column($terms, 1);\n</code></pre> Parameters <ul> <li><code>int</code> $count - The number of terms to insert.</li> <li><code>string</code> $name - The term name template, can include the <code>{{n}}</code> placeholder.</li> <li><code>string</code> $taxonomy - The taxonomy to insert the terms for.</li> <li><code>array/\\Codeception\\Module\\array/array $overrides - An associative array of default overrides. haveManyUsersInDatabase <p>Inserts many users in the database.</p> <pre><code>$subscribers = $I-&gt;haveManyUsersInDatabase(5, 'user-{{n}}');\n  $editors = $I-&gt;haveManyUsersInDatabase(\n  5,\n  'user-{{n}}',\n  'editor',\n  ['user_email' =&gt; 'user-{{n}}@example.org']\n  );\n</code></pre> Parameters <ul> <li><code>int</code> $count - The number of users to insert.</li> <li><code>string</code> $user_login - The user login name.</li> <li><code>string</code> $role - The user role.</li> <li><code>array/\\Codeception\\Module\\array/array $overrides - An array of values to override the default ones. haveMenuInDatabase <p>Creates and adds a menu to a theme location in the database.</p> <pre><code>list($termId, $termTaxId) = $I-&gt;haveMenuInDatabase('test', 'sidebar');\n</code></pre> Parameters <ul> <li><code>string</code> $slug - The menu slug.</li> <li><code>string</code> $location - The theme menu location the menu will be assigned to.</li> <li><code>array/\\Codeception\\Module\\array/array $overrides - An array of values to override the defaults. haveMenuItemInDatabase <p>Adds a menu element to a menu for the current theme. post meta.</p> <pre><code>$I-&gt;haveMenuInDatabase('test', 'sidebar');\n  $I-&gt;haveMenuItemInDatabase('test', 'Test one', 0);\n  $I-&gt;haveMenuItemInDatabase('test', 'Test two', 1);\n</code></pre> Parameters <ul> <li><code>string</code> $menuSlug - The menu slug the item should be added to.</li> <li><code>string</code> $title - The menu item title.</li> <li><code>int/null</code> $menuOrder - An optional menu order, <code>1</code> based.</li> <li><code>array/\\Codeception\\Module\\array/array $meta - An associative array that will be prefixed with <code>_menu_item_</code> for the item haveOptionInDatabase <p>Inserts an option in the database.</p> <pre><code>$I-&gt;haveOptionInDatabase('posts_per_page', 23);\n  $I-&gt;haveOptionInDatabase('my_plugin_options', ['key_one' =&gt; 'value_one', 'key_two' =&gt; 89]);\n  If the option value is an object or an array then the value will be serialized.\n</code></pre> Parameters <ul> <li><code>string</code> $option_name - The option name.</li> <li><code>mixed</code> $option_value - The option value; if an array or object it will be serialized.</li> <li><code>string</code> $autoload - Weather the option should be autoloaded by WordPress or not.</li></ul> havePageInDatabase <p>Inserts a page in the database.</p> <pre><code>// Creates a test page in the database with random values.\n  $randomPageId = $I-&gt;havePageInDatabase();\n  // Creates a test page in the database defining its title.\n  $testPageId = $I-&gt;havePageInDatabase(['post_title' =&gt; 'Test page']);\n</code></pre> Parameters <ul> <li><code>array/\\Codeception\\Module\\array/array $overrides - An array of values to override the default ones. havePostInDatabase <p>Inserts a post in the database. values.</p> <pre><code>// Insert a post with random values in the database.\n  $randomPostId = $I-&gt;havePostInDatabase();\n  // Insert a post with specific values in the database.\n  $I-&gt;havePostInDatabase([\n  'post_type' =&gt; 'book',\n  'post_title' =&gt; 'Alice in Wonderland',\n  'meta_input' =&gt; [\n  'readers_count' =&gt; 23\n  ],\n  'tax_input' =&gt; [\n  ['genre' =&gt; 'fiction']\n  ]\n  ]);\n</code></pre> Parameters <ul> <li><code>array/\\Codeception\\Module\\array/array $data - An associative array of post data to override default and random generated havePostThumbnailInDatabase <p>Assigns the specified attachment ID as thumbnail (featured image) to a post.</p> <pre><code>$attachmentId = $I-&gt;haveAttachmentInDatabase(codecept_data_dir('some-image.png'));\n  $postId = $I-&gt;havePostInDatabase();\n  $I-&gt;havePostThumbnailInDatabase($postId, $attachmentId);\n</code></pre> Parameters <ul> <li><code>int</code> $postId - The post ID to assign the thumbnail (featured image) to.</li> <li><code>int</code> $thumbnailId - The post ID of the attachment.</li></ul> havePostmetaInDatabase <p>Adds one or more meta key and value couples in the database for a post.</p> <pre><code>// Set the post-meta for a post.\n  $I-&gt;havePostmetaInDatabase($postId, 'karma', 23);\n  // Set an array post-meta for a post, it will be serialized in the db.\n  $I-&gt;havePostmetaInDatabase($postId, 'data', ['one', 'two']);\n  // Use a loop to insert one meta per row.\n  foreach( ['one', 'two'] as $value){\n  $I-&gt;havePostmetaInDatabase($postId, 'data', $value);\n  }\n</code></pre> Parameters <ul> <li><code>int</code> $postId - The post ID.</li> <li><code>string</code> $meta_key - The meta key.</li> <li><code>mixed</code> $meta_value - The value to insert in the database, objects and arrays will be serialized.</li></ul> haveSiteOptionInDatabase <p>Inserts a site option in the database. If the value is an array or an object then the value will be serialized.</p> <pre><code>$fooCountOptionId = $I-&gt;haveSiteOptionInDatabase('foo_count','23');\n</code></pre> Parameters <ul> <li><code>string</code> $key - The name of the option to insert.</li> <li><code>mixed</code> $value - The value to insert for the option.</li></ul> haveSiteTransientInDatabase <p>Inserts a site transient in the database. If the value is an array or an object then the value will be serialized.</p> <pre><code>$I-&gt;haveSiteTransientInDatabase('total_comments_count', 23);\n  // This value will be serialized.\n  $I-&gt;haveSiteTransientInDatabase('api_data', ['user' =&gt; 'luca', 'token' =&gt; '11ae3ijns-j83']);\n</code></pre> Parameters <ul> <li><code>string</code> $key - The key of the site transient to insert, w/o the <code>_site_transient_</code> prefix.</li> <li><code>mixed</code> $value - The value to insert; if serializable the value will be serialized.</li></ul> haveTermInDatabase <p>Inserts a term in the database.</p> <pre><code>// Insert a random 'genre' term in the database.\n  $I-&gt;haveTermInDatabase('non-fiction', 'genre');\n  // Insert a term in the database with term meta.\n  $I-&gt;haveTermInDatabase('fiction', 'genre', [\n  'slug' =&gt; 'genre--fiction',\n  'meta' =&gt; [\n  'readers_count' =&gt; 23\n  ]\n  ]);\n</code></pre> Parameters <ul> <li><code>string</code> $name - The term name, e.g. \"Fuzzy\".</li> <li><code>string</code> $taxonomy - The term taxonomy</li> <li><code>array/\\Codeception\\Module\\array/array $overrides - An array of values to override the default ones. haveTermMetaInDatabase <p>Inserts a term meta row in the database. Objects and array meta values will be serialized.</p> <pre><code>$I-&gt;haveTermMetaInDatabase($fictionId, 'readers_count', 23);\n  // Insert some meta that will be serialized.\n  $I-&gt;haveTermMetaInDatabase($fictionId, 'flags', [3, 4, 89]);\n  // Use a loop to insert one meta per row.\n  foreach([3, 4, 89] as $value) {\n  $I-&gt;haveTermMetaInDatabase($fictionId, 'flag', $value);\n  }\n</code></pre> Parameters <ul> <li><code>int</code> $term_id - The ID of the term to insert the meta for.</li> <li><code>string</code> $meta_key - The key of the meta to insert.</li> <li><code>mixed</code> $meta_value - The value of the meta to insert, if serializable it will be serialized.</li></ul> haveTermRelationshipInDatabase <p>Creates a term relationship in the database. No check about the consistency of the insertion is made. E.g. a post could be assigned a term from a taxonomy that's not registered for that post type.</p> <pre><code>// Assign the `fiction` term to a book.\n  $I-&gt;haveTermRelationshipInDatabase($bookId, $fictionId);\n</code></pre> Parameters <ul> <li><code>int</code> $object_id - A post ID, a user ID or anything that can be assigned a taxonomy term.</li> <li><code>int</code> $term_taxonomy_id - The <code>term_taxonomy_id</code> of the term and taxonomy to create a relation with.</li> <li><code>int</code> $term_order - Defaults to <code>0</code>.</li></ul> haveTransientInDatabase <p>Inserts a transient in the database. If the value is an array or an object then the value will be serialized. Since the transients are set in the context of tests it's not possible to set an expiration directly.</p> <pre><code>// Store an array in the `tweets` transient.\n  $I-&gt;haveTransientInDatabase('tweets', $tweets);\n</code></pre> Parameters <ul> <li><code>string</code> $transient - The transient name.</li> <li><code>mixed</code> $value - The transient value.</li></ul> haveUserCapabilitiesInDatabase <p>Sets a user capabilities in the database.</p> <pre><code>// Assign one user a role in a blog.\n  $blogId = $I-&gt;haveBlogInDatabase('test');\n  $editor = $I-&gt;haveUserInDatabase('luca', 'editor');\n  $capsIds = $I-&gt;haveUserCapabilitiesInDatabase($editor, [$blogId =&gt; 'editor']);\n  // Assign a user two roles in blog 1.\n  $capsIds = $I-&gt;haveUserCapabilitiesInDatabase($userId, ['editor', 'subscriber']);\n  // Assign one user different roles in different blogs.\n  $capsIds = $I-&gt;haveUserCapabilitiesInDatabase($userId, [$blogId1 =&gt; 'editor', $blogId2 =&gt; 'author']);\n  // Assign a user a role and an additional capability in blog 1.\n  $I-&gt;haveUserCapabilitiesInDatabase($userId, ['editor' =&gt; true, 'edit_themes' =&gt; true]);\n  // Assign a user a mix of roles and capabilities in different blogs.\n  $capsIds = $I-&gt;haveUserCapabilitiesInDatabase(\n  $userId,\n  [\n  $blogId1 =&gt; ['editor' =&gt; true, 'edit_themes' =&gt; true],\n  $blogId2 =&gt; ['administrator' =&gt; true, 'edit_themes' =&gt; false]\n  ]\n  );\n  associative array of blog IDs/roles for a multisite\n  installation (e.g. `[1 =&gt; 'administrator`, 2 =&gt;\n  'subscriber']`).\n</code></pre> Parameters <ul> <li><code>int</code> $userId - The ID of the user to set the capabilities of.</li> <li><code>string/\\Codeception\\Module\\array/\\Codeception\\Module\\array $role - Either a role string (e.g. <code>administrator</code>),an haveUserInDatabase <p>Inserts a user and its meta in the database. defaults to <code>subscriber</code>. If more than one role is specified, then the first role in the list will be the user primary role and the <code>wp_user_level</code> will be set to that role. in the <code>users</code> and <code>usermeta</code> table.</p> <pre><code>// Create an editor user in blog 1 w/ specific email.\n  $userId = $I-&gt;haveUserInDatabase('luca', 'editor', ['user_email' =&gt; 'luca@example.org']);\n  // Create a subscriber user in blog 1.\n  $subscriberId = $I-&gt;haveUserInDatabase('subscriber');\n  // Create a user editor in blog 1, author in blog 2, administrator in blog 3.\n  $userWithMeta = $I-&gt;haveUserInDatabase('luca',\n  [\n  1 =&gt; 'editor',\n  2 =&gt; 'author',\n  3 =&gt; 'administrator'\n  ], [\n  'user_email' =&gt; 'luca@example.org'\n  'meta' =&gt; ['a meta_key' =&gt; 'a_meta_value']\n  ]\n  );\n  // Create editor in blog 1 w/ `edit_themes` cap, author in blog 2, admin in blog 3 w/o `manage_options` cap.\n  $userWithMeta = $I-&gt;haveUserInDatabase('luca',\n  [\n  1 =&gt; ['editor', 'edit_themes'],\n  2 =&gt; 'author',\n  3 =&gt; ['administrator' =&gt; true, 'manage_options' =&gt; false]\n  ]\n  );\n  // Create a user w/o role.\n  $userId = $I-&gt;haveUserInDatabase('luca', '');\n</code></pre> Parameters <ul> <li><code>string</code> $user_login - The user login name.</li> <li><code>string/string/\\Codeception\\Module\\array $role - The user role slug(s), e.g. <code>administrator</code> or <code>['author', 'editor']</code>; <li><code>array/\\Codeception\\Module\\array/array $overrides - An associative array of column names and values overriding defaults haveUserLevelsInDatabase <p>Sets the user access level meta in the database for a user. IDs/roles for a multisite installation (e.g. <code>[1 =&gt; 'administrator</code>, 2 =&gt; 'subscriber']`).</p> <pre><code>$userId = $I-&gt;haveUserInDatabase('luca', 'editor');\n  $moreThanAnEditorLessThanAnAdmin = 8;\n  $I-&gt;haveUserLevelsInDatabase($userId, $moreThanAnEditorLessThanAnAdmin);\n</code></pre> Parameters <ul> <li><code>int</code> $userId - The ID of the user to set the level for.</li> <li><code>\\Codeception\\Module\\array/string $role - Either a role string (e.g. <code>administrator</code>) or an array of blog haveUserMetaInDatabase <p>Sets a user meta in the database.</p> <pre><code>$userId = $I-&gt;haveUserInDatabase('luca', 'editor');\n  $I-&gt;haveUserMetaInDatabase($userId, 'karma', 23);\n  values will trigger the insertion of multiple rows.\n</code></pre> Parameters <ul> <li><code>int</code> $userId - The user ID.</li> <li><code>string</code> $meta_key - The meta key to set the value for.</li> <li><code>mixed</code> $meta_value - Either a single value or an array of values; objects will be serialized while array of</li></ul> importSql <p>Loads a set SQL code lines in the current database.</p> <pre><code>// Import a SQL string.\n  $I-&gt;importSql([$sqlString]);\n  // Import a set of SQL strings.\n  $I-&gt;importSql($sqlStrings);\n  // Import a prepared set of SQL strings.\n  $preparedSqlStrings = array_map(function($line){\n  return str_replace('{{date}}', date('Y-m-d H:i:s'), $line);\n  }, $sqlTemplate);\n  $I-&gt;importSql($preparedSqlStrings);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $sql - The SQL strings to load. importSqlDumpFile <p>Import the SQL dump file if populate is enabled.</p> <pre><code>// Import a dump file passing the absolute path.\n  $I-&gt;importSqlDumpFile(codecept_data_dir('dumps/start.sql'));\n  Specifying a dump file that file will be imported.\n</code></pre> Parameters <ul> <li><code>string/null</code> $dumpFile - The dump file that should be imported in place of the default one.</li></ul> seeAttachmentInDatabase <p>Checks for an attachment in the database.</p> <pre><code>$url = 'https://example.org/images/foo.png';\n  $I-&gt;seeAttachmentInDatabase(['guid' =&gt; $url]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. seeBlogInDatabase <p>Checks for a blog in the <code>blogs</code> table.</p> <pre><code>// Search for a blog by `blog_id`.\n  $I-&gt;seeBlogInDatabase(['blog_id' =&gt; 23]);\n  // Search for all blogs on a path.\n  $I-&gt;seeBlogInDatabase(['path' =&gt; '/sub-path/']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. seeCommentInDatabase <p>Checks for a comment in the database. Will look up the \"comments\" table.</p> <pre><code>$I-&gt;seeCommentInDatabase(['comment_ID' =&gt; 23]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. seeCommentMetaInDatabase <p>Checks that a comment meta value is in the database. Will look up the \"commentmeta\" table.</p> <pre><code>// Assert a specified meta for a comment exists.\n  $I-&gt;seeCommentMetaInDatabase(['comment_ID' =&gt; $commentId, 'meta_key' =&gt; 'karma', 'meta_value' =&gt; 23]);\n  // Assert the comment has at least one meta set.\n  $I-&gt;seeCommentMetaInDatabase(['comment_ID' =&gt; $commentId]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. seeLinkInDatabase <p>Checks for a link in the <code>links</code> table of the database.</p> <pre><code>// Asserts a link exists by name.\n  $I-&gt;seeLinkInDatabase(['link_name' =&gt; 'my-link']);\n  // Asserts at least one link exists for the user.\n  $I-&gt;seeLinkInDatabase(['link_owner' =&gt; $userId]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. seeOptionInDatabase <p>Checks if an option is in the database for the current blog, either by criteria or by name and value. If checking for an array or an object then the serialized version will be checked for.</p> <pre><code>// Checks an option is in the database.\n  $I-&gt;seeOptionInDatabase('tables_version');\n  // Checks an option is in the database and has a specific value.\n  $I-&gt;seeOptionInDatabase('tables_version', '1.0');\n  $I-&gt;seeOptionInDatabase(['option_name' =&gt; 'tables_version', 'option_value' =&gt; 1.0']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/string $criteriaOrName - An array of search criteria or the option name. <li><code>mixed/null</code> $value - The optional value to try and match, only used if the option name is provided.</li> seePageInDatabase <p>Checks for a page in the database.</p> <pre><code>// Asserts a page with an exists in the database.\n  $I-&gt;seePageInDatabase(['ID' =&gt; 23]);\n  // Asserts a page with a slug and ID exists in the database.\n  $I-&gt;seePageInDatabase(['post_title' =&gt; 'Test Page', 'ID' =&gt; 23]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. seePostInDatabase <p>Checks for a post in the database.</p> <pre><code>// Assert a post exists in the database.\n  $I-&gt;seePostInDatabase(['ID' =&gt; 23]);\n  // Assert a post with a slug and ID exists in the database.\n  $I-&gt;seePostInDatabase(['post_content' =&gt; 'test content', 'ID' =&gt; 23]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. seePostMetaInDatabase <p>Checks for a post meta value in the database for the current blog. If the <code>meta_value</code> is an object or an array then the check will be made for serialized values.</p> <pre><code>$postId = $I-&gt;havePostInDatabase(['meta_input' =&gt; ['foo' =&gt; 'bar']];\n  $I-&gt;seePostMetaInDatabase(['post_id' =&gt; '$postId', 'meta_key' =&gt; 'foo']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. seePostWithTermInDatabase <p>Checks that a post to term relation exists in the database. The method will check the \"term_relationships\" table.</p> <pre><code>$fiction = $I-&gt;haveTermInDatabase('fiction', 'genre');\n  $postId = $I-&gt;havePostInDatabase(['tax_input' =&gt; ['genre' =&gt; ['fiction']]]);\n  $I-&gt;seePostWithTermInDatabase($postId, $fiction['term_taxonomy_id']);\n  passed this parameter will be interpreted as a `term_id`, else as a\n  the\n  term order.\n  to build a `taxonomy_term_id` from the `term_id`.\n</code></pre> Parameters <ul> <li><code>int</code> $post_id - The post ID.</li> <li><code>int</code> $term_taxonomy_id - The term <code>term_id</code> or <code>term_taxonomy_id</code>; if the <code>$taxonomy</code> argument is</li> <li><code>int/null</code> $term_order - The order the term applies to the post, defaults to <code>null</code> to not use</li> <li><code>string/null</code> $taxonomy - The taxonomy the <code>term_id</code> is for; if passed this parameter will be used</li></ul> seeSiteOptionInDatabase <p>Checks that a site option is in the database.</p> <pre><code>// Check that the option is set in the database.\n  $I-&gt;seeSiteOptionInDatabase('foo_count');\n  // Check that the option is set and has a specific value.\n  $I-&gt;seeSiteOptionInDatabase('foo_count', 23);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/string $criteriaOrName - An array of search criteria or the option name. <li><code>mixed/null</code> $value - The optional value to try and match, only used if the option name is provided.</li> seeSiteSiteTransientInDatabase <p>Checks that a site option is in the database.</p> <pre><code>// Check a transient exists.\n  $I-&gt;seeSiteSiteTransientInDatabase('total_counts');\n  // Check a transient exists and has a specific value.\n  $I-&gt;seeSiteSiteTransientInDatabase('total_counts', 23);\n</code></pre> Parameters <ul> <li><code>string</code> $key - The name of the transient to check for, w/o the <code>_site_transient_</code> prefix.</li> <li><code>mixed/null</code> $value - If provided then the assertion will include the value.</li></ul> seeTableInDatabase <p>Checks that a table is in the database.</p> <pre><code>$options = $I-&gt;grabPrefixedTableNameFor('options');\n  $I-&gt;seeTableInDatabase($options);\n</code></pre> Parameters <ul> <li><code>string</code> $table - The full table name, including the table prefix.</li></ul> seeTermInDatabase <p>Checks for a term in the database. Looks up the <code>terms</code> and <code>term_taxonomy</code> prefixed tables. and the <code>term_taxonomy</code> tables.</p> <pre><code>$I-&gt;seeTermInDatabase(['slug' =&gt; 'genre--fiction']);\n  $I-&gt;seeTermInDatabase(['name' =&gt; 'Fiction', 'slug' =&gt; 'genre--fiction']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of criteria to search for the term, can be columns from the <code>terms</code> seeTermMetaInDatabase <p>Checks for a term meta in the database.</p> <pre><code>list($termId, $termTaxonomyId) = $I-&gt;haveTermInDatabase('fiction', 'genre');\n  $I-&gt;haveTermMetaInDatabase($termId, 'rating', 4);\n  $I-&gt;seeTermMetaInDatabase(['term_id' =&gt; $termId,'meta_key' =&gt; 'rating', 'meta_value' =&gt; 4]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. seeTermRelationshipInDatabase <p>Checks for a term relationship in the database.</p> <pre><code>$postId = $I-&gt;havePostInDatabase(['tax_input' =&gt; ['category' =&gt; 'one']]);\n  $I-&gt;seeTermRelationshipInDatabase(['object_id' =&gt; $postId, 'term_taxonomy_id' =&gt; $oneTermTaxId]);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. seeTermTaxonomyInDatabase <p>Checks for a taxonomy taxonomy in the database.</p> <pre><code>list($termId, $termTaxonomyId) = $I-&gt;haveTermInDatabase('fiction', 'genre');\n  $I-&gt;seeTermTaxonomyInDatabase(['term_id' =&gt; $termId, 'taxonomy' =&gt; 'genre']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. seeUserInDatabase <p>Checks that a user is in the database. The method will check the \"users\" table.</p> <pre><code>$I-&gt;seeUserInDatabase([\n  \"user_email\" =&gt; \"test@example.org\",\n  \"user_login\" =&gt; \"login name\"\n  ])\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. seeUserMetaInDatabase <p>Checks for a user meta value in the database.</p> <pre><code>$I-&gt;seeUserMetaInDatabase(['user_id' =&gt; 23, 'meta_key' =&gt; 'karma']);\n</code></pre> Parameters <ul> <li><code>\\Codeception\\Module\\array/array $criteria - An array of search criteria. useBlog <p>Sets the blog to be used. This has nothing to do with WordPress <code>switch_to_blog</code> function, this code will affect the table prefixes used.</p> <pre><code>// Switch to the blog with ID 23.\n  $I-&gt;useBlog(23);\n  // Switch back to the main blog.\n  $I-&gt;useMainBlog();\n</code></pre> Parameters <ul> <li><code>int</code> $blogId - The ID of the blog to use.</li></ul> useMainBlog <p>Sets the current blog to the main one (<code>blog_id</code> 1).</p> <pre><code>// Switch to the blog with ID 23.\n  $I-&gt;useBlog(23);\n  // Switch back to the main blog.\n  $I-&gt;useMainBlog();\n</code></pre> useTheme <p>Sets the current theme options.</p> <pre><code>$I-&gt;useTheme('twentyseventeen');\n  $I-&gt;useTheme('child-of-twentyseventeen', 'twentyseventeen');\n  $I-&gt;useTheme('acme', 'acme', 'Acme Theme');\n</code></pre> Parameters <ul> <li><code>string</code> $stylesheet - The theme stylesheet slug, e.g. <code>twentysixteen</code>.</li> <li><code>string</code> $template - The theme template slug, e.g. <code>twentysixteen</code>, defaults to <code>$stylesheet</code>.</li> <li><code>string</code> $themeName - The theme name, e.g. <code>Acme</code>, defaults to the \"title\" version of</li></ul> <p>This class extends \\Codeception\\Module\\Db</p> <p>This class implements \\Codeception\\Lib\\Interfaces\\Db</p>"},{"location":"v3/modules/WPFilesystem/","title":"WPFilesystem module","text":"<p>This module should be used in acceptance and functional tests, see levels of testing for more information. This module extends the Filesystem module adding WordPress-specific configuration parameters and methods. The module provides methods to read, write and update the WordPress filesystem directly, without relying on WordPress methods, using WordPress functions or triggering WordPress filters. This module also provides methods to scaffold plugins and themes on the fly in the context of tests and auto-remove them after each test.</p>"},{"location":"v3/modules/WPFilesystem/#module-requirements-for-codeception-40","title":"Module requirements for Codeception 4.0+","text":"<p>This module requires the <code>codeception/module-filesystem</code> Composer package to work when wp-browser is used with Codeception 4.0.  </p> <p>To install the package run: </p> <pre><code>composer require --dev codeception/module-filesystem:^1.0\n</code></pre>"},{"location":"v3/modules/WPFilesystem/#configuration","title":"Configuration","text":"<ul> <li><code>wpRootFolder</code> required The absolute, or relative to the project root folder, path to the root WordPress installation folder. The WordPress installation root folder is the one that contains the <code>wp-load.php</code> file.</li> <li><code>themes</code> - defaults to <code>/wp-content/themes</code>; the path, relative to the the WordPress installation root folder, to the themes folder.</li> <li><code>plugins</code> - defaults to <code>/wp-content/plugins</code>; the path, relative to the WordPress installation root folder, to the plugins folder.</li> <li><code>mu-plugins</code> - defaults to <code>wp-content/mu-plugins</code>; the path, relative to the WordPress installation root folder, to the must-use plugins folder.</li> <li><code>uploads</code> - defaults to <code>/wp-content/uploads</code>; the path, relative to the WordPress installation root folder, to the uploads folder.</li> </ul>"},{"location":"v3/modules/WPFilesystem/#example-configuration","title":"Example configuration","text":"<pre><code>modules:\n    enabled:\n        - WPFilesystem\n    config:\n        WPFilesystem:\n            wpRootFolder: \"/var/www/wordpress\"\n</code></pre>"},{"location":"v3/modules/WPFilesystem/#public-api","title":"Public API","text":"<ul> <li> amInMuPluginPath </li> <li> amInPluginPath </li> <li> amInThemePath </li> <li> amInUploadsPath </li> <li> cleanMuPluginDir </li> <li> cleanPluginDir </li> <li> cleanThemeDir </li> <li> cleanUploadsDir </li> <li> copyDirToMuPlugin </li> <li> copyDirToPlugin </li> <li> copyDirToTheme </li> <li> copyDirToUploads </li> <li> deleteMuPluginFile </li> <li> deletePluginFile </li> <li> deleteThemeFile </li> <li> deleteUploadedDir </li> <li> deleteUploadedFile </li> <li> dontSeeInMuPluginFile </li> <li> dontSeeInPluginFile </li> <li> dontSeeInThemeFile </li> <li> dontSeeInUploadedFile </li> <li> dontSeeMuPluginFileFound </li> <li> dontSeePluginFileFound </li> <li> dontSeeThemeFileFound </li> <li> dontSeeUploadedFileFound </li> <li> getBlogUploadsPath </li> <li> getUploadsPath </li> <li> getWpRootFolder </li> <li> haveMuPlugin </li> <li> havePlugin </li> <li> haveTheme </li> <li> makeUploadsDir </li> <li> openUploadedFile </li> <li> seeInMuPluginFile </li> <li> seeInPluginFile </li> <li> seeInThemeFile </li> <li> seeInUploadedFile </li> <li> seeMuPluginFileFound </li> <li> seePluginFileFound </li> <li> seeThemeFileFound </li> <li> seeUploadedFileFound </li> <li> writeToMuPluginFile </li> <li> writeToPluginFile </li> <li> writeToThemeFile </li> <li> writeToUploadedFile </li> </ul> amInMuPluginPath <p>Sets the current working folder to a folder in a mu-plugin.</p> <pre><code>$I-&gt;amInMuPluginPath('mu-plugin');\n</code></pre> Parameters <ul> <li><code>string</code> $path - The path to the folder, relative to the mu-plugins root folder.</li></ul> amInPluginPath <p>Sets the current working folder to a folder in a plugin.</p> <pre><code>$I-&gt;amInPluginPath('my-plugin');\n</code></pre> Parameters <ul> <li><code>string</code> $path - The folder path, relative to the root uploads folder, to change to.</li></ul> amInThemePath <p>Sets the current working folder to a folder in a theme.</p> <pre><code>$I-&gt;amInThemePath('my-theme');\n</code></pre> Parameters <ul> <li><code>string</code> $path - The path to the theme folder, relative to themes root folder.</li></ul> amInUploadsPath <p>Enters, changing directory, to the uploads folder in the local filesystem.</p> <pre><code>$I-&gt;amInUploadsPath('/logs');\n  $I-&gt;seeFileFound('shop.log');\n</code></pre> Parameters <ul> <li><code>string</code> $path - The path, relative to the site uploads folder.</li></ul> cleanMuPluginDir <p>Cleans, emptying it, a folder in a mu-plugin folder.</p> <pre><code>$I-&gt;cleanMuPluginDir('mu-plugin1/foo');\n</code></pre> Parameters <ul> <li><code>string</code> $dir - The path to the directory, relative to the mu-plugins root folder.</li></ul> cleanPluginDir <p>Cleans, emptying it, a folder in a plugin folder.</p> <pre><code>$I-&gt;cleanPluginDir('my-plugin/foo');\n</code></pre> Parameters <ul> <li><code>string</code> $dir - The path to the folder, relative to the plugins root folder.</li></ul> cleanThemeDir <p>Clears, emptying it, a folder in a theme folder.</p> <pre><code>$I-&gt;cleanThemeDir('my-theme/foo');\n</code></pre> Parameters <ul> <li><code>string</code> $dir - The path to the folder, relative to the themese root folder.</li></ul> cleanUploadsDir <p>Clears a folder in the uploads folder. The date argument can be a string compatible with <code>strtotime</code> or a Unix timestamp that will be used to build the <code>Y/m</code> uploads subfolder path.</p> <pre><code>$I-&gt;cleanUploadsDir('some/folder');\n  $I-&gt;cleanUploadsDir('some/folder', 'today');\n</code></pre> Parameters <ul> <li><code>string</code> $dir - The path to the directory to delete, relative to the uploads folder.</li> <li><code>string/int/[\\DateTime](http://php.net/manual/en/class.datetime.php)</code> $date - The date of the uploads to delete, will default to <code>now</code>.</li></ul> copyDirToMuPlugin <p>Copies a folder to a folder in a mu-plugin.</p> <pre><code>$I-&gt;copyDirToMuPlugin(codecept_data_dir('foo'), 'mu-plugin/foo');\n</code></pre> Parameters <ul> <li><code>string</code> $src - The path to the source file to copy.</li> <li><code>string</code> $pluginDst - The path to the destination folder, relative to the mu-plugins root folder.</li></ul> copyDirToPlugin <p>Copies a folder to a folder in a plugin.</p> <pre><code>// Copy the 'foo' folder to the 'foo' folder in the plugin.\n  $I-&gt;copyDirToPlugin(codecept_data_dir('foo'), 'my-plugin/foo');\n</code></pre> Parameters <ul> <li><code>string</code> $src - The path to the source directory to copy.</li> <li><code>string</code> $pluginDst - The destination path, relative to the plugins root folder.</li></ul> copyDirToTheme <p>Copies a folder in a theme folder.</p> <pre><code>$I-&gt;copyDirToTheme(codecept_data_dir('foo'), 'my-theme');\n</code></pre> Parameters <ul> <li><code>string</code> $src - The path to the source file.</li> <li><code>string</code> $themeDst - The path to the destination folder, relative to the themes root folder.</li></ul> copyDirToUploads <p>Copies a folder to the uploads folder. The date argument can be a string compatible with <code>strtotime</code> or a Unix timestamp that will be used to build the <code>Y/m</code> uploads subfolder path.</p> <pre><code>$I-&gt;copyDirToUploads(codecept_data_dir('foo'), 'uploadsFoo');\n  $I-&gt;copyDirToUploads(codecept_data_dir('foo'), 'uploadsFoo', 'today');\n</code></pre> Parameters <ul> <li><code>string</code> $src - The path to the source file, relative to the current uploads folder.</li> <li><code>string</code> $dst - The path to the destination file, relative to the current uploads folder.</li> <li><code>string/int/[\\DateTime](http://php.net/manual/en/class.datetime.php)</code> $date - The date of the uploads to delete, will default to <code>now</code>.</li></ul> deleteMuPluginFile <p>Deletes a file in a mu-plugin folder.</p> <pre><code>$I-&gt;deleteMuPluginFile('mu-plugin1/some-file.txt');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the file, relative to the mu-plugins root folder.</li></ul> deletePluginFile <p>Deletes a file in a plugin folder.</p> <pre><code>$I-&gt;deletePluginFile('my-plugin/some-file.txt');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The folder path, relative to the plugins root folder.</li></ul> deleteThemeFile <p>Deletes a file in a theme folder.</p> <pre><code>$I-&gt;deleteThemeFile('my-theme/some-file.txt');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the file to delete, relative to the themes root folder.</li></ul> deleteUploadedDir <p>Deletes a dir in the uploads folder. The date argument can be a string compatible with <code>strtotime</code> or a Unix timestamp that will be used to build the <code>Y/m</code> uploads subfolder path.</p> <pre><code>$I-&gt;deleteUploadedDir('folder');\n  $I-&gt;deleteUploadedDir('folder', 'today');\n</code></pre> Parameters <ul> <li><code>string</code> $dir - The path to the directory to delete, relative to the uploads folder.</li> <li><code>string/int/[\\DateTime](http://php.net/manual/en/class.datetime.php)</code> $date - The date of the uploads to delete, will default to <code>now</code>.</li></ul> deleteUploadedFile <p>Deletes a file in the uploads folder. The date argument can be a string compatible with <code>strtotime</code> or a Unix timestamp that will be used to build the <code>Y/m</code> uploads subfolder path.</p> <pre><code>$I-&gt;deleteUploadedFile('some-file.txt');\n  $I-&gt;deleteUploadedFile('some-file.txt', 'today');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The file path, relative to the uploads folder or the current folder.</li> <li><code>string/int</code> $date - A string compatible with <code>strtotime</code> or a Unix timestamp.</li></ul> dontSeeInMuPluginFile <p>Checks that a file in a mu-plugin folder does not contain a string.</p> <pre><code>$I-&gt;dontSeeInMuPluginFile('mu-plugin1/some-file.txt', 'foo');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the file, relative to the mu-plugins root folder.</li> <li><code>string</code> $contents - The contents to check the file for.</li></ul> dontSeeInPluginFile <p>Checks that a file in a plugin folder does not contain a string.</p> <pre><code>$I-&gt;dontSeeInPluginFile('my-plugin/some-file.txt', 'foo');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the file, relative to the plugins root folder.</li> <li><code>string</code> $contents - The contents to check the file for.</li></ul> dontSeeInThemeFile <p>Checks that a file in a theme folder does not contain a string.</p> <pre><code>$I-&gt;dontSeeInThemeFile('my-theme/some-file.txt', 'foo');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the file, relative to the themes root folder.</li> <li><code>string</code> $contents - The contents to check the file for.</li></ul> dontSeeInUploadedFile <p>Checks that a file in the uploads folder does contain a string. The date argument can be a string compatible with <code>strtotime</code> or a Unix timestamp that will be used to build the <code>Y/m</code> uploads subfolder path.</p> <pre><code>$I-&gt;dontSeeInUploadedFile('some-file.txt', 'foo');\n  $I-&gt;dontSeeInUploadedFile('some-file.txt','foo', 'today');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The file path, relative to the uploads folder or the current folder.</li> <li><code>string</code> $contents - The not expected file contents or part of them.</li> <li><code>string/int</code> $date - A string compatible with <code>strtotime</code> or a Unix timestamp.</li></ul> dontSeeMuPluginFileFound <p>Checks that a file is not found in a mu-plugin folder.</p> <pre><code>$I-&gt;dontSeeMuPluginFileFound('mu-plugin1/some-file.txt');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the file, relative to the mu-plugins folder.</li></ul> dontSeePluginFileFound <p>Checks that a file is not found in a plugin folder.</p> <pre><code>$I-&gt;dontSeePluginFileFound('my-plugin/some-file.txt');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the file, relative to the plugins root folder.</li></ul> dontSeeThemeFileFound <p>Checks that a file is not found in a theme folder.</p> <pre><code>$I-&gt;dontSeeThemeFileFound('my-theme/some-file.txt');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the file, relative to the themes root folder.</li></ul> dontSeeUploadedFileFound <p>Checks thata a file does not exist in the uploads folder. The date argument can be a string compatible with <code>strtotime</code> or a Unix timestamp that will be used to build the <code>Y/m</code> uploads subfolder path.</p> <pre><code>$I-&gt;dontSeeUploadedFileFound('some-file.txt');\n  $I-&gt;dontSeeUploadedFileFound('some-file.txt','today');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The file path, relative to the uploads folder or the current folder.</li> <li><code>string/int</code> $date - A string compatible with <code>strtotime</code> or a Unix timestamp.</li></ul> getBlogUploadsPath <p>Returns the absolute path to a blog uploads folder or file.</p> <pre><code>$blogId = $I-&gt;haveBlogInDatabase('test');\n  $testTodayUploads = $I-&gt;getBlogUploadsPath($blogId);\n  $testLastMonthLogs = $I-&gt;getBlogUploadsPath($blogId, '/logs', '-1 month');\n  file or folder.\n  sub-folders in the year/month format; a UNIX timestamp or\n  a string supported by the `strtotime` function; defaults\n  to `now`.\n</code></pre> Parameters <ul> <li><code>int</code> $blogId - The blog ID to get the path for.</li> <li><code>string</code> $file - The path, relatitve to the blog uploads folder, to the</li> <li><code>null/string/[\\DateTime](http://php.net/manual/en/class.datetime.php)/[\\DateTime](http://php.net/manual/en/class.datetime.php)Immutable</code> $date - The date that should be used to build the uploads</li></ul> getUploadsPath <p>Returns the path to the specified uploads file of folder. Not providing a value for <code>$file</code> and <code>$date</code> will return the uploads folder path.</p> <pre><code>$todaysPath = $I-&gt;getUploadsPath();\n  $lastWeek = $I-&gt;getUploadsPath('', '-1 week');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The file path, relative to the uploads folder.</li> <li><code>mixed</code> $date - A string compatible with <code>strtotime</code>, a Unix timestamp or a Date object.</li></ul> getWpRootFolder <p>Returns the absolute path to WordPress root folder without trailing slash.</p> <pre><code>$rootFolder = $I-&gt;getWpRootFolder();\n  $I-&gt;assertFileExists($rootFolder . 'wp-load.php');\n</code></pre> haveMuPlugin <p>Creates a mu-plugin file, including plugin header, in the mu-plugins folder. The code can not contain the opening '&lt;?php' tag.</p> <pre><code>$code = 'echo \"Hello world!\"';\n  $I-&gt;haveMuPlugin('foo-mu-plugin.php', $code);\n  // Load the code from a file.\n  $code = file_get_contents(codecept_data_dir('code/mu-plugin.php'));\n  $I-&gt;haveMuPlugin('foo-mu-plugin.php', $code);\n</code></pre> Parameters <ul> <li><code>string</code> $filename - The path to the file to create, relative to the plugins root folder.</li> <li><code>string</code> $code - The content of the plugin file with or without the opening PHP tag.</li></ul> havePlugin <p>Creates a plugin file, including plugin header, in the plugins folder. The plugin is just created and not activated; the code can not contain the opening '&lt;?php' tag.</p> <pre><code>$code = 'echo \"Hello world!\"';\n  $I-&gt;havePlugin('foo/plugin.php', $code);\n  // Load the code from a file.\n  $code = file_get_contents(codecept_data_dir('code/plugin.php'));\n  $I-&gt;havePlugin('foo/plugin.php', $code);\n</code></pre> Parameters <ul> <li><code>string</code> $path - The path to the file to create, relative to the plugins folder.</li> <li><code>string</code> $code - The content of the plugin file with or without the opening PHP tag.</li></ul> haveTheme <p>Creates a theme file structure, including theme style file and index, in the themes folder. The theme is just created and not activated; the code can not contain the opening '&lt;?php' tag.</p> <pre><code>$code = 'sayHi();';\n  $functionsCode  = 'function sayHi(){echo \"Hello world\";};';\n  $I-&gt;haveTheme('foo', $indexCode, $functionsCode);\n  // Load the code from a file.\n  $indexCode = file_get_contents(codecept_data_dir('code/index.php'));\n  $functionsCode = file_get_contents(codecept_data_dir('code/functions.php'));\n  $I-&gt;haveTheme('foo', $indexCode, $functionsCode);\n</code></pre> Parameters <ul> <li><code>string</code> $folder - The path to the theme to create, relative to the themes root folder.</li> <li><code>string</code> $indexFileCode - The content of the theme index.php file with or without the opening PHP tag.</li> <li><code>string</code> $functionsFileCode - The content of the theme functions.php file with or without the opening PHP tag.</li></ul> makeUploadsDir <p>Creates an empty folder in the WordPress installation uploads folder.</p> <pre><code>$logsDir = $I-&gt;makeUploadsDir('logs/acme');\n  to create.\n</code></pre> Parameters <ul> <li><code>string</code> $path - The path, relative to the WordPress installation uploads folder, of the folder</li></ul> openUploadedFile <p>Opens a file in the the uploads folder. The date argument can be a string compatible with <code>strtotime</code> or a Unix timestamp that will be used to build the <code>Y/m</code> uploads subfolder path.</p> <pre><code>$I-&gt;openUploadedFile('some-file.txt');\n  $I-&gt;openUploadedFile('some-file.txt', 'time');\n</code></pre> Parameters <ul> <li><code>string</code> $filename - The path to the file, relative to the current uploads folder.</li> <li><code>string/int/[\\DateTime](http://php.net/manual/en/class.datetime.php)</code> $date - The date of the uploads to delete, will default to <code>now</code>.</li></ul> seeInMuPluginFile <p>Checks that a file in a mu-plugin folder contains a string.</p> <pre><code>$I-&gt;seeInMuPluginFile('mu-plugin1/some-file.txt', 'foo');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path the file, relative to the mu-plugins root folder.</li> <li><code>string</code> $contents - The contents to check the file for.</li></ul> seeInPluginFile <p>Checks that a file in a plugin folder contains a string.</p> <pre><code>$I-&gt;seeInPluginFile('my-plugin/some-file.txt', 'foo');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the file, relative to the plugins root folder.</li> <li><code>string</code> $contents - The contents to check the file for.</li></ul> seeInThemeFile <p>Checks that a file in a theme folder contains a string.</p> <pre><code>&lt;?php\n  $I-&gt;seeInThemeFile('my-theme/some-file.txt', 'foo');\n  ?&gt;\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the file, relative to the themes root folder.</li> <li><code>string</code> $contents - The contents to check the file for.</li></ul> seeInUploadedFile <p>Checks that a file in the uploads folder contains a string. The date argument can be a string compatible with <code>strtotime</code> or a Unix timestamp that will be used to build the <code>Y/m</code> uploads subfolder path.</p> <pre><code>$I-&gt;seeInUploadedFile('some-file.txt', 'foo');\n  $I-&gt;seeInUploadedFile('some-file.txt','foo', 'today');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The file path, relative to the uploads folder or the current folder.</li> <li><code>string</code> $contents - The expected file contents or part of them.</li> <li><code>string/int</code> $date - A string compatible with <code>strtotime</code> or a Unix timestamp.</li></ul> seeMuPluginFileFound <p>Checks that a file is found in a mu-plugin folder.</p> <pre><code>$I-&gt;seeMuPluginFileFound('mu-plugin1/some-file.txt');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the file, relative to the mu-plugins folder.</li></ul> seePluginFileFound <p>Checks that a file is found in a plugin folder.</p> <pre><code>$I-&gt;seePluginFileFound('my-plugin/some-file.txt');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the file, relative to thep plugins root folder.</li></ul> seeThemeFileFound <p>Checks that a file is found in a theme folder.</p> <pre><code>$I-&gt;seeThemeFileFound('my-theme/some-file.txt');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the file, relative to the themes root folder.</li></ul> seeUploadedFileFound <p>Checks if file exists in the uploads folder. The date argument can be a string compatible with <code>strtotime</code> or a Unix timestamp that will be used to build the <code>Y/m</code> uploads subfolder path.</p> <pre><code>$I-&gt;seeUploadedFileFound('some-file.txt');\n  $I-&gt;seeUploadedFileFound('some-file.txt','today');\n  ?&gt;\n</code></pre> Parameters <ul> <li><code>string</code> $filename - The file path, relative to the uploads folder or the current folder.</li> <li><code>string/int</code> $date - A string compatible with <code>strtotime</code> or a Unix timestamp.</li></ul> writeToMuPluginFile <p>Writes a file in a mu-plugin folder.</p> <pre><code>$I-&gt;writeToMuPluginFile('mu-plugin1/some-file.txt', 'foo');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the destination file, relative to the mu-plugins root folder.</li> <li><code>string</code> $data - The data to write to the file.</li></ul> writeToPluginFile <p>Writes a file in a plugin folder.</p> <pre><code>$I-&gt;writeToPluginFile('my-plugin/some-file.txt', 'foo');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the file, relative to the plugins root folder.</li> <li><code>string</code> $data - The data to write in the file.</li></ul> writeToThemeFile <p>Writes a string to a file in a theme folder.</p> <pre><code>$I-&gt;writeToThemeFile('my-theme/some-file.txt', 'foo');\n</code></pre> Parameters <ul> <li><code>string</code> $file - The path to the file, relative to the themese root folder.</li> <li><code>string</code> $data - The data to write to the file.</li></ul> writeToUploadedFile <p>Writes a string to a file in the the uploads folder. The date argument can be a string compatible with <code>strtotime</code> or a Unix timestamp that will be used to build the <code>Y/m</code> uploads subfolder path.</p> <pre><code>$I-&gt;writeToUploadedFile('some-file.txt', 'foo bar');\n  $I-&gt;writeToUploadedFile('some-file.txt', 'foo bar', 'today');\n</code></pre> Parameters <ul> <li><code>string</code> $filename - The path to the destination file, relative to the current uploads folder.</li> <li><code>string</code> $data - The data to write to the file.</li> <li><code>string/int/[\\DateTime](http://php.net/manual/en/class.datetime.php)</code> $date - The date of the uploads to delete, will default to <code>now</code>.</li></ul> <p>This class extends \\Codeception\\Module\\Filesystem</p>"},{"location":"v3/modules/WPLoader/","title":"WPLoader module","text":"<p>This module should be used in integration tests, see levels of testing for more information, to bootstrap WordPress code in the context of the tests. Setting the <code>loadOnly</code> parameter to <code>true</code> the module can be additionally used in acceptance and functional tests to access WordPress code in the tests context. This module is a wrapper around the functionalities provided by the WordPress PHPUnit Core test suite, as such it provides the same method and facilities. The parameters provided to the module duplicate the ones used in the WordPress configuration file: the <code>WPLoader</code> module will not bootstrap WordPress using the <code>wp-config.php</code> file, it will define and use its own WordPress configuration built from the module parameters.</p>"},{"location":"v3/modules/WPLoader/#everything-happens-in-a-transaction","title":"Everything happens in a transaction","text":"<p>When used to bootstrap and install WordPress (<code>loadOnly: false</code>) exactly as the the WordPress PHPUnit Core test suite it is based on, this module will operate any change to the database in a transaction. This means that, in the context of integration tests, the result of any write or delete operation done during the tests will be rolled back at the end of each test method; this is done for a number of reasons like performance and tests independence. Inspection of the database during tests, e.g. stopping execution using XDebug, will not show any change in the database. Keep this in mind while trying to debug integration tests using the <code>WPLoader</code> module. When configured to only load WordPress (<code>loadOnly: true</code>) then any database operation will be committed and written to the database.</p>"},{"location":"v3/modules/WPLoader/#configuration","title":"Configuration","text":"<ul> <li><code>wpRootFolder</code> required The absolute, or relative to the project root folder, path to the root WordPress installation folder. The WordPress installation root folder is the one that contains the <code>wp-load.php</code> file.</li> <li><code>dbName</code> required - The name of the database used by the WordPress installation, same as the <code>DB_NAME</code> constant.</li> <li><code>dbHost</code> required - The host of the database used by the WordPress installation, same as the <code>DB_HOST</code> constant. If the database is accessible (as is the case on the latest version of [Local by Flywheel][http://localwp.com]) via unix socket, then the string to insert here should look like this <code>localhost:/path/to/the/mysql.sock</code>.</li> <li><code>dbUser</code> required - The user of the database used by the WordPress installation, same as the <code>DB_USER</code> constant.</li> <li><code>dbPassword</code> required - The password of the database used by the WordPress installation, same as <code>DB_PASSWORD</code> constant.</li> <li><code>loadOnly</code> - defaults to <code>false</code>; whether to only load WordPress, without bootstrapping a fresh installation for tests or not. Read more in the \"Using WPLoader in acceptance and functional tests\" section. If this parameter is set to <code>true</code> the following parameters will not apply.</li> <li><code>isolatedInstall</code> - defaults to <code>true</code>, whether to install and bootstrap the WordPress installation in a secondary PHP thread for thread safety or not. Maintained for back-compatibility purposes with wp-browser first versions: to get a replica of the bootstrap process used by WordPress Core PHPUnit tests leave this to <code>true</code>.</li> <li><code>installationTableHandling</code> - defaults to <code>empty</code>; it controls how tables created by WordPress and plugins will be handled during the installation of WordPress during tests. By default tables will be emptied of any content, but some plugins might require tables to be dropped before WordPress is installed and after plugins are activated (this used to be the default behavior). Supported values are <code>drop</code> to drop the tables, <code>empty</code> to just empty the tables and <code>let</code> to do nothing about the tables. If you get errors from database queries while the <code>WPLoader</code> module installs the tests, then try changing this parameter value. </li> <li><code>wpDebug</code> - defaults to <code>true</code>, the value the <code>WP_DEBUG</code> constant will be set to.</li> <li><code>multisite</code> - defaults to <code>false</code>, the value the <code>MULTISITE</code> constant will be set to.</li> <li><code>skipPluggables</code> - defaults to <code>false</code>, if set to <code>true</code> will skip the definition of pluggable functions.</li> <li><code>dbCharset</code> - defaults to <code>utf8</code>, the value the <code>DB_CHARSET</code> constant will be set to.</li> <li><code>dbCollate</code> - defaults to an empty string, the value the <code>DB_COLLATE</code> constant will be set to.</li> <li><code>tablePrefix</code> - defaults to <code>wptests_</code>, the value the <code>$table_prefix</code> variable will be set to.</li> <li><code>domain</code> - defaults to <code>example.org</code>, the domain of the WordPress site to scaffold for the tests.</li> <li><code>adminEmail</code> - defaults to <code>admin@example.org</code>, the email of the WordPress site to scaffold for the tests.</li> <li><code>title</code> - defaults to <code>Test Blog</code>, the title of the WordPress site to scaffolded for the tests.</li> <li><code>phpBinary</code> - defaults to <code>php</code>, the PHP binary the host machine will have to use to bootstrap and load the test WordPress installation.</li> <li><code>language</code> - defaults to an empty string, the language of the WordPress installation to scaffold.</li> <li><code>configFile</code> - defaults to an empty string, an additional configuration file to include before loading WordPress. Any instruction in this fill will run before any WordPress file is included.</li> <li><code>contentFolder</code> - defaults to an empty string; the path, relative to the <code>wpRootFolder</code> or absolute, to the content folder if different from the default one or the one defined by the <code>WP_CONTENT_DIR</code> constant; if the <code>WP_CONTENT_DIR</code> constant is defined in a config file (see the <code>configFile</code> parameter) this will be ignored.</li> <li><code>pluginsFolder</code> - defaults to an empty string; the path, relative to the <code>wpRootFolder</code> or absolute, to the plugins folder from the <code>wpRootFolder</code> if different from the default one or the one defined by the <code>WP_PLUGIN_DIR</code> constant; if the <code>WP_PLUGIN_DIR</code> constant is defined in a config file (see the <code>configFile</code> parameter) this will be ignored.</li> <li><code>plugins</code> - defaults to an empty string; a list of plugins that should be loaded before any test case runs and after mu-plugins have been loaded; these should be defined in the <code>folder/plugin-file.php</code> format.</li> <li><code>activatePlugins</code> - defaults to an empty string, a list of plugins that will be activated before any test case runs and after WordPress is fully loaded and set up; these should be defined in the <code>folder/plugin-file.php</code> format; when the <code>multisite</code> option is set to <code>true</code> the plugins will be network activated during the installation.</li> <li><code>bootstrapActions</code> - defaults to an empty string, a list of actions or static functions that should be called after before any test case runs, after plugins have been loaded and activated; static functions should be defined in the YAML array format:     <code>yaml     bootstrapActions:         - action_one         - action_two         - [MyClass, myStaticMethod]</code></li> <li> <p><code>theme</code> - defaults to an empty string, the theme that should be activated for the tests; if a string is passed then both <code>template</code> and <code>stylesheet</code> options will be set to the passed value; if an array is passed then the <code>template</code> and <code>stylesheet</code> will be set in that order:</p> <p><code>yaml theme: my-theme</code></p> <p>The theme will be set to <code>my-theme</code>.</p> <p><code>yaml theme: [ parent, child ]</code></p> <p>The <code>template</code> will be set to <code>parent</code>, the <code>stylesheet</code> will be set to <code>child</code>.</p> </li> </ul> <p>A word of caution: right now the only way to write tests able to take advantage of the suite is to use the <code>WP_UnitTestCase</code> test case class; while the module will load fine and will raise no problems <code>WP_UnitTestCase</code> will take care of handling the database as intended and using another test case class will almost certainly result in an error if the test case defines more than one test method.</p>"},{"location":"v3/modules/WPLoader/#example-configuration","title":"Example configuration","text":"<pre><code>  modules:\n      enabled:\n          - WPLoader\n      config:\n          WPLoader:\n              multisite: false\n              wpRootFolder: \"/Users/luca/www/wordpress\"\n              dbName: \"wordpress_tests\"\n              dbHost: \"localhost\"\n              dbUser: \"root\"\n              dbPassword: \"password\"\n              isolatedInstall: true\n              installationTableHandling: drop\n              tablePrefix: \"wptests_\"\n              domain: \"wordrpess.localhost\"\n              adminEmail: \"admin@wordpress.localhost\"\n              title: \"Test Blog\"\n              theme: my-theme\n              plugins: ['hello.php', 'my-plugin/my-plugin.php']\n              activatePlugins: ['hello.php', 'my-plugin/my-plugin.php']\n</code></pre>"},{"location":"v3/modules/WPLoader/#usage-in-integration-or-wordpress-unit-tests","title":"Usage in integration or \"WordPress unit\" tests","text":"<p>The most common use of this module is to run integration, or \"WordPress unit\" tests (see levels of testing for more information).  </p> <p>As a first step generate a <code>WPTestCase</code> using Codeception command-line utility (see the commands provided by wp-browser):</p> <pre><code>codecept generate:wpunit my_suite \"Acme\\User\"\n</code></pre> <p>Codeception will generate the <code>tests/my_suite/Acme/UserTest.php</code> class. The class extends the <code>Codeception\\TestCase\\WPTestCase</code> class provided by wp-browser; this looks like a normal PHPUnit test case but has some perks due to it's mixed breed nature. Understanding them might help you work with it:</p> <ul> <li>WordPress is installed and configured for the tests before the test case is loaded; WordPress defined functions and classes (and those of the plugins and themes loaded with it) will be available in the <code>setUpBeforeClass</code> method. </li> <li> <p>WordPress is not loaded when PHPUnit will call the data provider methods; this means the <code>post_provider</code> method will generate a function not found exception when the test case runs as the WordPress defined methods are not loaded yet:     <code>``php     public function post_provider(){             //</code>wp_insert_post` is loaded with WordPress and WordPress has not been loaded yet!             return [                     [wp_insert_post(['post_title' =&gt; 'Test', 'post_status' =&gt; 'publish'])]             ];     }</p> <p>public function test_posts($post_id){         $this-&gt;assertInstanceOf(WP_Post::class, get_post($post_id)); } <code>* WordPress is reset to an initial known state before each test runs; the database transaction is rolled back to wipe any data and tables you might have manipulated in the tests, the global space is cleaned. See [Everything happens in a transaction](#everything-happens-in-a-transaction).   * This is a [Codeception Unit test](https://codeception.com/docs/05-UnitTests), as such it does provide access to the `$this-&gt;tester` property to access the methods defined in other modules loaded in the suite and to [Codeception test doubles](https://codeception.com/docs/05-UnitTests#Test-Doubles) * This is a [PhpUnit](https://phpunit.de/ \"PHPUnit \u2013 The PHP Testing Framework\") test case too; there are way too many testing functions to cover to report them here but, to highlight a few: [mocking with Prophecy](https://phpunit.readthedocs.io/en/8.2/test-doubles.html) and the wealth of [PHPUnit assertion methods](https://phpunit.readthedocs.io/en/8.2/writing-tests-for-phpunit.html). * This is kind of a WordPress Core suite test case; as such it provides access to its functions and to the often-overlooked `static::factory()` method; in this instance too there are too many methods to list them all but it's worth noting how easy it is to set up test fixtures with the factory:</code>php public function test_post_creation(){         $random_post_id = static::factory()-&gt;post-&gt;create();</p> <pre><code>    $this-&gt;assertInstanceOf(WP_Post::class, get_post($random_post_id));\n</code></pre> <p>} <code>* The `factory` property can be accessed on the `tester` property too and will work the same way as if called using `static::factory()`:</code>php public function test_post_creation(){         $random_post_id = $this-&gt;tester-&gt;factory()-&gt;post-&gt;create();</p> <pre><code>    $this-&gt;assertInstanceOf(WP_Post::class, get_post($random_post_id));\n</code></pre> <p>} ```</p> </li> </ul>"},{"location":"v3/modules/WPLoader/#wploader-to-only-bootstrap-wordpress","title":"WPLoader to only bootstrap WordPress","text":"<p>If the need is to just bootstrap the WordPress installation in the context of the tests variable scope then the <code>WPLoader</code> module <code>loadOnly</code> parameter should be set to <code>true</code>; this could be the case for functional tests in need to access WordPress provided methods, functions and values. An example configuration for the module in this mode is this one:</p> <pre><code>  modules:\n      enabled:\n          - WPDb # BEFORE the WPLoader one!\n          - WPLoader # AFTER the WPDb one!\n      config:\n          WPDb:\n              dsn: 'mysql:host=localhost;dbname=wordpress'\n              user: 'root'\n              password: 'password'\n              dump: 'tests/_data/dump.sql'\n              populate: true\n              cleanup: true\n              waitlock: 10\n              url: 'http://wordpress.localhost'\n              urlReplacement: true\n              tablePrefix: 'wp_'\n          WPLoader:\n              loadOnly: true \n              wpRootFolder: \"/Users/User/www/wordpress\"\n              dbName: \"wpress-tests\"\n              dbHost: \"localhost\"\n              dbUser: \"root\"\n              dbPassword: \"root\"\n              domain: \"wordpress.localhost\"\n</code></pre> <p>With reference to the table above the module will not take care of the test WordPress installation state before and after the tests, the installed and activated plugins, and theme. The module can be used in conjunction with a <code>WPDb</code> module to provide the tests with a WordPress installation suiting the tests at hand; when doing so please take care to list, in the suite configuration file <code>modules</code> section (see example above) the <code>WPDb</code> module before the <code>WPLoader</code> one. Codeception will initialize the modules in the same order they are listed in the modules section of the suite configuration file and the WPLoader module needs the database to be populated by the <code>WPDb</code> module before it runs! As an example this is a correct suite configuration:</p> <pre><code>modules:\n  enabled:\n      - WPDb # this before...\n      - WPLoader # ...this one.\n  config:\n      WPDb:\n        # ...\n      WPLoader:\n        loadOnly: true\n        # ... \n</code></pre>"},{"location":"v3/modules/WPLoader/#public-api","title":"Public API","text":"<ul> <li> debugWpActionFinal </li> <li> debugWpActionInitial </li> <li> debugWpFilterFinal </li> <li> debugWpFilterInitial </li> <li> factory </li> <li> getContentFolder </li> <li> getPluginsFolder </li> <li> startWpFiltersDebug </li> <li> stopWpFiltersDebug </li> </ul> debugWpActionFinal <p>Debugs a single WordPress action final call using Codeception debug functions. The output will show following the selected output verbosity (<code>--debug</code> and <code>-vvv</code> CLI options).</p> <pre><code>// Start debugging all WordPress actions final value.\n  add_action('all', [$this,'debugWpActionFinal']);\n  // Run some code firing actions and debug them.\n  // Stop debugging all WordPress actions final value.\n  remove_action('all', [$this,'debugWpActionFinal']);\n</code></pre> Parameters <ul> <li><code>mixed</code> $args</li></ul> debugWpActionInitial <p>Debugs a single WordPress action initial call using Codeception debug functions. The output will show following the selected output verbosity (<code>--debug</code> and <code>-vvv</code> CLI options).</p> <pre><code>// Start debugging all WordPress actions initial value.\n  add_action('all', [$this,'debugWpActionInitial']);\n  // Run some code firing actions and debug them.\n  // Stop debugging all WordPress actions initial value.\n  remove_action('all', [$this,'debugWpActionInitial']);\n</code></pre> Parameters <ul> <li><code>mixed</code> $args</li></ul> debugWpFilterFinal <p>Debugs a single WordPress filter final call using Codeception debug functions. The output will show following the selected output verbosity (<code>--debug</code> and <code>-vvv</code> CLI options).</p> <pre><code>// Start debugging all WordPress filters final value.\n  add_filter('all', [$this,'debugWpFilterFinal']);\n  // Run some code firing filters and debug them.\n  // Stop debugging all WordPress filters final value.\n  remove_filter('all', [$this,'debugWpFilterFinal']);\n</code></pre> Parameters <ul> <li><code>mixed</code> $args</li></ul> debugWpFilterInitial <p>Debugs a single WordPress filter initial call using Codeception debug functions. The output will show following the selected output verbosity (<code>--debug</code> and <code>-vvv</code> CLI options).</p> <pre><code>// Start debugging all WordPress filters initial value.\n  add_filter('all', [$this,'debugWpFilterInitial']);\n  // Run some code firing filters and debug them.\n  // Stop debugging all WordPress filters initial value.\n  remove_filter('all', [$this,'debugWpFilterInitial']);\n</code></pre> Parameters <ul> <li><code>mixed</code> $args</li></ul> factory <p>Accessor method to get the object storing the factories for things. This methods gives access to the same factories provided by the Core test suite.</p> <pre><code>$postId = $I-&gt;factory()-&gt;post-&gt;create();\n  $userId = $I-&gt;factory()-&gt;user-&gt;create(['role' =&gt; 'administrator']);\n</code></pre> getContentFolder <p>Returns the absolute path to the WordPress content directory.</p> <pre><code>$content = $this-&gt;getContentFolder();\n  $themes = $this-&gt;getContentFolder('themes');\n  $twentytwenty = $this-&gt;getContentFolder('themes/twentytwenty');\n</code></pre> Parameters <ul> <li><code>string</code> $path - An optional path to append to the content directory absolute path.</li></ul> getPluginsFolder <p>Returns the absolute path to the plugins directory. The value will first look at the <code>WP_PLUGIN_DIR</code> constant, then the <code>pluginsFolder</code> configuration parameter and will, finally, look in the default path from the WordPress root directory.</p> <pre><code>$plugins = $this-&gt;getPluginsFolder();\n  $hello = $this-&gt;getPluginsFolder('hello.php');\n</code></pre> Parameters <ul> <li><code>string</code> $path - A relative path to append to te plugins directory absolute path.</li></ul> startWpFiltersDebug <p>Starts the debug of all WordPress filters and actions. The method hook on <code>all</code> filters and actions to debug their value.</p> <pre><code>// Start debugging all WordPress filters and action final and initial values.\n  $this-&gt;startWpFiltersDebug();\n  // Run some code firing filters and debug them.\n  // Stop debugging all WordPress filters and action final and initial values.\n  $this-&gt;stopWpFiltersDebug();\n  the array of arguments as input.\n</code></pre> Parameters <ul> <li><code>\\callable</code> $format - A callback function to format the arguments debug output; the callback will receive</li></ul> stopWpFiltersDebug <p>Stops the debug of all WordPress filters and actions.</p> <pre><code>// Start debugging all WordPress filters and action final and initial values.\n  $this-&gt;startWpFiltersDebug();\n  // Run some code firing filters and debug them.\n  // Stop debugging all WordPress filters and action final and initial values.\n  $this-&gt;stopWpFiltersDebug();\n</code></pre> <p>This class extends \\Codeception\\Module</p>"},{"location":"v3/modules/WPQueries/","title":"WPQueries module","text":"<p>This module should be used in integration tests, see levels of testing for more information, to make assertions on the database queries made by the global <code>$wpdb</code> object. This module requires the WPLoader module to work. The module will set, if not set already, the <code>SAVEQUERIES</code> constant to <code>true</code> and will throw an exception if the constant is already set to a falsy value.  </p>"},{"location":"v3/modules/WPQueries/#configuration","title":"Configuration","text":"<p>This module does not require any configuration, but requires the WPLoader module to work correctly. </p>"},{"location":"v3/modules/WPQueries/#usage","title":"Usage","text":"<p>This module must be used in a test case extending the <code>\\Codeception\\TestCase\\WPTestCase</code> class.  </p> <p>The module public API is accessible calling via the <code>\\Codeception\\TestCase\\WPTestCase::queries()</code> method:</p> <pre><code>&lt;?php\n\nuse Codeception\\Module\\WPQueries;\n\nclass WPQueriesUsageTest extends \\Codeception\\TestCase\\WPTestCase\n{\n    public function test_queries_made_by_factory_are_not_tracked()\n    {\n        $currentQueriesCount = $this-&gt;queries()-&gt;countQueries();\n\n        $this-&gt;assertNotEmpty($currentQueriesCount);\n\n        static::factory()-&gt;post-&gt;create_many(3);\n\n        $this-&gt;assertNotEmpty($currentQueriesCount);\n        $this-&gt;assertEquals($currentQueriesCount, $this-&gt;queries()-&gt;countQueries());\n    }\n\n    public function test_count_queries()\n    {\n        $currentQueriesCount = $this-&gt;queries()-&gt;countQueries();\n\n        $this-&gt;assertNotEmpty($currentQueriesCount);\n\n        foreach (range(1, 3) as $i) {\n            wp_insert_post(['post_title' =&gt; 'Post ' . $i, 'post_content' =&gt; str_repeat('test', $i)]);\n        }\n\n        $this-&gt;assertNotEmpty($currentQueriesCount);\n        $this-&gt;assertGreaterThan($currentQueriesCount, $this-&gt;queries()-&gt;countQueries());\n    }\n}\n</code></pre>"},{"location":"v3/modules/WPQueries/#public-api","title":"Public API","text":"<ul> <li> assertCountQueries </li> <li> assertNotQueries </li> <li> assertNotQueriesByAction </li> <li> assertNotQueriesByFilter </li> <li> assertNotQueriesByFunction </li> <li> assertNotQueriesByMethod </li> <li> assertNotQueriesByStatement </li> <li> assertNotQueriesByStatementAndAction </li> <li> assertNotQueriesByStatementAndFilter </li> <li> assertNotQueriesByStatementAndFunction </li> <li> assertNotQueriesByStatementAndMethod </li> <li> assertQueries </li> <li> assertQueriesByAction </li> <li> assertQueriesByFilter </li> <li> assertQueriesByFunction </li> <li> assertQueriesByMethod </li> <li> assertQueriesByStatement </li> <li> assertQueriesByStatementAndAction </li> <li> assertQueriesByStatementAndFilter </li> <li> assertQueriesByStatementAndFunction </li> <li> assertQueriesByStatementAndMethod </li> <li> assertQueriesCountByAction </li> <li> assertQueriesCountByFilter </li> <li> assertQueriesCountByFunction </li> <li> assertQueriesCountByMethod </li> <li> assertQueriesCountByStatement </li> <li> assertQueriesCountByStatementAndAction </li> <li> assertQueriesCountByStatementAndFilter </li> <li> assertQueriesCountByStatementAndFunction </li> <li> assertQueriesCountByStatementAndMethod </li> <li> countQueries </li> <li> getQueries </li> </ul> assertCountQueries <p>Asserts that n queries have been made.</p> <pre><code>$posts = $this-&gt;factory()-&gt;post-&gt;create_many(3);\n  $cachedUsers = $this-&gt;factory()-&gt;user-&gt;create_many(2);\n  $nonCachedUsers = $this-&gt;factory()-&gt;user-&gt;create_many(2);\n  foreach($cachedUsers as $userId){\n  wp_cache_set('page-posts-for-user-' . $userId, $posts, 'acme');\n  }\n  // Run the same query as different users\n  foreach(array_merge($cachedUsers, $nonCachedUsers) as $userId){\n  $pagePosts = $plugin-&gt;getPagePostsForUser($userId);\n  }\n  $I-&gt;assertCountQueries(2, 'A query should be made for each user missing cached posts.')\n</code></pre> Parameters <ul> <li><code>int</code> $n - The expected number of queries.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertNotQueries <p>Asserts that no queries were made. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>$posts = $this-&gt;factory()-&gt;post-&gt;create_many(3);\n  wp_cache_set('page-posts', $posts, 'acme');\n  $pagePosts = $plugin-&gt;getPagePosts();\n  $I-&gt;assertNotQueries('Queries should not be made if the cache is set.')\n</code></pre> Parameters <ul> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertNotQueriesByAction <p>Asserts that no queries were made as a consequence of the specified action. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>add_action( 'edit_post', function($postId){\n  $count = get_option('acme_title_updates_count');\n  update_option('acme_title_updates_count', ++$count);\n  } );\n  wp_delete_post($bookId);\n  $this-&gt;assertNotQueriesByAction('edit_post');\n</code></pre> Parameters <ul> <li><code>string</code> $action - The action name, e.g. 'init'.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertNotQueriesByFilter <p>Asserts that no queries were made as a consequence of the specified filter. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>add_filter('the_title', function($title, $postId){\n  $post = get_post($postId);\n  if($post-&gt;post_type !== 'book'){\n  return $title;\n  }\n  $new = get_option('acme_new_prefix');\n  return \"{$new} - \" . $title;\n  });\n  $title = apply_filters('the_title', get_post($notABookId)-&gt;post_title, $notABookId);\n  $this-&gt;assertNotQueriesByFilter('the_title');\n</code></pre> Parameters <ul> <li><code>string</code> $filter - The filter name, e.g. 'posts_where'.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertNotQueriesByFunction <p>Asserts that no queries were made by the specified function. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>$this-&gt;assertEmpty(Acme\\get_orphaned_posts());\n  Acme\\delete_orphaned_posts();\n  $this-&gt;assertNotQueriesByFunction('Acme\\delete_orphaned_posts');\n</code></pre> Parameters <ul> <li><code>string</code> $function - The fully qualified name of the function to check.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertNotQueriesByMethod <p>Asserts that no queries have been made by the specified class method. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>$options = new Acme\\Options();\n  $options-&gt;update('adsSource', 'not-a-real-url.org');\n  $I-&gt;assertNotQueriesByMethod('Acme\\Options', 'update');\n</code></pre> Parameters <ul> <li><code>string</code> $class - The fully qualified name of the class to check.</li> <li><code>string</code> $method - The name of the method to check.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertNotQueriesByStatement <p>Asserts that no queries have been made by the specified class method. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>$bookRepository = new Acme\\BookRepository();\n  $repository-&gt;where('ID', 23)-&gt;set('title', 'Peter Pan', $deferred = true);\n  $this-&gt;assertNotQueriesByStatement('INSERT', 'Deferred write should happen on __destruct');\n  Regular expressions must contain delimiters.\n</code></pre> Parameters <ul> <li><code>string</code> $statement - A simple string the statement should start with or a valid regular expression.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertNotQueriesByStatementAndAction <p>Asserts that no queries were made as a consequence of the specified action containing the SQL query. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>add_action( 'edit_post', function($postId){\n  $count = get_option('acme_title_updates_count');\n  update_option('acme_title_updates_count', ++$count);\n  } );\n  wp_delete_post($bookId);\n  $this-&gt;assertNotQueriesByStatementAndAction('DELETE', 'delete_post');\n  Regular expressions must contain delimiters.\n</code></pre> Parameters <ul> <li><code>string</code> $statement - A simple string the statement should start with or a valid regular expression.</li> <li><code>string</code> $action - The action name, e.g. 'init'.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertNotQueriesByStatementAndFilter <p>Asserts that no queries were made as a consequence of the specified filter containing the specified SQL query. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>add_filter('the_title', function($title, $postId){\n  $post = get_post($postId);\n  if($post-&gt;post_type !== 'book'){\n  return $title;\n  }\n  $new = get_option('acme_new_prefix');\n  return \"{$new} - \" . $title;\n  });\n  $title = apply_filters('the_title', get_post($notABookId)-&gt;post_title, $notABookId);\n  $this-&gt;assertNotQueriesByStatementAndFilter('SELECT', 'the_title');\n  Regular expressions must contain delimiters.\n</code></pre> Parameters <ul> <li><code>string</code> $statement - A simple string the statement should start with or a valid regular expression.</li> <li><code>string</code> $filter - The filter name, e.g. 'posts_where'.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertNotQueriesByStatementAndFunction <p>Asserts that no queries were made by the specified function starting with the specified SQL statement. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>wp_insert_post(['ID' =&gt; $bookId, 'post_title' =&gt; 'The Call of the Wild']);\n  $this-&gt;assertNotQueriesByStatementAndFunction('INSERT', 'wp_insert_post');\n  $this-&gt;assertQueriesByStatementAndFunction('UPDATE', 'wp_insert_post');\n  Regular expressions must contain delimiters.\n</code></pre> Parameters <ul> <li><code>string</code> $statement - A simple string the statement should start with or a valid regular expression.</li> <li><code>string</code> $function - The name of the function to check the assertions for.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertNotQueriesByStatementAndMethod <p>Asserts that no queries were made by the specified class method starting with the specified SQL statement. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>Acme\\BookRepository::new(['title' =&gt; 'Alice in Wonderland'])-&gt;commit();\n  $this-&gt;assertQueriesByStatementAndMethod('INSERT', Acme\\BookRepository::class, 'commit');\n  Regular expressions must contain delimiters.\n</code></pre> Parameters <ul> <li><code>string</code> $statement - A simple string the statement should start with or a valid regular expression.</li> <li><code>string</code> $class - The fully qualified name of the class to check.</li> <li><code>string</code> $method - The name of the method to check.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueries <p>Asserts that at least one query was made during the test. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>wp_cache_delete('page-posts', 'acme');\n  $pagePosts = $plugin-&gt;getPagePosts();\n  $I-&gt;assertQueries('Queries should be made to set the cache.')\n</code></pre> Parameters <ul> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesByAction <p>Asserts that at least one query was made as a consequence of the specified action. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>add_action( 'edit_post', function($postId){\n  $count = get_option('acme_title_updates_count');\n  update_option('acme_title_updates_count', ++$count);\n  } );\n  wp_update_post(['ID' =&gt; $bookId, 'post_title' =&gt; 'New Title']);\n  $this-&gt;assertQueriesByAction('edit_post');\n</code></pre> Parameters <ul> <li><code>string</code> $action - The action name, e.g. 'init'.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesByFilter <p>Asserts that at least one query was made as a consequence of the specified filter. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>add_filter('the_title', function($title, $postId){\n  $post = get_post($postId);\n  if($post-&gt;post_type !== 'book'){\n  return $title;\n  }\n  $new = get_option('acme_new_prefix');\n  return \"{$new} - \" . $title;\n  });\n  $title = apply_filters('the_title', get_post($bookId)-&gt;post_title, $bookId);\n  $this-&gt;assertQueriesByFilter('the_title');\n</code></pre> Parameters <ul> <li><code>string</code> $filter - The filter name, e.g. 'posts_where'.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesByFunction <p>Asserts that queries were made by the specified function. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>acme_clean_queue();\n  $this-&gt;assertQueriesByFunction('acme_clean_queue');\n</code></pre> Parameters <ul> <li><code>string</code> $function - The fully qualified name of the function to check.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesByMethod <p>Asserts that at least one query has been made by the specified class method. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>$options = new Acme\\Options();\n  $options-&gt;update('showAds', false);\n  $I-&gt;assertQueriesByMethod('Acme\\Options', 'update');\n</code></pre> Parameters <ul> <li><code>string</code> $class - The fully qualified name of the class to check.</li> <li><code>string</code> $method - The name of the method to check.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesByStatement <p>Asserts that at least a query starting with the specified statement was made. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>wp_cache_flush();\n  cached_get_posts($args);\n  $I-&gt;assertQueriesByStatement('SELECT');\n  Regular expressions must contain delimiters.\n</code></pre> Parameters <ul> <li><code>string</code> $statement - A simple string the statement should start with or a valid regular expression.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesByStatementAndAction <p>Asserts that at least one query was made as a consequence of the specified action containing the SQL query. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>add_action( 'edit_post', function($postId){\n  $count = get_option('acme_title_updates_count');\n  update_option('acme_title_updates_count', ++$count);\n  } );\n  wp_update_post(['ID' =&gt; $bookId, 'post_title' =&gt; 'New']);\n  $this-&gt;assertQueriesByStatementAndAction('UPDATE', 'edit_post');\n  Regular expressions must contain delimiters.\n</code></pre> Parameters <ul> <li><code>string</code> $statement - A simple string the statement should start with or a valid regular expression.</li> <li><code>string</code> $action - The action name, e.g. 'init'.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesByStatementAndFilter <p>Asserts that at least one query was made as a consequence of the specified filter containing the SQL query. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>add_filter('the_title', function($title, $postId){\n  $post = get_post($postId);\n  if($post-&gt;post_type !== 'book'){\n  return $title;\n  }\n  $new = get_option('acme_new_prefix');\n  return \"{$new} - \" . $title;\n  });\n  $title = apply_filters('the_title', get_post($bookId)-&gt;post_title, $bookId);\n  $this-&gt;assertQueriesByStatementAndFilter('SELECT', 'the_title');\n  Regular expressions must contain delimiters.\n</code></pre> Parameters <ul> <li><code>string</code> $statement - A simple string the statement should start with or a valid regular expression.</li> <li><code>string</code> $filter - The filter name, e.g. 'posts_where'.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesByStatementAndFunction <p>Asserts that queries were made by the specified function starting with the specified SQL statement. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>wp_insert_post(['post_type' =&gt; 'book', 'post_title' =&gt; 'Alice in Wonderland']);\n  $this-&gt;assertQueriesByStatementAndFunction('INSERT', 'wp_insert_post');\n  Regular expressions must contain delimiters.\n</code></pre> Parameters <ul> <li><code>string</code> $statement - A simple string the statement should start with or a valid regular expression.</li> <li><code>string</code> $function - The fully qualified function name.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesByStatementAndMethod <p>Asserts that queries were made by the specified class method starting with the specified SQL statement. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>Acme\\BookRepository::new(['title' =&gt; 'Alice in Wonderland'])-&gt;commit();\n  $this-&gt;assertQueriesByStatementAndMethod('UPDATE', Acme\\BookRepository::class, 'commit');\n  Regular expressions must contain delimiters.\n</code></pre> Parameters <ul> <li><code>string</code> $statement - A simple string the statement should start with or a valid regular expression.</li> <li><code>string</code> $class - The fully qualified name of the class to check.</li> <li><code>string</code> $method - The name of the method to check.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesCountByAction <p>Asserts that n queries were made as a consequence of the specified action. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>add_action( 'edit_post', function($postId){\n  $count = get_option('acme_title_updates_count');\n  update_option('acme_title_updates_count', ++$count);\n  } );\n  wp_update_post(['ID' =&gt; $bookOneId, 'post_title' =&gt; 'One']);\n  wp_update_post(['ID' =&gt; $bookTwoId, 'post_title' =&gt; 'Two']);\n  wp_update_post(['ID' =&gt; $bookThreeId, 'post_title' =&gt; 'Three']);\n  $this-&gt;assertQueriesCountByAction(3, 'edit_post');\n</code></pre> Parameters <ul> <li><code>int</code> $n - The expected number of queries.</li> <li><code>string</code> $action - The action name, e.g. 'init'.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesCountByFilter <p>Asserts that n queries were made as a consequence of the specified filter. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>add_filter('the_title', function($title, $postId){\n  $post = get_post($postId);\n  if($post-&gt;post_type !== 'book'){\n  return $title;\n  }\n  $new = get_option('acme_new_prefix');\n  return \"{$new} - \" . $title;\n  });\n  $title = apply_filters('the_title', get_post($bookOneId)-&gt;post_title, $bookOneId);\n  $title = apply_filters('the_title', get_post($notABookId)-&gt;post_title, $notABookId);\n  $title = apply_filters('the_title', get_post($bookTwoId)-&gt;post_title, $bookTwoId);\n  $this-&gt;assertQueriesCountByFilter(2, 'the_title');\n</code></pre> Parameters <ul> <li><code>int</code> $n - The expected number of queries.</li> <li><code>string</code> $filter - The filter name, e.g. 'posts_where'.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesCountByFunction <p>Asserts that n queries were made by the specified function. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>$this-&gt;assertCount(3, Acme\\get_orphaned_posts());\n  Acme\\delete_orphaned_posts();\n  $this-&gt;assertQueriesCountByFunction(3, 'Acme\\delete_orphaned_posts');\n</code></pre> Parameters <ul> <li><code>int</code> $n - The expected number of queries.</li> <li><code>string</code> $function - The function to check the queries for.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesCountByMethod <p>Asserts that n queries have been made by the specified class method. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>$bookRepository = new Acme\\BookRepository();\n  $repository-&gt;where('ID', 23)-&gt;commit('title', 'Peter Pan');\n  $repository-&gt;where('ID', 89)-&gt;commit('title', 'Moby-dick');\n  $repository-&gt;where('ID', 2389)-&gt;commit('title', 'The call of the wild');\n  $this-&gt;assertQueriesCountByMethod(3, 'Acme\\BookRepository', 'commit');\n</code></pre> Parameters <ul> <li><code>int</code> $n - The expected number of queries.</li> <li><code>string</code> $class - The fully qualified name of the class to check.</li> <li><code>string</code> $method - The name of the method to check.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesCountByStatement <p>Asserts that n queries starting with the specified statement were made. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>$bookRepository = new Acme\\BookRepository();\n  $repository-&gt;where('ID', 23)-&gt;set('title', 'Peter Pan', $deferred = true);\n  $repository-&gt;where('ID', 89)-&gt;set('title', 'Moby-dick', $deferred = true);\n  $repository-&gt;where('ID', 2389)-&gt;set('title', 'The call of the wild', $deferred = false);\n  $this-&gt;assertQueriesCountByStatement(1, 'INSERT', 'Deferred write should happen on __destruct');\n  Regular expressions must contain delimiters.\n</code></pre> Parameters <ul> <li><code>int</code> $n - The expected number of queries.</li> <li><code>string</code> $statement - A simple string the statement should start with or a valid regular expression.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesCountByStatementAndAction <p>Asserts that n queries were made as a consequence of the specified action containing the specified SQL statement. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>add_action( 'edit_post', function($postId){\n  $count = get_option('acme_title_updates_count');\n  update_option('acme_title_updates_count', ++$count);\n  } );\n  wp_delete_post($bookOneId);\n  wp_delete_post($bookTwoId);\n  wp_update_post(['ID' =&gt; $bookThreeId, 'post_title' =&gt; 'New']);\n  $this-&gt;assertQueriesCountByStatementAndAction(2, 'DELETE', 'delete_post');\n  $this-&gt;assertQueriesCountByStatementAndAction(1, 'INSERT', 'edit_post');\n  Regular expressions must contain delimiters.\n</code></pre> Parameters <ul> <li><code>int</code> $n - The expected number of queries.</li> <li><code>string</code> $statement - A simple string the statement should start with or a valid regular expression.</li> <li><code>string</code> $action - The action name, e.g. 'init'.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesCountByStatementAndFilter <p>Asserts that n queries were made as a consequence of the specified filter containing the specified SQL statement. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>add_filter('the_title', function($title, $postId){\n  $post = get_post($postId);\n  if($post-&gt;post_type !== 'book'){\n  return $title;\n  }\n  $new = get_option('acme_new_prefix');\n  return \"{$new} - \" . $title;\n  });\n  // Warm up the cache.\n  $title = apply_filters('the_title', get_post($bookOneId)-&gt;post_title, $bookOneId);\n  // Cache is warmed up now.\n  $title = apply_filters('the_title', get_post($bookTwoId)-&gt;post_title, $bookTwoId);\n  $title = apply_filters('the_title', get_post($bookThreeId)-&gt;post_title, $bookThreeId);\n  $this-&gt;assertQueriesCountByStatementAndFilter(1, 'SELECT', 'the_title');\n  Regular expressions must contain delimiters.\n</code></pre> Parameters <ul> <li><code>int</code> $n - The expected number of queries.</li> <li><code>string</code> $statement - A simple string the statement should start with or a valid regular expression.</li> <li><code>string</code> $filter - The filter name, e.g. 'posts_where'.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesCountByStatementAndFunction <p>Asserts that n queries were made by the specified function starting with the specified SQL statement. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>wp_insert_post(['post_type' =&gt; 'book', 'post_title' =&gt; 'The Call of the Wild']);\n  wp_insert_post(['post_type' =&gt; 'book', 'post_title' =&gt; 'Alice in Wonderland']);\n  wp_insert_post(['post_type' =&gt; 'book', 'post_title' =&gt; 'The Chocolate Factory']);\n  $this-&gt;assertQueriesCountByStatementAndFunction(3, 'INSERT', 'wp_insert_post');\n  Regular expressions must contain delimiters.\n</code></pre> Parameters <ul> <li><code>int</code> $n - The expected number of queries.</li> <li><code>string</code> $statement - A simple string the statement should start with or a valid regular expression.</li> <li><code>string</code> $function - The fully-qualified function name.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> assertQueriesCountByStatementAndMethod <p>Asserts that n queries were made by the specified class method starting with the specified SQL statement. Queries generated by <code>setUp</code>, <code>tearDown</code> and <code>factory</code> methods are excluded by default.</p> <pre><code>Acme\\BookRepository::new(['title' =&gt; 'Alice in Wonderland'])-&gt;commit();\n  Acme\\BookRepository::new(['title' =&gt; 'Moby-Dick'])-&gt;commit();\n  Acme\\BookRepository::new(['title' =&gt; 'The Call of the Wild'])-&gt;commit();\n  $this-&gt;assertQueriesCountByStatementAndMethod(3, 'INSERT', Acme\\BookRepository::class, 'commit');\n  Regular expressions must contain delimiters.\n</code></pre> Parameters <ul> <li><code>int</code> $n - The expected number of queries.</li> <li><code>string</code> $statement - A simple string the statement should start with or a valid regular expression.</li> <li><code>string</code> $class - The fully qualified name of the class to check.</li> <li><code>string</code> $method - The name of the method to check.</li> <li><code>string</code> $message - An optional message to override the default one.</li></ul> countQueries <p>Returns the current number of queries. Set-up and tear-down queries performed by the test case are filtered out.</p> <pre><code>// In a WPTestCase, using the global $wpdb object.\n  $queriesCount = $this-&gt;queries()-&gt;countQueries();\n  // In a WPTestCase, using a custom $wpdb object.\n  $queriesCount = $this-&gt;queries()-&gt;countQueries($customWdbb);\n</code></pre> Parameters <ul> <li><code>\\wpdb/null</code> $wpdb - A specific instance of the <code>wpdb</code> class or <code>null</code> to use the global one.</li></ul> getQueries <p>Returns the queries currently performed by the global database object or the specified one. Set-up and tear-down queries performed by the test case are filtered out.</p> <pre><code>// In a WPTestCase, using the global $wpdb object.\n  $queries = $this-&gt;queries()-&gt;getQueries();\n  // In a WPTestCase, using a custom $wpdb object.\n  $queries = $this-&gt;queries()-&gt;getQueries($customWdbb);\n</code></pre> Parameters <ul> <li><code>null/\\wpdb</code> $wpdb - A specific instance of the <code>wpdb</code> class or <code>null</code> to use the global one.</li></ul> <p>This class extends \\Codeception\\Module</p>"},{"location":"v3/modules/WPWebDriver/","title":"WpWebDriver module","text":"<p>This module should be used in acceptance tests, see levels of testing for more information.  </p> <p>This module extends the WebDriver module adding WordPress-specific configuration parameters and methods.  </p> <p>The module simulates a user interaction with the site with Javascript support; if you don't need to test your project with Javascript support use the WPBrowser module.  </p>"},{"location":"v3/modules/WPWebDriver/#module-requirements-for-codeception-40","title":"Module requirements for Codeception 4.0+","text":"<p>This module requires the <code>codeception/module-webdriver</code> Composer package to work when wp-browser is used with Codeception 4.0.  </p> <p>To install the package run: </p> <pre><code>composer require --dev codeception/module-webdriver:^1.0\n</code></pre>"},{"location":"v3/modules/WPWebDriver/#configuration","title":"Configuration","text":"<p>Due to the combination of possible browsers, capabilities and configurations, it's not possible to provide an exhaustive coverage of all the possible configuration parameteters here.  </p> <p>Please refer to WebDriver documentation for more information.</p> <ul> <li><code>url</code> required - Start URL of your WordPress project, e.g. <code>http://wp.test</code>.</li> <li><code>adminUsername</code> required - This is the login name, not the \"nice\" name, of the administrator user of the WordPress test site. This will be used to fill the username field in WordPress login page.  </li> <li><code>adminPassword</code> required - This is the the password of the administrator use of the WordPress test site. This will be used to fill the password in WordPress login page.  </li> <li><code>adminPath</code> required - The path, relative to the WordPress test site home URL, to the administration area, usually <code>/wp-admin</code>.</li> <li><code>browser</code> - The browser to use for the tests, e.g. <code>chrome</code> or <code>firefox</code>.</li> <li><code>capabilities</code> - Depending on the browser set in <code>browser</code> this is a list of browser-specific capabilities.</li> </ul>"},{"location":"v3/modules/WPWebDriver/#example-configuration","title":"Example configuration","text":"<pre><code>modules:\n  enabled:\n    - WPWebDriver\n  config:\n    WPWebDriver:\n      url: 'http://wp.test'\n      adminUsername: 'admin'\n      adminPassword: 'password'\n      adminPath: '/wp-admin'\n      browser: chrome\n      host: localhost\n      port: 4444\n      window_size: false #disabled for Chrome driver\n      capabilities:\n        chromeOptions:\n          args: [\"--headless\", \"--disable-gpu\", \"--proxy-server='direct://'\", \"--proxy-bypass-list=*\"]\n</code></pre>"},{"location":"v3/modules/WPWebDriver/#public-api","title":"Public API","text":"<ul> <li> activatePlugin </li> <li> amEditingPostWithId </li> <li> amOnAdminAjaxPage </li> <li> amOnAdminPage </li> <li> amOnCronPage </li> <li> amOnPagesPage </li> <li> amOnPluginsPage </li> <li> deactivatePlugin </li> <li> dontSeePluginInstalled </li> <li> grabCookiesWithPattern </li> <li> grabFullUrl </li> <li> grabWordPressTestCookie </li> <li> logOut </li> <li> loginAs </li> <li> loginAsAdmin </li> <li> seeErrorMessage </li> <li> seeMessage </li> <li> seePluginActivated </li> <li> seePluginDeactivated </li> <li> seePluginInstalled </li> <li> seeWpDiePage </li> <li> waitForJqueryAjax </li> </ul> activatePlugin <p>In the plugin administration screen activates one or more plugins clicking the \"Activate\" link. The method will not handle authentication and navigation to the plugins administration page.</p> <pre><code>// Activate a plugin.\n  $I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;activatePlugin('hello-dolly');\n  // Activate a list of plugins.\n  $I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;activatePlugin(['hello-dolly','another-plugin']);\n</code></pre> Parameters <ul> <li><code>string/\\Codeception\\Module\\array $pluginSlug - The plugin slug, like \"hello-dolly\" or a list of plugin slugs. amEditingPostWithId <p>Go to the admin page to edit the post with the specified ID. The method will not handle authentication the admin area.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $postId = $I-&gt;havePostInDatabase();\n  $I-&gt;amEditingPostWithId($postId);\n  $I-&gt;fillField('post_title', 'Post title');\n</code></pre> Parameters <ul> <li><code>int</code> $id - The post ID.</li></ul> amOnAdminAjaxPage <p>Go to the <code>admin-ajax.php</code> page to start a synchronous, and blocking, <code>GET</code> AJAX request. The method will not handle authentication, nonces or authorization.</p> <pre><code>$I-&gt;amOnAdminAjaxPage(['action' =&gt; 'my-action', 'data' =&gt; ['id' =&gt; 23], 'nonce' =&gt; $nonce]);\n</code></pre> Parameters <ul> <li><code>string/\\Codeception\\Module\\array $queryVars - A string or array of query variables to append to the AJAX path. amOnAdminPage <p>Go to a page in the admininstration area of the site. This method will not handle authentication to the administration area.</p> <pre><code>$I-&gt;loginAs('user', 'password');\n  // Go to the plugins management screen.\n  $I-&gt;amOnAdminPage('/plugins.php');\n</code></pre> Parameters <ul> <li><code>string</code> $page - The path, relative to the admin area URL, to the page.</li></ul> amOnCronPage <p>Go to the cron page to start a synchronous, and blocking, <code>GET</code> request to the cron script.</p> <pre><code>// Triggers the cron job with an optional query argument.\n  $I-&gt;amOnCronPage('/?some-query-var=some-value');\n</code></pre> Parameters <ul> <li><code>string/\\Codeception\\Module\\array $queryVars - A string or array of query variables to append to the AJAX path. amOnPagesPage <p>Go the \"Pages\" administration screen. The method will not handle authentication.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPagesPage();\n  $I-&gt;see('Add New');\n</code></pre> amOnPluginsPage <p>Go to the plugins administration screen. The method will not handle authentication.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;activatePlugin('hello-dolly');\n</code></pre> deactivatePlugin <p>In the plugin administration screen deactivate a plugin clicking the \"Deactivate\" link. The method will not handle authentication and navigation to the plugins administration page.</p> <pre><code>// Deactivate one plugin.\n  $I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;deactivatePlugin('hello-dolly');\n  // Deactivate a list of plugins.\n  $I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;deactivatePlugin(['hello-dolly', 'my-plugin']);\n</code></pre> Parameters <ul> <li><code>string/\\Codeception\\Module\\array $pluginSlug - The plugin slug, like \"hello-dolly\", or a list of plugin slugs. dontSeePluginInstalled <p>Assert a plugin is not installed in the plugins administration screen. The method will not handle authentication and navigation to the plugin administration screen.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;dontSeePluginInstalled('my-plugin');\n</code></pre> Parameters <ul> <li><code>string</code> $pluginSlug - The plugin slug, like \"hello-dolly\".</li></ul> grabCookiesWithPattern <p>Returns all the cookies whose name matches a regex pattern.</p> <pre><code>$I-&gt;loginAs('customer','password');\n  $I-&gt;amOnPage('/shop');\n  $cartCookies = $I-&gt;grabCookiesWithPattern(\"#^shop_cart\\\\.*#\");\n</code></pre> Parameters <ul> <li><code>string</code> $cookiePattern - The regular expression pattern to use for the matching.</li></ul> grabFullUrl <p>Grabs the current page full URL including the query vars.</p> <pre><code>$today = date('Y-m-d');\n  $I-&gt;amOnPage('/concerts?date=' . $today);\n  $I-&gt;assertRegExp('#\\\\/concerts$#', $I-&gt;grabFullUrl());\n</code></pre> grabWordPressTestCookie <p>Returns WordPress default test cookie object if present.</p> <pre><code>// Grab the default WordPress test cookie.\n  $wpTestCookie = $I-&gt;grabWordPressTestCookie();\n  // Grab a customized version of the test cookie.\n  $myTestCookie = $I-&gt;grabWordPressTestCookie('my_test_cookie');\n</code></pre> Parameters <ul> <li><code>string</code> $name - Optional, overrides the default cookie name.</li></ul> logOut <p>Navigate to the default WordPress logout page and click the logout link.</p> <pre><code>// Log out using the `wp-login.php` form and return to the current page.\n  $I-&gt;logOut(true);\n  // Log out using the `wp-login.php` form and remain there.\n  $I-&gt;logOut(false);\n  // Log out using the `wp-login.php` form and move to another page.\n  $I-&gt;logOut('/some-other-page');\n</code></pre> Parameters <ul> <li><code>bool/bool/string</code> $redirectTo - Whether to redirect to another (optionally specified) page after the logout.</li></ul> loginAs <p>Login as the specified user. The method will not follow redirection, after the login, to any page. Depending on the driven browser the login might be \"too fast\" and the server might have not replied with valid cookies yet; in that case the method will re-attempt the login to obtain the cookies.</p> <pre><code>$I-&gt;loginAs('user', 'password');\n  $I-&gt;amOnAdminPage('/');\n  $I-&gt;see('Dashboard');\n</code></pre> Parameters <ul> <li><code>string</code> $username - The user login name.</li> <li><code>string</code> $password - The user password in plain text.</li> <li><code>int</code> $timeout - The max time, in seconds, to try to login.</li> <li><code>int</code> $maxAttempts - The max number of attempts to try to login.</li></ul> loginAsAdmin <p>Login as the administrator user using the credentials specified in the module configuration. The method will not follow redirection, after the login, to any page.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnAdminPage('/');\n  $I-&gt;see('Dashboard');\n</code></pre> Parameters <ul> <li><code>int</code> $timeout - The max time, in seconds, to try to login.</li> <li><code>int</code> $maxAttempts - The max number of attempts to try to login.</li></ul> seeErrorMessage <p>In an administration screen look for an error admin notice. The check is class-based to decouple from internationalization. The method will not handle authentication and navigation the administration area. <code>.notice.notice-error</code> ones.</p> <pre><code>$I-&gt;loginAsAdmin()\n  $I-&gt;amOnAdminPage('/');\n  $I-&gt;seeErrorMessage('.my-plugin');\n</code></pre> Parameters <ul> <li><code>string/string/\\Codeception\\Module\\array $classes - A list of classes the notice should have other than the seeMessage <p>In an administration screen look for an admin notice. The check is class-based to decouple from internationalization. The method will not handle authentication and navigation the administration area.</p> <pre><code>$I-&gt;loginAsAdmin()\n  $I-&gt;amOnAdminPage('/');\n  $I-&gt;seeMessage('.missing-api-token.my-plugin');\n</code></pre> Parameters <ul> <li><code>string/\\Codeception\\Module\\array/string $classes - A list of classes the message should have in addition to the <code>.notice</code> one. seePluginActivated <p>Assert a plugin is activated in the plugin administration screen. The method will not handle authentication and navigation to the plugin administration screen.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;seePluginActivated('my-plugin');\n</code></pre> Parameters <ul> <li><code>string</code> $pluginSlug - The plugin slug, like \"hello-dolly\".</li></ul> seePluginDeactivated <p>Assert a plugin is not activated in the plugins administration screen. The method will not handle authentication and navigation to the plugin administration screen.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;seePluginDeactivated('my-plugin');\n</code></pre> Parameters <ul> <li><code>string</code> $pluginSlug - The plugin slug, like \"hello-dolly\".</li></ul> seePluginInstalled <p>Assert a plugin is installed, no matter its activation status, in the plugin administration screen. The method will not handle authentication and navigation to the plugin administration screen.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;seePluginInstalled('my-plugin');\n</code></pre> Parameters <ul> <li><code>string</code> $pluginSlug - The plugin slug, like \"hello-dolly\".</li></ul> seeWpDiePage <p>Checks that the current page is one generated by the <code>wp_die</code> function. The method will try to identify the page based on the default WordPress die page HTML attributes.</p> <pre><code>$I-&gt;loginAs('user', 'password');\n  $I-&gt;amOnAdminPage('/forbidden');\n  $I-&gt;seeWpDiePage();\n</code></pre> waitForJqueryAjax <p>Waits for any jQuery triggered AJAX request to be resolved.</p> <pre><code>$I-&gt;amOnPage('/triggering-ajax-requests');\n  $I-&gt;waitForJqueryAjax();\n  $I-&gt;see('From AJAX');\n</code></pre> Parameters <ul> <li><code>int</code> $time - The max time to wait for AJAX requests to complete.</li></ul> <p>This class extends \\Codeception\\Module\\WebDriver</p> <p>This class implements \\Codeception\\Lib\\Interfaces\\RequiresPackage, \\Codeception\\Lib\\Interfaces\\ConflictsWithModule, \\Codeception\\Lib\\Interfaces\\ElementLocator, \\Codeception\\Lib\\Interfaces\\PageSourceSaver, \\Codeception\\Lib\\Interfaces\\ScreenshotSaver, \\Codeception\\Lib\\Interfaces\\SessionSnapshot, \\Codeception\\Lib\\Interfaces\\MultiSession, \\Codeception\\Lib\\Interfaces\\Remote, \\Codeception\\Lib\\Interfaces\\Web</p>"},{"location":"v3/modules/WordPress/","title":"WordPress module","text":"<p>This module requires good knowledge and attention to be used effectively; you can replace it with a combination of the WPBrowser module together with the WPLoader module in loadOnly mode. This module should be used in functional tests, see levels of testing for more information. This module provides a middle-ground, in terms of testing and effects, between the fully isolated approach of the WPBrowser module and the fully integrated approach of the WPLoader module with loadOnly set to <code>false</code>. It allows to interact with WordPress on a very high level, using methods like <code>$I-&gt;loginAs()</code> or <code>$I-&gt;amOnPage()</code> as you could do with the <code>WPBrowser</code> module while also loading WordPress in the same variable scope as the tests as the <code>WPLoader</code> module would. Due to WordPress reliance on constants, globals and side-effects this module will make requests to WordPress in an insulated manner and reproduce WordPress environment (globals and super-globals) after each response in the tests variable scope. The module simulates a user interaction with the site without Javascript support, use the WPWebDriver module for any kind of testing that requires Javascript-based interaction with the site.</p>"},{"location":"v3/modules/WordPress/#module-requirements-for-codeception-40","title":"Module requirements for Codeception 4.0+","text":"<p>This module requires the <code>codeception/lib-innerbrowser</code> Composer package to work when wp-browser is used with Codeception 4.0.  </p> <p>To install the package run: </p> <pre><code>composer require --dev codeception/lib-innerbrowser:^1.0\n</code></pre>"},{"location":"v3/modules/WordPress/#detecting-requests-coming-from-this-module","title":"Detecting requests coming from this module","text":"<p>When it runs this module will set the <code>WPBROWSER_HOST_REQUEST</code> environment variable. You can detect and use that information to, as an example, use the correct database in your test site <code>wp-config.php</code> file:</p> <pre><code>&lt;?php\nif ( \n    // Custom header.\n    isset( $_SERVER['HTTP_X_TESTING'] )\n    // Custom user agent.\n    || ( isset( $_SERVER['HTTP_USER_AGENT'] ) &amp;&amp; $_SERVER['HTTP_USER_AGENT'] === 'wp-browser' )\n    // The env var set by the WPClIr or WordPress modules.\n    || getenv( 'WPBROWSER_HOST_REQUEST' )\n) {\n    // Use the test database if the request comes from a test.\n    define( 'DB_NAME', 'wordpress_test' );\n} else {\n    // Else use the default one.\n    define( 'DB_NAME', 'wordpress' );\n}\n</code></pre>"},{"location":"v3/modules/WordPress/#configuration","title":"Configuration","text":"<ul> <li><code>wpRootFolder</code> required The absolute, or relative to the project root folder, path to the root WordPress installation folder. The WordPress installation root folder is the one that contains the <code>wp-load.php</code> file.</li> <li><code>adminUsername</code> required - This is the login name, not the \"nice\" name, of the administrator user of the WordPress test site. This will be used to fill the username field in WordPress login page.  </li> <li><code>adminPassword</code> required - This is the the password of the administrator use of the WordPress test site. This will be used to fill the password in WordPress login page.  </li> <li><code>adminPath</code> required - The path, relative to the WordPress test site home URL, to the administration area, usually <code>/wp-admin</code>.</li> </ul>"},{"location":"v3/modules/WordPress/#example-configuration","title":"Example configuration","text":"<pre><code>  modules:\n      enabled:\n          - WordPress\n      config:\n          WordPress:\n              wpRootFolder: \"/var/www/wordpress\"\n              adminUsername: 'admin'\n              adminPassword: 'password'\n              adminPath: '/wp-admin'\n</code></pre>"},{"location":"v3/modules/WordPress/#public-api","title":"Public API","text":"<ul> <li> amEditingPostWithId </li> <li> amOnAdminAjaxPage </li> <li> amOnAdminPage </li> <li> amOnCronPage </li> <li> amOnPage </li> <li> amOnPagesPage </li> <li> amOnPluginsPage </li> <li> dontSeePluginInstalled </li> <li> extractCookie </li> <li> getResponseContent </li> <li> getWpRootFolder </li> <li> grabWordPressTestCookie </li> <li> logOut </li> <li> loginAs </li> <li> loginAsAdmin </li> <li> seeErrorMessage </li> <li> seeMessage </li> <li> seePluginActivated </li> <li> seePluginDeactivated </li> <li> seePluginInstalled </li> <li> seeWpDiePage </li> </ul> amEditingPostWithId <p>Go to the admin page to edit the post with the specified ID. The method will not handle authentication the admin area.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $postId = $I-&gt;havePostInDatabase();\n  $I-&gt;amEditingPostWithId($postId);\n  $I-&gt;fillField('post_title', 'Post title');\n</code></pre> Parameters <ul> <li><code>int</code> $id - The post ID.</li></ul> amOnAdminAjaxPage <p>Go to the <code>admin-ajax.php</code> page to start a synchronous, and blocking, <code>GET</code> AJAX request. The method will not handle authentication, nonces or authorization.</p> <pre><code>$I-&gt;amOnAdminAjaxPage(['action' =&gt; 'my-action', 'data' =&gt; ['id' =&gt; 23], 'nonce' =&gt; $nonce]);\n</code></pre> Parameters <ul> <li><code>string/\\Codeception\\Module\\array $queryVars - A string or array of query variables to append to the AJAX path. amOnAdminPage <p>Go to a page in the admininstration area of the site.</p> <pre><code>$I-&gt;loginAs('user', 'password');\n  // Go to the plugins management screen.\n  $I-&gt;amOnAdminPage('/plugins.php');\n</code></pre> Parameters <ul> <li><code>string</code> $page - The path, relative to the admin area URL, to the page.</li></ul> amOnCronPage <p>Go to the cron page to start a synchronous, and blocking, <code>GET</code> request to the cron script.</p> <pre><code>// Triggers the cron job with an optional query argument.\n  $I-&gt;amOnCronPage('/?some-query-var=some-value');\n</code></pre> Parameters <ul> <li><code>string/\\Codeception\\Module\\array $queryVars - A string or array of query variables to append to the AJAX path. amOnPage <p>Go to a page on the site. The module will try to reach the page, relative to the URL specified in the module configuration, without applying any permalink resolution.</p> <pre><code>// Go the the homepage.\n  $I-&gt;amOnPage('/');\n  // Go to the single page of post with ID 23.\n  $I-&gt;amOnPage('/?p=23');\n  // Go to search page for the string \"foo\".\n  $I-&gt;amOnPage('/?s=foo');\n</code></pre> Parameters <ul> <li><code>string</code> $page - The path to the page, relative to the the root URL.</li></ul> amOnPagesPage <p>Go the \"Pages\" administration screen. The method will not handle authentication.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPagesPage();\n  $I-&gt;see('Add New');\n</code></pre> amOnPluginsPage <p>Go to the plugins administration screen. The method will not handle authentication.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;activatePlugin('hello-dolly');\n</code></pre> dontSeePluginInstalled <p>Assert a plugin is not installed in the plugins administration screen. The method will not handle authentication and navigation to the plugin administration screen.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;dontSeePluginInstalled('my-plugin');\n</code></pre> Parameters <ul> <li><code>string</code> $pluginSlug - The plugin slug, like \"hello-dolly\".</li></ul> extractCookie <p>Grab a cookie value from the current session, sets it in the $_COOKIE array and returns its value. This method utility is to get, in the scope of test code, the value of a cookie set during the tests.</p> <pre><code>$id = $I-&gt;haveUserInDatabase('user', 'subscriber', ['user_pass' =&gt; 'pass']);\n  $I-&gt;loginAs('user', 'pass');\n  // The cookie is now set in the `$_COOKIE` super-global.\n  $I-&gt;extractCookie(LOGGED_IN_COOKIE);\n  // Generate a nonce using WordPress methods (see WPLoader in loadOnly mode) with correctly set context.\n  wp_set_current_user($id);\n  $nonce = wp_create_nonce('wp_rest');\n  // Use the generated nonce to make a request to the the REST API.\n  $I-&gt;haveHttpHeader('X-WP-Nonce', $nonce);\n</code></pre> Parameters <ul> <li><code>string</code> $cookie - The cookie name.</li> <li><code>array/\\Codeception\\Module\\array/array $params - Parameters to filter the cookie value. getResponseContent <p>Returns content of the last response. This method exposes an underlying API for custom assertions.</p> <pre><code>// In test class.\n  $this-&gt;assertContains($text, $this-&gt;getResponseContent(), \"foo-bar\");\n</code></pre> getWpRootFolder <p>Returns the absolute path to the WordPress root folder.</p> <pre><code>$root = $I-&gt;getWpRootFolder();\n  $this-&gt;assertFileExists($root . '/someFile.txt');\n</code></pre> grabWordPressTestCookie <p>Returns WordPress default test cookie object if present.</p> <pre><code>// Grab the default WordPress test cookie.\n  $wpTestCookie = $I-&gt;grabWordPressTestCookie();\n  // Grab a customized version of the test cookie.\n  $myTestCookie = $I-&gt;grabWordPressTestCookie('my_test_cookie');\n</code></pre> Parameters <ul> <li><code>string</code> $name - Optional, overrides the default cookie name.</li></ul> logOut <p>Navigate to the default WordPress logout page and click the logout link.</p> <pre><code>// Log out using the `wp-login.php` form and return to the current page.\n  $I-&gt;logOut(true);\n  // Log out using the `wp-login.php` form and remain there.\n  $I-&gt;logOut(false);\n  // Log out using the `wp-login.php` form and move to another page.\n  $I-&gt;logOut('/some-other-page');\n</code></pre> Parameters <ul> <li><code>bool/bool/string</code> $redirectTo - Whether to redirect to another (optionally specified) page after the logout.</li></ul> loginAs <p>Login as the specified user. The method will not follow redirection, after the login, to any page.</p> <pre><code>$I-&gt;loginAs('user', 'password');\n  $I-&gt;amOnAdminPage('/');\n  $I-&gt;seeElement('.admin');\n</code></pre> Parameters <ul> <li><code>string</code> $username - The user login name.</li> <li><code>string</code> $password - The user password in plain text.</li></ul> loginAsAdmin <p>Login as the administrator user using the credentials specified in the module configuration. The method will not follow redirection, after the login, to any page.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnAdminPage('/');\n  $I-&gt;see('Dashboard');\n</code></pre> seeErrorMessage <p>In an administration screen look for an error admin notice. The check is class-based to decouple from internationalization. The method will not handle authentication and navigation the administration area. <code>.notice.notice-error</code> ones.</p> <pre><code>$I-&gt;loginAsAdmin()\n  $I-&gt;amOnAdminPage('/');\n  $I-&gt;seeErrorMessage('.my-plugin');\n</code></pre> Parameters <ul> <li><code>string/string/\\Codeception\\Module\\array $classes - A list of classes the notice should have other than the seeMessage <p>In an administration screen look for an admin notice. The check is class-based to decouple from internationalization. The method will not handle authentication and navigation the administration area.</p> <pre><code>$I-&gt;loginAsAdmin()\n  $I-&gt;amOnAdminPage('/');\n  $I-&gt;seeMessage('.missing-api-token.my-plugin');\n</code></pre> Parameters <ul> <li><code>string/\\Codeception\\Module\\array/string $classes - A list of classes the message should have in addition to the <code>.notice</code> one. seePluginActivated <p>Assert a plugin is activated in the plugin administration screen. The method will not handle authentication and navigation to the plugin administration screen.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;seePluginActivated('my-plugin');\n</code></pre> Parameters <ul> <li><code>string</code> $pluginSlug - The plugin slug, like \"hello-dolly\".</li></ul> seePluginDeactivated <p>Assert a plugin is not activated in the plugins administration screen. The method will not handle authentication and navigation to the plugin administration screen.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;seePluginDeactivated('my-plugin');\n</code></pre> Parameters <ul> <li><code>string</code> $pluginSlug - The plugin slug, like \"hello-dolly\".</li></ul> seePluginInstalled <p>Assert a plugin is installed, no matter its activation status, in the plugin administration screen. The method will not handle authentication and navigation to the plugin administration screen.</p> <pre><code>$I-&gt;loginAsAdmin();\n  $I-&gt;amOnPluginsPage();\n  $I-&gt;seePluginInstalled('my-plugin');\n</code></pre> Parameters <ul> <li><code>string</code> $pluginSlug - The plugin slug, like \"hello-dolly\".</li></ul> seeWpDiePage <p>Checks that the current page is one generated by the <code>wp_die</code> function. The method will try to identify the page based on the default WordPress die page HTML attributes.</p> <pre><code>$I-&gt;loginAs('user', 'password');\n  $I-&gt;amOnAdminPage('/forbidden');\n  $I-&gt;seeWpDiePage();\n</code></pre> <p>This class extends \\Codeception\\Lib\\Framework</p> <p>This class implements \\Codeception\\Lib\\Interfaces\\Web, \\Codeception\\Lib\\Interfaces\\PageSourceSaver, \\Codeception\\Lib\\Interfaces\\ElementLocator, \\Codeception\\Lib\\Interfaces\\ConflictsWithModule, \\Codeception\\Lib\\Interfaces\\DependsOnModule</p>"},{"location":"v3/tutorials/automatically-change-db-in-tests/","title":"Automatically change database during acceptance and functional tests","text":"<p>You should always back up any site you run tests on if you care about the site content.</p> <p>Now this disclaimer has been made ad nauseam; there's a simple way to use a different database when during tests.</p>"},{"location":"v3/tutorials/automatically-change-db-in-tests/#identifying-requests","title":"Identifying requests","text":"<p>The first component of this solution is identifying the source of the current HTTP request. WordPress makes this identification before deciding which database to use.  </p> <p>To provide the WordPress installation with this information, you can set the <code>headers</code> entry of the <code>WPBrowser</code> or <code>WPWebDriver</code> module in the suite configuration file.</p> <p>As an example here is an <code>acceptance</code> suite configuration file setting two custom headers, <code>X_WPBROWSER_REQUEST</code> and <code>X_TEST_REQUEST</code>, on each request sent by the <code>WPWebDriver</code> module:</p> <pre><code>actor: AcceptanceTester\nmodules:\n    enabled:\n        - WPDb\n        - WPBrowser\n        - \\Helper\\Acceptance\n    config:\n        WPDb:\n            dsn: 'mysql:host=localhost;dbname=tests'\n            user: 'root'\n            password: 'root'\n            dump: 'tests/_data/dump.sql'\n            populate: true\n            cleanup: true\n            waitlock: 10\n            url: 'http://wp.test'\n            urlReplacement: true\n            tablePrefix: 'wp_'\n        WPBrowser:\n            url: 'http://wp.test'\n            adminUsername: 'admin'\n            adminPassword: 'admin'\n            adminPath: '/wp-admin'\n            headers:\n                X_WPBROWSER_REQUEST: 1\n                X_TEST_REQUEST: 1\n</code></pre> <p>The two headers are sent on each HTTP request type, not just on <code>GET</code> type requests.</p>"},{"location":"v3/tutorials/automatically-change-db-in-tests/#using-a-different-database-to-handle-test-requests","title":"Using a different database to handle test requests","text":"<p>Now that each request made by the <code>WPWebDriver</code> module contains those two headers, it's time for WordPress to check those and change the database to use accordingly.</p> <p>The database to use is set by the <code>DB_NAME</code> constant that is, in turn, set in the <code>wp-config.php</code> file. Different setups could involve more complex configurations for the <code>wp-config.php</code> file but, for the sake of simplicity, I assume the default WordPress <code>wp-config.php</code> file structure. In the example below, the default database name is <code>wordpress</code>, while the name of the test database is <code>tests</code>.</p> <pre><code>- define( 'DB_NAME', 'wordpress' );\n+ if( isset( $_SERVER['HTTP_X_TEST_REQUEST'] ) &amp;&amp; $_SERVER['HTTP_X_TEST_REQUEST'] ) {\n+     define( 'DB_NAME', 'tests' );\n+ } else {\n+     define( 'DB_NAME', 'wordpress' );\n+ }\n</code></pre> <p>The diff shows the replacement done in the WordPress installation <code>wp-config.php</code> file.</p> <p>For copy-and-paste pleasure, replace the line starting with:</p> <pre><code>define( 'DB_NAME', 'default_db_name' );\n</code></pre> <p>With this snippet:</p> <pre><code>if( isset( $_SERVER['HTTP_X_TEST_REQUEST'] ) &amp;&amp; $_SERVER['HTTP_X_TEST_REQUEST'] ) {\n      define( 'DB_NAME', 'test_db_name' );\n} else {\n      define( 'DB_NAME', 'default_db_name' );\n}\n</code></pre> <p>Where <code>default_db_name</code> is the name of the database your test WordPress installation normally uses.</p> <p>Happy, and safer, testing.</p>"},{"location":"v3/tutorials/local-flywheel-setup/","title":"Local flywheel setup","text":""},{"location":"v3/tutorials/local-flywheel-setup/#setting-up-wp-browser-with-local-by-flywheel-to-test-a-plugin","title":"Setting up wp-browser with Local by Flywheel to test a plugin","text":"<p>Note: the original version of this guide used, on Mac, the version of Local by Flywheel based on VirtualBox and Docker containers. That version has been replaced by a new one that will not use any virtualization layer. The UI is almost the same but, for back-compatibility purposes, I've not removed the references to the previous version; I have, instead, pointed out where the set up values and procedures might differ due to the changes.</p>"},{"location":"v3/tutorials/local-flywheel-setup/#requirements","title":"Requirements","text":"<ul> <li>A Mac or Windows machine</li> <li>A working installation of Local By Flywheel.</li> <li>You should be able to create sites and visit them from your browser without issues.</li> <li>Composer installed and working on your terminal <code>PATH</code>, you should be able to run <code>composer --version</code> at the terminal and see the version correctly.</li> </ul>"},{"location":"v3/tutorials/local-flywheel-setup/#install-local-by-flywheel","title":"Install Local by Flywheel","text":"<p>This walk-through starts after Local by Flywheel has been installed and is correctly running on your machine; you can download Local from the site and follow the installation instructions.  </p> <p>In the context of this guide I'm assuming the sites directory is <code>~/Local Sites</code>, the default \"Sites Path\" in Local preferences.</p> <p>If your document root lies elsewhere, replace the <code>~/Local Sites</code> path with the actual directory in each command.  </p> <p></p>"},{"location":"v3/tutorials/local-flywheel-setup/#creating-the-databases-and-installing-wordpress","title":"Creating the databases and installing WordPress","text":"<p>Using Local UI create a new site:</p> <ul> <li>The site name is <code>myplugin</code>.</li> <li>The site administrator user name is <code>admin</code>.</li> <li>The site administrator password is <code>password</code>.</li> </ul> <p>Once Local provisioned and installed the new site, open the \"Database\" administration tab and, depending on your OS, start a database administration UI or website. In the image below I'm using Adminer:</p> <p></p> <p>Create a database called <code>tests</code>:</p> <p></p> <p>Make sure you can visit the WordPress installation at <code>http://myplugin.local</code> and that you can correctly access the administration area at <code>http://myplugin.local/wp-admin</code>.</p>"},{"location":"v3/tutorials/local-flywheel-setup/#scaffolding-the-project-folder","title":"Scaffolding the project folder","text":"<p>I'm assuming the scope of the development is to test the <code>my-plugin</code> plugin.  </p> <p>The first step is to create the bare minimum code required to make the plugin show up among the available WordPress plugins. Create the main plugin file in the WordPress installation plugins directory, in the <code>~/Local Sites/myplugin/app/public/wp-content/plugins/my-plugin/my-plugin.php</code> file:</p> <pre><code>&lt;?php\n/**\n * Plugin Name: My plugin\n */ \n</code></pre> <p>The plugin should now show up, activate and deactivate correctly, among the plugins listed in the WordPress installation at <code>http://myplugin.local/wp-admin/plugins.php</code>.  </p> <p></p>"},{"location":"v3/tutorials/local-flywheel-setup/#installing-wp-browser","title":"Installing wp-browser","text":"<p>Open a terminal window and navigate to the plugin directory and initialize the Composer project:</p> <pre><code>cd ~/Local Sites/myplugin/app/public/wp-content/plugins/my-plugin\ncomposer init\n</code></pre> <p></p> <p>Composer will ask some questions to initialize the project, for the sake of this small guide the answers are not relevant. Here is the <code>composer.json</code> file generated by the above answers:</p> <pre><code>{\n    \"name\": \"local/my-plugin\",\n    \"type\": \"wordpress-plugin\",\n    \"require\": {}\n}\n</code></pre> <p>Next require <code>lucatume/wp-browser</code> as a development dependency:</p> <pre><code>composer require --dev lucatume/wp-browser\n</code></pre> <p>Composer installs any dependency binary file, an executable file, in the project <code>vendor/bin</code> folder.  To check Codeception is correctly installed run this command:</p> <pre><code>vendor/bin/codecept --version\n</code></pre> <p></p> <p>Since wp-browser requires Codeception, there is no need to require Codeception explicitly as a development dependency.</p>"},{"location":"v3/tutorials/local-flywheel-setup/#setting-up-wp-browser","title":"Setting up wp-browser","text":"<p>For those that might get lost while trying to set up wp-browser for the first time the VVV context provides an excellent base to understand the process.  </p> <p>wp-browser needs to know:</p> <ul> <li>Where the WordPress installation files are located: they will be loaded in integration and \"WordPress unit\" tests.</li> <li>How to connect to the WordPress site \"normal\" database: this is the database that stores the data of the site I would see when visiting the local installation URL at <code>http://myplugin.local</code>.</li> <li>How to connect to the database dedicated to the integration and \"WordPress unit\" tests: this database will be used to install WordPress during integration and \"WordPress unit\" tests.</li> </ul> <p>Any test suite using a database should never run on a database containing data of any value; this means that your first step should be to backup the site database.  </p> <p>You can create a backup of the current site database contents using whatever tool the version of Local you're using provides. In this example I'm using Adminer:</p> <p></p> <p>At any moment you can re-import the site database dump using, again, phpMyAdmin, under the \"Import\" tab:</p> <p></p>"},{"location":"v3/tutorials/local-flywheel-setup/#bootstrapping-and-configuring-wp-browser","title":"Bootstrapping and configuring wp-browser","text":"<p>After the backup is done it's time to bootstrap <code>wp-browser</code> using its interactive mode:</p> <pre><code>cd ~/Local Sites/myplugin/app/public/wp-content/plugins/my-plugin\nvendor/bin/codecept init wpbrowser\n</code></pre> <p>The initialization guide will ask a number of questions.  </p>"},{"location":"v3/tutorials/local-flywheel-setup/#windows-configuration","title":"Windows configuration","text":"<p>In the screenshots below are the answers I used to configure <code>wp-browser</code> on Windows.</p> <p>Note that I've set up the database host using the values provided by Local UI, yours might differ depending on the version of Local you're using:</p> <p></p> <p></p> <p></p> <p>Below a complete list of each answer:</p> <ul> <li>I acknowledge wp-browser should run on development servers... <code>y</code></li> <li>Would you like to set up the suites interactively now? <code>y</code></li> <li>How would you like the acceptance suite to be called? <code>acceptance</code></li> <li>How would you like the functional suite to be called? <code>functional</code></li> <li>How would you like the WordPress unit and integration suite to be called? <code>wpunit</code></li> <li>How would you like to call the env configuration file? <code>.env.testing</code></li> <li>What is the path of the WordPress root directory? <code>~/Local Sites/myplugin/app/public</code></li> <li>What is the path, relative to WordPress root URL, of the admin area of the test site? <code>/wp-admin</code></li> <li>What is the name of the test database used by the test site? <code>tests</code></li> <li>What is the host of the test database used by the test site? <code>localhost:10003</code></li> <li>What is the user of the test database used by the test site? <code>root</code></li> <li>What is the password of the test database used by the test site? <code>root</code></li> <li>What is the table prefix of the test database used by the test site? <code>wp_</code></li> <li>What is the name of the test database WPLoader should use? <code>tests</code></li> <li>What is the host of the test database WPLoader should use? <code>localhost:10003</code></li> <li>What is the user of the test database WPLoader should use? <code>root</code></li> <li>What is the password of the test database WPLoader should use? <code>root</code></li> <li>What is the table prefix of the test database WPLoader should use? <code>wp_</code></li> <li>What is the URL the test site? <code>http://myplugin.local</code></li> <li>What is the email of the test site WordPress administrator? <code>admin@myplugin.local</code></li> <li>What is the title of the test site? <code>My Plugin Test</code></li> <li>What is the login of the administrator user of the test site? <code>admin</code></li> <li>What is the password of the administrator user of the test site? <code>password</code></li> <li>Are you testing a plugin, a theme or a combination of both (both)? <code>plugin</code></li> <li>What is the folder/plugin.php name of the plugin? <code>my-plugin/my-plugin.php</code></li> <li>Does your project needs additional plugins to be activated to work? <code>no</code></li> </ul> <p>Codeception will build the suites for the first time and should be ready to go.</p>"},{"location":"v3/tutorials/local-flywheel-setup/#mac-configuration","title":"Mac configuration","text":"<p>In the screenshots below are the answers I used to configure <code>wp-browser</code> on Mac.</p> <p>Note that I've set up the database host using the values provided by Local UI, yours might differ.</p> <p></p> <p>This screenshot is from the previous version of Local, the one based on VirtualBox and Docker:</p> <p></p> <p></p> <p></p> <p>Below a complete list of each answer:</p> <ul> <li>I acknowledge wp-browser should run on development servers... <code>y</code></li> <li>Would you like to set up the suites interactively now? <code>y</code></li> <li>How would you like the acceptance suite to be called? <code>acceptance</code></li> <li>How would you like the functional suite to be called? <code>functional</code></li> <li>How would you like the WordPress unit and integration suite to be called? <code>wpunit</code></li> <li>How would you like to call the env configuration file? <code>.env.testing</code></li> <li>What is the path of the WordPress root directory? <code>~/Local Sites/myplugin/app/public</code></li> <li>What is the path, relative to WordPress root URL, of the admin area of the test site? <code>/wp-admin</code></li> <li>What is the name of the test database used by the test site? <code>tests</code></li> <li>What is the host of the test database used by the test site? <code>/Users/lucatume/Library/Application Support/Local/run/FjKWfVMGd/mysql/mysqld.sock</code> ( or <code>192.168.95.100:4055</code> on an older version of Local)</li> <li>What is the user of the test database used by the test site? <code>root</code></li> <li>What is the password of the test database used by the test site? <code>root</code></li> <li>What is the table prefix of the test database used by the test site? <code>wp_</code></li> <li>What is the name of the test database WPLoader should use? <code>tests</code></li> <li>What is the host of the test database WPLoader should use? <code>/Users/lucatume/Library/Application Support/Local/run/FjKWfVMGd/mysql/mysqld.sock</code> (or <code>192.168.95.100:4055</code> on an older version of Local)</li> <li>What is the user of the test database WPLoader should use? <code>root</code></li> <li>What is the password of the test database WPLoader should use? <code>root</code></li> <li>What is the table prefix of the test database WPLoader should use? <code>wp_</code></li> <li>What is the URL the test site? <code>http://myplugin.local</code></li> <li>What is the email of the test site WordPress administrator? <code>admin@myplugin.local</code></li> <li>What is the title of the test site? <code>My Plugin Test</code></li> <li>What is the login of the administrator user of the test site? <code>admin</code></li> <li>What is the password of the administrator user of the test site? <code>password</code></li> <li>Are you testing a plugin, a theme or a combination of both (both)? <code>plugin</code></li> <li>What is the folder/plugin.php name of the plugin? <code>my-plugin/my-plugin.php</code></li> <li>Does your project needs additional plugins to be activated to work? <code>no</code></li> </ul> <p>Codeception will build the suites for the first time and should be ready to go.</p>"},{"location":"v3/tutorials/local-flywheel-setup/#setting-up-the-starting-database-fixture","title":"Setting up the starting database fixture","text":"<p>A \"fixture\", in testing terms, is a minimal, starting environment shared by all tests. In BDD it's the <code>Background</code> any scenario will share. In the case of a plugin the minimal, starting environment is the following:</p> <ul> <li>A fresh WordPress installation empty of any content.</li> <li>WordPress using its default theme.</li> <li>The only active plugin is the one you're testing, in this example: <code>my-plugin</code>.</li> </ul> <p>You should set up this fixture \"manually\", using the site administration UI at <code>http://myplugin.local/wp-admin</code>.</p> <p>The following command will empty the site, backup any content you care about first!</p> <p>When you're done setting up the initial database fixture, export it using the \"Export\" tab of your database tool of choice, and move the file to the <code>~/Local Sites/myplugin/app/public/wp-content/plugins/my-plugin/tests/_data/dump.sql</code> directory.</p> <p>There is one last step left to complete the setup.</p>"},{"location":"v3/tutorials/local-flywheel-setup/#using-the-tests-database-in-acceptance-and-functional-tests","title":"Using the tests database in acceptance and functional tests","text":"<p>Acceptance and functional tests will act as users, navigating to the site pages and making requests as a user would.  </p> <p>This means that WordPress will load, and with it its <code>wp-config.php</code> file, to handle the requests made by the tests.  </p> <p>During the setup phase I've specified the database to be used for <code>acceptance</code> and <code>functional</code> tests as <code>tests</code> but, looking at the contents of the <code>~/Local Sites/myplugin/app/public/wp-config.php</code> file, the <code>DB_NAME</code> constant is set to <code>local</code>.  </p> <p>What we'll do now means:</p> <ul> <li>If the request is a normal one, use the <code>local</code> database.</li> <li>If the request comes from a test, use the <code>tests</code> database.</li> </ul> <p>In your IDE/text-editor of choice edit the <code>~/Local Sites/myplugin/app/public/wp-config.php</code> and replace the line defining the <code>DB_NAME</code> constant like this:</p> <pre><code>- define( 'DB_NAME', 'local' );\n+ if( isset( $_SERVER['HTTP_X_WPBROWSER_REQUEST'] ) &amp;&amp; $_SERVER['HTTP_X_WPBROWSER_REQUEST'] ) { \n+    define( 'DB_NAME', 'tests' );\n+ } else {\n+    define( 'DB_NAME', 'local' );\n+ }\n</code></pre> <p>Here's the copy-and-paste friendly version:</p> <pre><code>if( isset( $_SERVER['HTTP_X_TEST_REQUEST'] ) &amp;&amp; $_SERVER['HTTP_X_TEST_REQUEST'] ) {\n        define( 'DB_NAME', 'tests' );\n} else {\n        define( 'DB_NAME', 'local' );\n}\n</code></pre> <p>If you look at the <code>tests/acceptance.suite.yml</code> and <code>tests/functional.suite.yml</code> files, respectively the <code>acceptance</code> and <code>functional</code> suite configuration files, you will see these entries in the <code>WPBrowser</code> module configuration:</p> <pre><code>headers:\n    X_TEST_REQUEST: 1\n    X_WPBROWSER_REQUEST: 1\n</code></pre> <p>This means that, with each HTTP request done during tests, the module will send the two headers. Those headers are read, on the WordPress side, using the <code>$_SERVER['HTTP_X_TEST_REQUEST']</code> and <code>$_SERVER['X_WPBROWSER_REQUEST']</code> variables.</p> <p>Codeception and wp-browser are ready to run and the test-drive development can start.</p>"},{"location":"v3/tutorials/local-flywheel-setup/#sanity-check","title":"Sanity check","text":"<p>Before starting to write tests, take a moment to run each suite separately and make sure all is set up correctly.  </p> <p>If you run into issues, there's a chance you forgot something along the way, please take the time to read this tutorial a second time before opening an issue.</p> <p>You have created 4 suites, each suite has at least one example test to make sure all works. Run each suite and make sure all tests succeed, from within the box run:</p> <pre><code>cd ~/Local Sites/myplugin/app/public/wp-content/plugins/my-plugin \nvendor/bin/codecept run acceptance\nvendor/bin/codecept run functional\nvendor/bin/codecept run wpunit\nvendor/bin/codecept run unit\n</code></pre> <p>You're now run to customize the suites to your liking or start writing tests, run <code>vendor/bin/codecept</code> to see a list of the available commands.</p>"},{"location":"v3/tutorials/mamp-mac-setup/","title":"Mamp mac setup","text":""},{"location":"v3/tutorials/mamp-mac-setup/#setting-up-wp-browser-with-mamp-on-mac-to-test-a-plugin","title":"Setting up wp-browser with MAMP on Mac to test a plugin","text":""},{"location":"v3/tutorials/mamp-mac-setup/#requirements","title":"Requirements","text":"<ul> <li>A Mac machine</li> <li>A working installation of MAMP.</li> <li>You should be able to create sites and visit them from your browser without issues.</li> <li>Composer installed and working on your terminal <code>PATH</code>, you should be able to run <code>composer --version</code> at the terminal and see the version correctly.</li> </ul> <p>The version of MAMP used in this tutorial is the free, non PRO, one. MAMP PRO provides more features, but the setup instructions should remain valid.</p>"},{"location":"v3/tutorials/mamp-mac-setup/#install-and-configure-mamp","title":"Install and configure MAMP","text":"<p>This walk-through starts after MAMP has been installed and is correctly running on the host machine; you can download MAMP from the site and follow the installation instructions. In the context of this guide I'm assuming the \"Document Root\" directory is the default one, in the <code>/Applications/MAMP/htdocs</code> directory. If your document root lies elsewhere, replace the <code>/Applications/MAMP/htdocs</code> path with the actual directory in each command.  </p> <p></p> <p></p>"},{"location":"v3/tutorials/mamp-mac-setup/#creating-the-databases-and-installing-wordpress","title":"Creating the databases and installing WordPress","text":"<p>Go to the <code>http://localhost/phpMyAdmin/</code> page and create two new databases:</p> <ul> <li><code>wordpress</code> is the database you will use for WordPress</li> <li><code>tests</code> is the database you will use for the tests</li> </ul> <p></p> <p>Unzip the the WordPress files into the <code>/Applications/MAMP/htdocs</code> and head over to <code>http://localhost</code> to install WordPress.  </p> <p>The database credentials for the installation are:</p> <ul> <li>Database name: <code>wordpress</code></li> <li>Database user: <code>root</code></li> <li>Database password: <code>root</code></li> <li>Database host: <code>localhost</code></li> </ul> <p>Use <code>admin</code> as administrator user name and <code>password</code> as password for the administrator user.</p> <p></p> <p></p> <p>Make sure you can visit the WordPress installation at <code>http://localhost</code> and that you can correctly access the administration area at <code>http://localhost/wp-admin</code>.</p>"},{"location":"v3/tutorials/mamp-mac-setup/#scaffolding-the-project-folder","title":"Scaffolding the project folder","text":"<p>I'm assuming the scope of the development is to test the <code>my-plugin</code> plugin.  </p> <p>The first step is to create the bare minimum code required to make the plugin show up among the available WordPress plugins. Create the main plugin file in the WordPress installation plugins directory, in the <code>/Applications/MAMP/htdocs/wp-content/plugins/my-plugin/my-plugin.php</code> file:</p> <pre><code>&lt;?php\n/**\n * Plugin Name: My plugin\n */ \n</code></pre> <p>The plugin should now show up, activate and deactivate correctly, among the plugins listed in the WordPress installation at <code>http://localhost/wp-admin/plugins.php</code>.  </p> <p></p>"},{"location":"v3/tutorials/mamp-mac-setup/#installing-wp-browser","title":"Installing wp-browser","text":"<p>Open a terminal window and navigate to the plugin directory and initialize the Composer project:</p> <pre><code>cd /Applications/MAMP/htdocs/wp-content/plugins/my-plugin\ncomposer init\n</code></pre> <p></p> <p>Composer will ask some questions to initialize the project, for the sake of this small guide the answers are not relevant. Here is the <code>composer.json</code> file generated by the above answers:</p> <pre><code>{\n    \"name\": \"mamp/my-plugin\",\n    \"type\": \"wordpress-plugin\",\n    \"require\": {}\n}\n</code></pre> <p>Next require <code>lucatume/wp-browser</code> as a development dependency:</p> <pre><code>composer require --dev lucatume/wp-browser\n</code></pre> <p>Composer installs any dependency binary file, an executable file, in the project <code>vendor/bin</code> folder.  To check Codeception is correctly installed run this command:</p> <pre><code>vendor/bin/codecept --version\n</code></pre> <p></p> <p>Since wp-browser requires Codeception, there is no need to require Codeception explicitly as a development dependency.</p>"},{"location":"v3/tutorials/mamp-mac-setup/#setting-up-wp-browser","title":"Setting up wp-browser","text":"<p>For those that might get lost while trying to set up wp-browser for the first time the VVV context provides an excellent base to understand the process.  </p> <p>wp-browser needs to know:</p> <ul> <li>Where the WordPress installation files are located: they will be loaded in integration and \"WordPress unit\" tests.</li> <li>How to connect to the WordPress site \"normal\" database: this is the database that stores the data of the site I would see when visiting the local installation URL at <code>http://localhost</code>.</li> <li>How to connect to the database dedicated to the integration and \"WordPress unit\" tests: this database will be used to install WordPress during integration and \"WordPress unit\" tests.</li> </ul> <p>Any test suite using a database should never run on a database containing data of any value; this means that your first step should be to backup the site database.  </p> <p>You can create a backup of the current site database contents using phpMyAdmin, at <code>http://localhost/phpMyAdmin/</code>, under the \"Export\" tab:</p> <p></p> <p>At any moment you can re-import the site database dump using, again, phpMyAdmin, under the \"Import\" tab:</p> <p></p>"},{"location":"v3/tutorials/mamp-mac-setup/#bootstrapping-and-configuring-wp-browser","title":"Bootstrapping and configuring wp-browser","text":"<p>After the backup is done it's time to bootstrap <code>wp-browser</code> using its interactive mode:</p> <pre><code>cd /Applications/MAMP/htdocs/wp-content/plugins/my-plugin\nvendor/bin/codecept init wpbrowser\n</code></pre> <p>The initialization guide will ask a number of questions. In the screenshots below are the answers I used to configure <code>wp-browser</code>.</p> <p></p> <p></p> <p>Below a complete list of each answer:</p> <ul> <li>I acknowledge wp-browser should run on development servers... <code>y</code></li> <li>Would you like to set up the suites interactively now? <code>y</code></li> <li>How would you like the acceptance suite to be called? <code>acceptance</code></li> <li>How would you like the functional suite to be called? <code>functional</code></li> <li>How would you like the WordPress unit and integration suite to be called? <code>wpunit</code></li> <li>How would you like to call the env configuration file? <code>.env.testing</code></li> <li>What is the path of the WordPress root directory? <code>/Applications/MAMP/htdocs</code></li> <li>What is the path, relative to WordPress root URL, of the admin area of the test site? <code>/wp-admin</code></li> <li>What is the name of the test database used by the test site? <code>tests</code></li> <li>What is the host of the test database used by the test site? <code>localhost</code></li> <li>What is the user of the test database used by the test site? <code>root</code></li> <li>What is the password of the test database used by the test site? <code>root</code></li> <li>What is the table prefix of the test database used by the test site? <code>wp_</code></li> <li>What is the name of the test database WPLoader should use? <code>tests</code></li> <li>What is the host of the test database WPLoader should use? <code>localhost</code></li> <li>What is the user of the test database WPLoader should use? <code>root</code></li> <li>What is the password of the test database WPLoader should use? <code>root</code></li> <li>What is the table prefix of the test database WPLoader should use? <code>wp_</code></li> <li>What is the URL the test site? <code>http://localhost</code></li> <li>What is the email of the test site WordPress administrator? <code>admin@wp.test</code></li> <li>What is the title of the test site? <code>My Plugin Test</code></li> <li>What is the login of the administrator user of the test site? <code>admin</code></li> <li>What is the password of the administrator user of the test site? <code>password</code></li> <li>Are you testing a plugin, a theme or a combination of both (both)? <code>plugin</code></li> <li>What is the folder/plugin.php name of the plugin? <code>my-plugin/my-plugin.php</code></li> <li>Does your project needs additional plugins to be activated to work? <code>no</code></li> </ul> <p>Codeception will build the suites for the first time and should be ready to go.</p>"},{"location":"v3/tutorials/mamp-mac-setup/#setting-up-the-starting-database-fixture","title":"Setting up the starting database fixture","text":"<p>A \"fixture\", in testing terms, is a minimal, starting environment shared by all tests. In BDD it's the <code>Background</code> any scenario will share. In the case of a plugin the minimal, starting environment is the following:</p> <ul> <li>A fresh WordPress installation empty of any content.</li> <li>WordPress using its default theme.</li> <li>The only active plugin is the one you're testing, in this example: <code>my-plugin</code>.</li> </ul> <p>You should set up this fixture \"manually\", using the site administration UI at <code>http://localhost/wp-admin</code>.</p> <p>The following command will empty the site, backup any content you care about first!</p> <p>When you're done setting up the initial database fixture, export it using the \"Export\" tab of phpMyAdmin, at <code>http://localhost/phpMyAdmin/</code> and move the file to the <code>/Applications/MAMP/htdocs/wp-content/plugins/my-plugin/tests/_data/dump.sql</code> directory.</p> <p>There is one last step left to complete the setup.</p>"},{"location":"v3/tutorials/mamp-mac-setup/#using-the-tests-database-in-acceptance-and-functional-tests","title":"Using the tests database in acceptance and functional tests","text":"<p>Acceptance and functional tests will act as users, navigating to the site pages and making requests as a user would.  </p> <p>This means that WordPress will load, and with it its <code>wp-config.php</code> file, to handle the requests made by the tests.  </p> <p>During the setup phase I've specified the database to be used for <code>acceptance</code> and <code>functional</code> tests as <code>tests</code> but, looking at the contents of the <code>/Applications/MAMP/htdocs/wp-config.php</code> file, the <code>DB_NAME</code> constant is set to <code>wordpress</code>.  </p> <p>What we'll do now means:</p> <ul> <li>If the request is a normal one, use the <code>wordpress</code> database.</li> <li>If the request comes from a test, use the <code>tests</code> database.</li> </ul> <p>In your IDE/text-editor of choice edit the <code>/Applications/MAMP/htdocs/wp-config.php</code> and replace the line defining the <code>DB_NAME</code> constant like this:</p> <pre><code>- define( 'DB_NAME', 'wordpress' );\n+ if( isset( $_SERVER['HTTP_X_WPBROWSER_REQUEST'] ) &amp;&amp; $_SERVER['HTTP_X_WPBROWSER_REQUEST'] ) { \n+    define( 'DB_NAME', 'tests' );\n+ } else {\n+    define( 'DB_NAME', 'wordpress' );\n+ }\n</code></pre> <p>Here's the copy-and-paste friendly version:</p> <pre><code>if( isset( $_SERVER['HTTP_X_TEST_REQUEST'] ) &amp;&amp; $_SERVER['HTTP_X_TEST_REQUEST'] ) {\n        define( 'DB_NAME', 'tests' );\n} else {\n        define( 'DB_NAME', 'wordpress' );\n}\n</code></pre> <p>If you look at the <code>tests/acceptance.suite.yml</code> and <code>tests/functional.suite.yml</code> files, respectively the <code>acceptance</code> and <code>functional</code> suite configuration files, you will see these entries in the <code>WPBrowser</code> module configuration:</p> <pre><code>headers:\n    X_TEST_REQUEST: 1\n    X_WPBROWSER_REQUEST: 1\n</code></pre> <p>This means that, with each HTTP request done during tests, the module will send the two headers. Those headers are read, on the WordPress side, using the <code>$_SERVER['HTTP_X_TEST_REQUEST']</code> and <code>$_SERVER['X_WPBROWSER_REQUEST']</code> variables.</p> <p>Codeception and wp-browser are ready to run and the test-drive development can start.</p>"},{"location":"v3/tutorials/mamp-mac-setup/#sanity-check","title":"Sanity check","text":"<p>Before starting to write tests, take a moment to run each suite separately and make sure all is set up correctly.  </p> <p>If you run into issues, there's a chance you forgot something along the way, please take the time to read this tutorial a second time before opening an issue.</p> <p>You have created 4 suites, each suite has at least one example test to make sure all works. Run each suite and make sure all tests succeed, from within the box run:</p> <pre><code>cd /Applications/MAMP/htdocs/wp-content/plugins/my-plugin \nvendor/bin/codecept run acceptance\nvendor/bin/codecept run functional\nvendor/bin/codecept run wpunit\nvendor/bin/codecept run unit\n</code></pre> <p>You're now run to customize the suites to your liking or start writing tests, run <code>vendor/bin/codecept</code> to see a list of the available commands.</p>"},{"location":"v3/tutorials/vvv-setup/","title":"Vvv setup","text":""},{"location":"v3/tutorials/vvv-setup/#setting-up-wp-browser-on-vvv-to-test-a-plugin","title":"Setting up wp-browser on VVV to test a plugin","text":""},{"location":"v3/tutorials/vvv-setup/#requirements","title":"Requirements","text":"<ul> <li>A Windows, Linux or Mac machine (I'll call this the \"host machine\" or just \"host\").</li> <li>A working installation of VVV; you should be able to navigate to VVV root directory, run the <code>vagrant up</code> command, and have VVV up and running.</li> <li>On the VVV installation you should be able to visit the two default sites URLs without issues; the two default sites addresses are:<ul> <li>http://one.wordpress.test</li> <li>http://two.wordpress.test</li> </ul> </li> </ul>"},{"location":"v3/tutorials/vvv-setup/#why-vvv","title":"Why VVV?","text":"<p>The VVV project provides a \"a Vagrant configuration for developing with WordPress\" and is an excellent, no-frills, starting point to develop WordPress projects (themes, plugins and whole sites. Based on Vagrant and Virtual Box, VVV removes the differences between systems by providing a uniform, Ubuntu Linux based, virtual machine that will bahave the same on Windows, Linux and Mac. Configuring it to run WordPress tests is easy: let's get started.  </p>"},{"location":"v3/tutorials/vvv-setup/#check-vvv-works-correctly","title":"Check VVV works correctly","text":"<p>This walk-through starts after VVV has been installed and is running on the host machine; the installation guide is clear and simple to follow and I'm not duplicating it here. In the context of this guide I'm assuming VVV lives in the <code>~/Repos/VVV</code> directory, that we are working on the <code>my-plugin</code> project and that the plugin is being developed in the default (<code>wordpress-one</code>) WordPress installation provided by the box. If your VVV installation lies elsewhere, replace the <code>~/Repos/VVV</code> with the actual directory in each command.  </p> <p>After completing the installation of VVV navigate to VVV root folder and run the <code>vagrant up</code> command:</p> <pre><code>cd ~/Repos/VVV\nvagrant up\n</code></pre> <p></p> <p>After the automatic bootstrap and initialization process completed, VVV makes two WordPress sites available:</p> <ul> <li><code>http://one.wordpress.test/</code> is the first default site address.</li> <li><code>http://two.wordpress.test/</code> is the second default site address.</li> <li><code>http://vvv.test/</code> is VVV dashboard address.</li> </ul> <p>You should be able to reach each one of the URLs above without issues, should this not be the case something during VVV setup did not go according to the plan and you should fix it before moving on.  </p> <p>If the sanity check above is complete it's time to move to the following part specific to Codeception and wp-browser setup.  </p>"},{"location":"v3/tutorials/vvv-setup/#in-and-out-host-and-guest","title":"In and out, host and guest","text":"<p>The Vagrant box provided by VVV goes beyond a simple MySQL, PHP and Ngnix server stack and provides a complete WordPress development environment; tools like Composer, [grunt-cli][4992-0003], and [wp-cli][4992-0006] are ready to use.  </p> <p>This allows the entire development, when it comes to the CLI tools, to happen in the virtual machine and not outside of it.  </p> <p>\"Inside the virtual machine\" means the first CLI instruction to run from the <code>~/Repos/VVV</code> folder (assuming that is the folder where VVV was installed) is this:</p> <pre><code>cd ~/Repos/VVV\nvagrant ssh\n</code></pre> <p></p> <p>This will connect, via SSH, to the virtual machine as the <code>vagrant</code> user. To exit from the SSH session inside the box, just type <code>exit</code> and return.</p> <p>Note: any further instruction I'm showing here, beside the code editing that will happen in a dedicated PHP IDE like [PHPStorm][4992-0004] or [Sublime Text][4992-0005] on the host machine, will happen \"inside the virtual machine\".  </p> <p>When I say \"host machine\" I mean your laptop, desktop or whatever computer you're working on; when I say \"guest machine\" I mean VVV virtual machine; this is usually the case for any virtual-ish setup (Vagrant, Docker and the like).  </p>"},{"location":"v3/tutorials/vvv-setup/#scaffolding-the-project-folder","title":"Scaffolding the project folder","text":"<p>I'm assuming the scope of the development is to test the <code>my-plugin</code> plugin.  </p> <p>The first step is to create the bare minimum code required to make the plugin show up among the available WordPress plugins. Create the main plugin file in the <code>http://one.wordpress.test</code> installation plugins directory, in the <code>~/Repos/VVV/www/wordpress-one/public_html/wp-content/plugins/my-plugin/my-plugin.php</code> file:</p> <pre><code>&lt;?php\n/**\n * Plugin Name: My plugin\n */ \n</code></pre> <p>The plugin should now show up, activate and deactivate correctly, among the plugins listed in the VVV default WordPress installation at <code>http://one.wordpress.test/wp-admin/plugins.php</code>.  </p> <p>By default, VVV administrator user name is <code>admin</code> and password is <code>password</code>.</p> <p></p>"},{"location":"v3/tutorials/vvv-setup/#installing-wp-browser","title":"Installing wp-browser","text":"<p>Since Composer is provided from VVV, installing <code>wp-browser</code> requires entering the virtual machine (if you did not already):</p> <pre><code>cd ~/Repos/VVV\nvagrant ssh\n</code></pre> <p>Once inside navigate to the plugins folder. The path is now relative to VVV filesystem structure so it won't be the same as the one used above that was, instead, in the context of the \"host machine\":</p> <pre><code>cd /srv/www/wordpress-one/public_html/wp-content/plugins/my-plugin \ncomposer init\n</code></pre> <p></p> <p>Composer will ask some questions to initialize the project, for the sake of this small guide the answers are not relevant. Here is the <code>composer.json</code> file generated by the above answers:</p> <pre><code>{\n    \"name\": \"vagrant/my-plugin\",\n    \"type\": \"wordpress-plugin\",\n    \"require\": {}\n}\n</code></pre> <p>Next require <code>lucatume/wp-browser</code> as a development dependency:</p> <pre><code>composer require --dev lucatume/wp-browser\n</code></pre> <p>Composer installs any dependency binary file, an executable file, in the project <code>vendor/bin</code> folder.  To check Codeception is correctly installed run this command:</p> <pre><code>vendor/bin/codecept --version\n</code></pre> <p></p> <p>Since wp-browser requires Codeception, there is no need to require Codeception explicitly as a development dependency.</p>"},{"location":"v3/tutorials/vvv-setup/#setting-up-wp-browser","title":"Setting up wp-browser","text":"<p>For those that might get lost while trying to set up wp-browser for the first time the VVV context provides an excellent base to understand the process.  </p> <p>wp-browser needs to know:</p> <ul> <li>Where the WordPress installation files are located: they will be loaded in integration and \"WordPress unit\" tests.</li> <li>How to connect to the WordPress site \"normal\" database: this is the database that stores the data of the site I would see when visiting the local installation URL (<code>http://one.wordpress.test</code> in the case of the VVV default installation).</li> <li>How to connect to the database dedicated to the integration and \"WordPress unit\" tests: this database will be used to install WordPress during integration and \"WordPress unit\" tests.</li> </ul> <p>Any test suite using a database should never run on a database containing data of any value; this means that if I am using VVV for my day to day WordPress development my first step should be to backup the site database.  </p> <p>You can create a backup of the current site database contents using wp-cli from within the virtual machine:</p> <pre><code>cd /srv/www/wordpress-one/public_html\nwp db export wordpress-one-backup.sql\n</code></pre> <p>At any moment you can re-import the site database dump using this command, the site database will be reset to the state it was when you created the database dump:</p> <pre><code>cd /srv/www/wordpress-one/public_html\nwp db import wordpress-one-backup.sql\n</code></pre> <p></p>"},{"location":"v3/tutorials/vvv-setup/#creating-the-database-dedicated-to-the-tests","title":"Creating the database dedicated to the tests","text":"<p><code>wp-browser</code> will use the databases it works on in a destructive way: between tests the data will be lost.  </p> <p>After the backup you should have done in the previous step, the next step is creating a database dedicated to the test.  </p> <p>At the VVV box command line run:</p> <pre><code>mysql -u root -p -e \"CREATE DATABASE if not exists tests\"\nmysql -u root -p -e \"GRANT ALL PRIVILEGES ON tests.* TO 'wp'@'localhost';\"\n</code></pre> <p>When prompted for the password enter <code>root</code>. The first command creates the <code>tests</code> database, if it does not exist; the second command grants the <code>wp</code> user all privileges on it.</p> <p>In VVV the root database user name is <code>root</code> and the password is <code>root</code>.</p> <p>Check the database was correctly created running this command:</p> <pre><code>mysql -u root -p -e \"SHOW DATABASES\"\n</code></pre> <p>The <code>tests</code> database should be present in the list.</p>"},{"location":"v3/tutorials/vvv-setup/#bootstrapping-and-configuring-wp-browser","title":"Bootstrapping and configuring wp-browser","text":"<p>After the backup is done it's time to bootstrap <code>wp-browser</code> using its interactive mode:</p> <pre><code>cd /srv/www/wordpress-one/public_html/wp-content/plugins/my-plugin\nvendor/bin/codecept init wpbrowser\n</code></pre> <p>The initialization guide will ask a number of questions. In the screenshots below are the answers I used to configure <code>wp-browser</code>.</p> <p> </p> <p>Below a complete list of each answer:</p> <ul> <li>I acknowledge wp-browser should run on development servers... <code>y</code></li> <li>Would you like to set up the suites interactively now? <code>y</code></li> <li>How would you like the acceptance suite to be called? <code>acceptance</code></li> <li>How would you like the functional suite to be called? <code>functional</code></li> <li>How would you like the WordPress unit and integration suite to be called? <code>wpunit</code></li> <li>How would you like to call the env configuration file? <code>.env.testing</code></li> <li>What is the path of the WordPress root directory? <code>/srv/www/wordpress-one/public_html</code></li> <li>What is the path, relative to WordPress root URL, of the admin area of the test site? <code>/wp-admin</code></li> <li>What is the name of the test database used by the test site? <code>tests</code></li> <li>What is the host of the test database used by the test site? <code>localhost</code></li> <li>What is the user of the test database used by the test site? <code>root</code></li> <li>What is the password of the test database used by the test site? <code>root</code></li> <li>What is the table prefix of the test database used by the test site? <code>wp_</code></li> <li>What is the name of the test database WPLoader should use? <code>tests</code></li> <li>What is the host of the test database WPLoader should use? <code>localhost</code></li> <li>What is the user of the test database WPLoader should use? <code>root</code></li> <li>What is the password of the test database WPLoader should use? <code>root</code></li> <li>What is the table prefix of the test database WPLoader should use? <code>wp_</code></li> <li>What is the URL the test site? <code>http://one.wordpress.test</code></li> <li>What is the email of the test site WordPress administrator? <code>admin@one.wordpress.test</code></li> <li>What is the title of the test site? <code>My Plugin Test</code></li> <li>What is the login of the administrator user of the test site? <code>admin</code></li> <li>What is the password of the administrator user of the test site? <code>password</code></li> <li>Are you testing a plugin, a theme or a combination of both (both)? <code>plugin</code></li> <li>What is the folder/plugin.php name of the plugin? <code>my-plugin/my-plugin.php</code></li> <li>Does your project needs additional plugins to be activated to work? <code>no</code></li> </ul> <p>Codeception will build the suites for the first time and should be ready to go.</p>"},{"location":"v3/tutorials/vvv-setup/#setting-up-the-starting-database-fixture","title":"Setting up the starting database fixture","text":"<p>A \"fixture\", in testing terms, is a minimal, starting environment shared by all tests. In BDD it's the <code>Background</code> any scenario will share. In the case of a plugin the minimal, starting environment is the following:</p> <ul> <li>A fresh WordPress installation empty of any content.</li> <li>WordPress using its default theme.</li> <li>The only active plugin is the one you're testing, in this example: <code>my-plugin</code>.</li> </ul> <p>You can set up this fixture \"manually\", using the site administration UI at <code>http://one.wordpress.test/wp-admin</code>, or use wp-cli and save precious time.</p> <p>The following command will empty the site, backup any content you care about first!</p> <p>As it's been the case so far, I'm running the following command from within the VVV box (use <code>vagrant ssh</code> to log in):</p> <pre><code>cd /srv/www/wordpress-one/public_html\nwp site empty --yes --uploads\nwp plugin deactivate --all\nwp plugin activate my-plugin\nwp db export wp-content/plugins/my-plugin/tests/_data/dump.sql\n</code></pre> <p>The initial database fixture has been created, now there's one last step to complete.</p>"},{"location":"v3/tutorials/vvv-setup/#using-the-tests-database-in-acceptance-and-functional-tests","title":"Using the tests database in acceptance and functional tests","text":"<p>Acceptance and functional tests will act as users, navigating to the site pages and making requests as a user would.  </p> <p>This means that WordPress will load, and with it its <code>wp-config.php</code> file, to handle the requests made by the tests.  </p> <p>During the setup phase I've specified the database to be used for <code>acceptance</code> and <code>functional</code> tests as <code>tests</code> but, looking at the contents of the <code>/srv/www/wordpress-one/public_html/wp-config.php</code> file, the <code>DB_NAME</code> constant is set to <code>wordpress-one</code>.  </p> <p>What we'll do now means:</p> <ul> <li>If the request is a normal one, use the <code>wordpress-one</code> database.</li> <li>If the request comes from a test, use the <code>tests</code> database.</li> </ul> <p>In your IDE/text-editor of choice edit the <code>~/Repos/VVV/www/wordpress-one/public_html/wp-config.php</code> and replace the line defining the <code>DB_NAME</code> constant like this:</p> <pre><code>- define( 'DB_NAME', 'wordpress-one' );\n+ if( isset( $_SERVER['HTTP_X_WPBROWSER_REQUEST'] ) &amp;&amp; $_SERVER['HTTP_X_WPBROWSER_REQUEST'] ) { \n+    define( 'DB_NAME', 'tests' );\n+ } else {\n+    define( 'DB_NAME', 'wordpress-one' );\n+ }\n</code></pre> <p>Here's the copy-and-paste friendly version:</p> <pre><code>if( isset( $_SERVER['HTTP_X_TEST_REQUEST'] ) &amp;&amp; $_SERVER['HTTP_X_TEST_REQUEST'] ) {\n        define( 'DB_NAME', 'tests' );\n} else {\n        define( 'DB_NAME', 'wordpress-one' );\n}\n</code></pre> <p>If you look at the <code>tests/acceptance.suite.yml</code> and <code>tests/functional.suite.yml</code> files, respectively the <code>acceptance</code> and <code>functional</code> suite configuration files, you will see these entries in the <code>WPBrowser</code> module configuration:</p> <pre><code>headers:\n    X_TEST_REQUEST: 1\n    X_WPBROWSER_REQUEST: 1\n</code></pre> <p>This means that, with each HTTP request done during tests, the module will send the two headers. Those headers are read, on the WordPress side, using the <code>$_SERVER['HTTP_X_TEST_REQUEST']</code> and <code>$_SERVER['X_WPBROWSER_REQUEST']</code> variables.</p> <p>Codeception and wp-browser are ready to run and the test-drive development can start.</p>"},{"location":"v3/tutorials/vvv-setup/#sanity-check","title":"Sanity check","text":"<p>Before starting to write tests, take a moment to run each suite separately and make sure all is set up correctly.  </p> <p>If you run into issues, there's a chance you forgot something along the way, please take the time to read this tutorial a second time before opening an issue.</p> <p>You have created 4 suites, each suite has at least one example test to make sure all works. Run each suite and make sure all tests succeed, from within the box run:</p> <pre><code>cd /srv/www/wordpress-one/public_html/wp-content/plugins/my-plugin \nvendor/bin/codecept run acceptance\nvendor/bin/codecept run functional\nvendor/bin/codecept run wpunit\nvendor/bin/codecept run unit\n</code></pre> <p>You're now run to customize the suites to your liking or start writing tests, run <code>vendor/bin/codecept</code> to see a list of the available commands.</p>"},{"location":"v3/tutorials/wamp-setup/","title":"Wamp setup","text":""},{"location":"v3/tutorials/wamp-setup/#setting-up-wp-browser-with-wamp-on-windows-to-test-a-plugin","title":"Setting up wp-browser with WAMP on Windows to test a plugin","text":""},{"location":"v3/tutorials/wamp-setup/#requirements","title":"Requirements","text":"<ul> <li>A Windows machine</li> <li>A working installation of WAMP.</li> <li>You should be able to create sites and visit them from your browser without issues.</li> <li>Composer installed and working on your terminal <code>PATH</code>, you should be able to run <code>composer --version</code> at the terminal and see the version correctly.</li> </ul>"},{"location":"v3/tutorials/wamp-setup/#install-and-configure-wamp","title":"Install and configure WAMP","text":"<p>This walk-through starts after WAMP has been installed and is correctly running on the host machine; you can download WAMP from the site and follow the installation instructions. In the context of this guide I'm installing the test WordPress installation in the <code>C:\\wamp64\\www\\wp</code> directory. If your installation lies elsewhere, replace the <code>C:\\wamp64\\www\\wp</code> path with the actual directory in each command.  </p> <p></p> <p></p>"},{"location":"v3/tutorials/wamp-setup/#creating-the-databases-and-installing-wordpress","title":"Creating the databases and installing WordPress","text":"<p>Go to the <code>http://localhost/phpmyadmin/index.php</code> page and create two new databases:</p> <ul> <li><code>wordpress</code> is the database you will use for WordPress</li> <li><code>tests</code> is the database you will use for the tests</li> </ul> <p></p> <p>The default database user is <code>root</code>, the default password is empty.</p> <p>Unzip the the WordPress files into the <code>C:\\wamp64\\www\\wp</code> and head over to <code>http://localhost/wp</code> to install WordPress. The database credentials for the installation are:</p> <ul> <li>Database name: <code>wordpress</code></li> <li>Database user: <code>root</code></li> <li>Database password is empty</li> <li>Database host: <code>localhost</code></li> </ul> <p>Use <code>admin</code> as administrator user name and <code>password</code> as password for the administrator user.</p> <p></p> <p></p> <p>Make sure you can visit the WordPress installation at <code>http://localhost/wp</code> and that you can correctly access the administration area at <code>http://localhost/wp/wp-admin</code>.</p>"},{"location":"v3/tutorials/wamp-setup/#scaffolding-the-project-folder","title":"Scaffolding the project folder","text":"<p>I'm assuming the scope of the development is to test the <code>my-plugin</code> plugin.  </p> <p>The first step is to create the bare minimum code required to make the plugin show up among the available WordPress plugins. Create the main plugin file in the WordPress installation plugins directory, in the <code>C:\\wamp64\\www\\wp\\wp-content\\plugins\\my-plugin\\my-plugin.php</code> file:</p> <pre><code>&lt;?php\n/**\n * Plugin Name: My plugin\n */ \n</code></pre> <p>The plugin should now show up, activate and deactivate correctly, among the plugins listed in the WordPress installation at <code>http://localhost/wp/wp-admin/plugins.php</code>.  </p> <p></p>"},{"location":"v3/tutorials/wamp-setup/#installing-wp-browser","title":"Installing wp-browser","text":"<p>Open a terminal window and navigate to the plugin directory and initialize the Composer project. I'm using Cmder as terminal emulator on Windows, but you can use the default one.</p> <pre><code>cd C:\\wamp64\\www\\wp\\wp-content\\plugins\\my-plugin\ncomposer init\n</code></pre> <p></p> <p>Composer will ask some questions to initialize the project, for the sake of this small guide the answers are not relevant. Here is the <code>composer.json</code> file generated by the above answers:</p> <pre><code>{\n    \"name\": \"wamp/my-plugin\",\n    \"type\": \"wordpress-plugin\",\n    \"require\": {}\n}\n</code></pre> <p>Next require <code>lucatume/wp-browser</code> as a development dependency:</p> <pre><code>composer require --dev lucatume/wp-browser\n</code></pre> <p>Composer installs any dependency binary file, an executable file, in the project <code>vendor/bin</code> folder.  To check Codeception is correctly installed run this command:</p> <pre><code>vendor\\bin\\codecept.bat --version\n</code></pre> <p></p> <p>Since wp-browser requires Codeception, there is no need to require Codeception explicitly as a development dependency.</p>"},{"location":"v3/tutorials/wamp-setup/#setting-up-wp-browser","title":"Setting up wp-browser","text":"<p>For those that might get lost while trying to set up wp-browser for the first time the VVV context provides an excellent base to understand the process.  </p> <p>wp-browser needs to know:</p> <ul> <li>Where the WordPress installation files are located: they will be loaded in integration and \"WordPress unit\" tests.</li> <li>How to connect to the WordPress site \"normal\" database: this is the database that stores the data of the site I would see when visiting the local installation URL at <code>http://localhost/wp</code>.</li> <li>How to connect to the database dedicated to the integration and \"WordPress unit\" tests: this database will be used to install WordPress during integration and \"WordPress unit\" tests.</li> </ul> <p>Any test suite using a database should never run on a database containing data of any value; this means that your first step should be to backup the site database.  </p> <p>You can create a backup of the current site database contents using phpMyAdmin, at <code>http://localhost/phpmyadmin/</code>, under the \"Export\" tab:</p> <p></p> <p>At any moment you can re-import the site database dump using, again, phpMyAdmin, under the \"Import\" tab:</p> <p></p>"},{"location":"v3/tutorials/wamp-setup/#bootstrapping-and-configuring-wp-browser","title":"Bootstrapping and configuring wp-browser","text":"<p>After the backup is done it's time to bootstrap <code>wp-browser</code> using its interactive mode:</p> <pre><code>cd C:\\wamp64\\www\\wp\\wp-content\\plugins\\my-plugin\nvendor/bin/codecept.bat init wpbrowser\n</code></pre> <p>The initialization guide will ask a number of questions. In the screenshots below are the answers I used to configure <code>wp-browser</code>.</p> <p></p> <p></p> <p>Below a complete list of each answer:</p> <ul> <li>I acknowledge wp-browser should run on development servers... <code>y</code></li> <li>Would you like to set up the suites interactively now? <code>y</code></li> <li>How would you like the acceptance suite to be called? <code>acceptance</code></li> <li>How would you like the functional suite to be called? <code>functional</code></li> <li>How would you like the WordPress unit and integration suite to be called? <code>wpunit</code></li> <li>How would you like to call the env configuration file? <code>.env.testing</code></li> <li>What is the path of the WordPress root directory? <code>C:/wamp64/www/wp</code></li> <li>What is the path, relative to WordPress root URL, of the admin area of the test site? <code>/wp-admin</code></li> <li>What is the name of the test database used by the test site? <code>tests</code></li> <li>What is the host of the test database used by the test site? <code>localhost</code></li> <li>What is the user of the test database used by the test site? <code>root</code></li> <li>What is the password of the test database used by the test site? ``</li> <li>What is the table prefix of the test database used by the test site? <code>wp_</code></li> <li>What is the name of the test database WPLoader should use? <code>tests</code></li> <li>What is the host of the test database WPLoader should use? <code>localhost</code></li> <li>What is the user of the test database WPLoader should use? <code>root</code></li> <li>What is the password of the test database WPLoader should use? ``</li> <li>What is the table prefix of the test database WPLoader should use? <code>wp_</code></li> <li>What is the URL the test site? <code>http://localhost/wp</code></li> <li>What is the email of the test site WordPress administrator? <code>admin@wp.test</code></li> <li>What is the title of the test site? <code>My Plugin Test</code></li> <li>What is the login of the administrator user of the test site? <code>admin</code></li> <li>What is the password of the administrator user of the test site? <code>password</code></li> <li>Are you testing a plugin, a theme or a combination of both (both)? <code>plugin</code></li> <li>What is the folder/plugin.php name of the plugin? <code>my-plugin/my-plugin.php</code></li> <li>Does your project needs additional plugins to be activated to work? <code>no</code></li> </ul> <p>Codeception will build the suites for the first time and should be ready to go.</p>"},{"location":"v3/tutorials/wamp-setup/#setting-up-the-starting-database-fixture","title":"Setting up the starting database fixture","text":"<p>A \"fixture\", in testing terms, is a minimal, starting environment shared by all tests. In BDD it's the <code>Background</code> any scenario will share. In the case of a plugin the minimal, starting environment is the following:</p> <ul> <li>A fresh WordPress installation empty of any content.</li> <li>WordPress using its default theme.</li> <li>The only active plugin is the one you're testing, in this example: <code>my-plugin</code>.</li> </ul> <p>You should set up this fixture \"manually\", using the site administration UI at <code>http://localhost/wp/wp-admin</code>.</p> <p>The following command will empty the site, backup any content you care about first!</p> <p>When you're done setting up the initial database fixture, export it using the \"Export\" tab of phpMyAdmin, at <code>http://localhost/phpmyadmin/</code> and move the file to the <code>C:\\wamp64\\www\\wp\\wp-content\\plugins\\my-plugin\\tests\\_data\\dump.sql</code> directory.</p> <p>There is one last step left to complete the setup.</p>"},{"location":"v3/tutorials/wamp-setup/#using-the-tests-database-in-acceptance-and-functional-tests","title":"Using the tests database in acceptance and functional tests","text":"<p>Acceptance and functional tests will act as users, navigating to the site pages and making requests as a user would.  </p> <p>This means that WordPress will load, and with it its <code>wp-config.php</code> file, to handle the requests made by the tests.  </p> <p>During the setup phase I've specified the database to be used for <code>acceptance</code> and <code>functional</code> tests as <code>tests</code> but, looking at the contents of the <code>C:\\wamp64\\www\\wp\\wp-config.php</code> file, the <code>DB_NAME</code> constant is set to <code>wordpress</code>.  </p> <p>What we'll do now means:</p> <ul> <li>If the request is a normal one, use the <code>wordpress</code> database.</li> <li>If the request comes from a test, use the <code>tests</code> database.</li> </ul> <p>In your IDE/text-editor of choice edit the <code>C:\\wamp64\\www\\wp\\wp-config.php</code> and replace the line defining the <code>DB_NAME</code> constant like this:</p> <pre><code>- define( 'DB_NAME', 'wordpress' );\n+ if( isset( $_SERVER['HTTP_X_WPBROWSER_REQUEST'] ) &amp;&amp; $_SERVER['HTTP_X_WPBROWSER_REQUEST'] ) { \n+    define( 'DB_NAME', 'tests' );\n+ } else {\n+    define( 'DB_NAME', 'wordpress' );\n+ }\n</code></pre> <p>Here's the copy-and-paste friendly version:</p> <pre><code>if( isset( $_SERVER['HTTP_X_TEST_REQUEST'] ) &amp;&amp; $_SERVER['HTTP_X_TEST_REQUEST'] ) {\n        define( 'DB_NAME', 'tests' );\n} else {\n        define( 'DB_NAME', 'wordpress' );\n}\n</code></pre> <p>If you look at the <code>tests/acceptance.suite.yml</code> and <code>tests/functional.suite.yml</code> files, respectively the <code>acceptance</code> and <code>functional</code> suite configuration files, you will see these entries in the <code>WPBrowser</code> module configuration:</p> <pre><code>headers:\n    X_TEST_REQUEST: 1\n    X_WPBROWSER_REQUEST: 1\n</code></pre> <p>This means that, with each HTTP request done during tests, the module will send the two headers. Those headers are read, on the WordPress side, using the <code>$_SERVER['HTTP_X_TEST_REQUEST']</code> and <code>$_SERVER['X_WPBROWSER_REQUEST']</code> variables.</p> <p>Codeception and wp-browser are ready to run and the test-drive development can start.</p>"},{"location":"v3/tutorials/wamp-setup/#sanity-check","title":"Sanity check","text":"<p>Before starting to write tests, take a moment to run each suite separately and make sure all is set up correctly.  </p> <p>If you run into issues, there's a chance you forgot something along the way, please take the time to read this tutorial a second time before opening an issue.</p> <p>You have created 4 suites, each suite has at least one example test to make sure all works. Run each suite and make sure all tests succeed, from within the box run:</p> <pre><code>cd C:\\wamp64\\www\\wp\\wp-content\\plugins\\my-plugin \nvendor/bin/codecept run acceptance\nvendor/bin/codecept run functional\nvendor/bin/codecept run wpunit\nvendor/bin/codecept run unit\n</code></pre> <p>You're now run to customize the suites to your liking or start writing tests, run <code>vendor/bin/codecept.bat</code> to see a list of the available commands.</p>"}]}