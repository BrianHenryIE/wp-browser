diff --git a/includes/core-phpunit/includes/abstract-testcase.php b/includes/core-phpunit/includes/abstract-testcase.php
index f2978644..5c823a53 100644
--- a/includes/core-phpunit/includes/abstract-testcase.php
+++ b/includes/core-phpunit/includes/abstract-testcase.php
@@ -1,5 +1,7 @@
 <?php
 
+use lucatume\WPBrowser\TestCase\WPTestCase;
+
 require_once __DIR__ . '/factory.php';
 require_once __DIR__ . '/trac.php';
 
@@ -20,6 +22,8 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 	protected $expected_doing_it_wrong = array();
 	protected $caught_doing_it_wrong   = array();
 
+    private static ?string $calledClass = null;
+
 	protected static $hooks_saved = array();
 	protected static $ignore_files;
 
@@ -37,7 +41,7 @@ abstract class WP_UnitTestCase_Base extends PHPUnit_Adapter_TestCase {
 	 *
 	 * @return WP_UnitTest_Factory The fixture factory.
 	 */
-	protected static function factory() {
+	public static function factory() {
 		static $factory = null;
 		if ( ! $factory ) {
 			$factory = new WP_UnitTest_Factory();
@@ -53,7 +57,7 @@ protected static function factory() {
 	 * @return string The class name.
 	 */
 	public static function get_called_class() {
-		return get_called_class();
+		return self::$called_class ?? get_called_class();
 	}
 
 	/**
@@ -66,10 +70,14 @@ public static function set_up_before_class() {
 
 		$wpdb->suppress_errors = false;
 		$wpdb->show_errors     = true;
-		$wpdb->db_connect();
-		ini_set( 'display_errors', 1 );
+        if ( WPTestCase::isStrictAboutWpdbConnectionId() && $wpdb->get_var( 'SELECT CONNECTION_ID()' ) !== WPTestCase::getWpdbConnectionId() ) {
+            self::fail( 'The database connection went away. A `setUpBeforeClassMethod` likely closed the connection.' );
+        } else {
+            $wpdb->check_connection(false);
+        }
+        ini_set( 'display_errors', 1 );
 
-		$class = get_called_class();
+		$class = self::$calledClass ?? get_called_class();
 
 		if ( method_exists( $class, 'wpSetUpBeforeClass' ) ) {
 			call_user_func( array( $class, 'wpSetUpBeforeClass' ), static::factory() );
@@ -82,7 +90,7 @@ public static function set_up_before_class() {
 	 * Runs the routine after all tests have been run.
 	 */
 	public static function tear_down_after_class() {
-		$class = get_called_class();
+        $class = self::$calledClass ?? get_called_class();
 
 		if ( method_exists( $class, 'wpTearDownAfterClass' ) ) {
 			call_user_func( array( $class, 'wpTearDownAfterClass' ) );
@@ -543,16 +551,31 @@ public function wp_die_handler( $message, $title, $args ) {
 	 * @since 3.7.0
 	 */
 	public function expectDeprecated() {
-		if ( method_exists( $this, 'getAnnotations' ) ) {
-			// PHPUnit < 9.5.0.
-			$annotations = $this->getAnnotations();
-		} else {
-			// PHPUnit >= 9.5.0.
-			$annotations = \PHPUnit\Util\Test::parseTestMethodAnnotations(
-				static::class,
-				$this->getName( false )
-			);
-		}
+        if ( method_exists( $this, 'getAnnotations' ) ) {
+            // PHPUnit < 9.5.0.
+            $annotations = $this->getAnnotations();
+        } else if( version_compare(tests_get_phpunit_version(),'10.0.0','<')) {
+            // PHPUnit >= 9.5.0 < 10.0.0.
+            $annotations = \PHPUnit\Util\Test::parseTestMethodAnnotations(
+                static::class,
+                $this->getName( false )
+            );
+        } else {
+            // PHPUnit >= 10.0.0.
+            if (method_exists(static::class, $this->name())) {
+                $reflectionMethod = new \ReflectionMethod(static::class, $this->name());
+                $docBlock = \PHPUnit\Metadata\Annotation\Parser\DocBlock::ofMethod($reflectionMethod);
+                $annotations = [
+                    'method' => $docBlock->symbolAnnotations(),
+                    'class' => [],
+                ];
+            } else {
+                $annotations = [
+                    'method' => null,
+                    'class' => [],
+                ];
+            }
+        }
 
 		foreach ( array( 'class', 'method' ) as $depth ) {
 			if ( ! empty( $annotations[ $depth ]['expectedDeprecated'] ) ) {
@@ -651,7 +674,7 @@ public function expectedDeprecated() {
 	 *
 	 * @since 4.2.0
 	 */
-	protected function assert_post_conditions() {
+	public function assert_post_conditions() {
 		$this->expectedDeprecated();
 	}
 
@@ -1660,4 +1683,9 @@ public static function touch( $file ) {
 
 		touch( $file );
 	}
+
+	public function setCalledClass(string $class): void
+	{
+		self::$calledClass = $class;
+	}
 }
