#!/usr/bin/env bash

SUPPORTED_PHP_VERSIONS=(8.0 8.1 8.2)
SUPPORTED_CODECEPTION_VERSIONS=(5)

function print_help() {
  echo "Usage: $0 [-p PHP_VERSION] [-c CODECEPTION_VERSION] [-drh] [--] [COMMAND]"
  echo "  -p<PHP_VERSION>         The PHP version to use. Default: 8.0"
  echo "  -c<CODECEPTION_VERSION> The Codeception version to use. Default: 5"
  echo "  -d                      Enable debug mode."
  echo "  -r                      Access container as root."
  echo "  -h                      Display this help message."
  echo "Supported COMMANDs"
  echo "  build                 Build the images for the specified PHP version."
  echo "  clean                 Remove the containers and images, remove the wordpress installation."
  echo "  composer_update       Update the composer dependencies for the specified PHP and Codeception version."
  echo "  config                Show the docker compose configuration for the specified PHP version."
  echo "  create_macos_ramdisk  Create a RAM disk for the /var directory on macOS."
  echo "  dc                    Execute a docker compose command fore the specified PHP version."
  echo "  clean_tmp             Remove the var/tmp directory."
  echo "  deep_clean            Like clean, additionally remove the /var directory."
  echo "  down                  Tears down the containers for the specified PHP version."
  echo "  exec                  Execute a command in a service for the specified PHP version."
  echo "  logs                  Show the logs of the containers for the specified PHP version."
  echo "  macos_overrides       Apply macOS specific overrides to the docker compose configuration."
  echo "  remove_macos_ramdisk  Remove the RAM disk for the /var directory on macOS."
  echo "  ps                    Show the status of the containers for the specified PHP version."
  echo "  ssh                   SSH into a service for the specified PHP version."
  echo "  up                    Starts the containers for the specified PHP version."
  echo "  xdebug-off            Deactivates XDebug in the WordPress and Codeception service."
  echo "  xdebug-on             Activates XDebug in the WordPress and Codeception service."
}

# Parse the arguments using getopts
while getopts "p:c:hdrt" opt; do
  case $opt in
  p)
    PHP_VERSION=$OPTARG
    ;;
  c)
    CODECEPTION_VERSION=$OPTARG
    ;;
  r)
    ROOT=1
    ;;
  d)
    set -x
    ;;
  h)
    print_help
    exit 0
    ;;
  t)
    THOROUGH_CLEAN=1
    ;;
  \?)
    echo "Invalid option: -$OPTARG" >&2
    print_help
    exit 1
    ;;
  :)
    echo "Option -$OPTARG requires an argument." >&2
    print_help
    exit 1
    ;;
  esac
done

shift $((OPTIND - 1))

[ "${1:-}" = "--" ] && shift

PHP_VERSION=${PHP_VERSION:-8.0}
# If the PHP version is not supported, exit with an error.
if [[ ! " ${SUPPORTED_PHP_VERSIONS[@]} " =~ " ${PHP_VERSION} " ]]; then
  echo "PHP version ${PHP_VERSION} is not supported."
  echo "Supported PHP versions: ${SUPPORTED_PHP_VERSIONS[@]}"
  exit 1
fi

CODECEPTION_VERSION=${CODECEPTION_VERSION:-5}
# If the Codeception version is not supported, exit with an error.
if [[ ! " ${SUPPORTED_CODECEPTION_VERSIONS[@]} " =~ " ${CODECEPTION_VERSION} " ]]; then
  echo "Codeception version ${CODECEPTION_VERSION} is not supported."
  echo "Supported Codeception versions: ${SUPPORTED_CODECEPTION_VERSIONS[@]}"
  exit 1
fi

TEST_DATABASES=(wordpress test_subdir test_subdomain test_empty)

export PHP_VERSION=${PHP_VERSION:-8.0}
export CODECEPTION_VERSION=${CODECEPTION_VERSION:-5}
export USER_UID=$(id -u)
export USER_GID=$(id -g)
export USER_NAME=$(id -un)
export PWD="$(pwd)"

function ensure_twentytwenty_theme() {
  if [ -d "${PWD}/var/wordpress/wp-content/themes/twentytwenty" ]; then
    return
  fi

  # Download and install the twentytwenty theme.
  curl -sSL https://downloads.wordpress.org/theme/twentytwenty.2.1.zip -o "${PWD}/var/wordpress/wp-content/themes/twentytwenty.zip" || exit 1
  unzip -q "${PWD}/var/wordpress/wp-content/themes/twentytwenty.zip" -d "${PWD}/var/wordpress/wp-content/themes/" || exit 1
}

function ensure_test_databases() {
  # Create the test databases, use a for loop and exit on failure.
  for database in "${TEST_DATABASES[@]}"; do
    docker compose exec -T database mysql -uroot -ppassword -e "CREATE DATABASE IF NOT EXISTS ${database}" || exit 1
  done
}

function ensure_wordpress_scaffolded() {
  if [ ! -d "${PWD}/var/wordpress" ]; then
    mkdir -p "${PWD}/var/wordpress" || exit 1
  fi

  if [ ! -f "${PWD}/var/wordpress-latest.tar.gz" ]; then
    if ! curl -s -o "${PWD}/var/wordpress-latest.tar.gz" https://wordpress.org/latest.tar.gz; then
      echo "Failed to download the latest WordPress version."
      exit 1
    fi
  fi

  if [ ! -f "${PWD}/var/wordpress/wp-config-sample.php" ]; then
    if ! tar -xzf "${PWD}/var/wordpress-latest.tar.gz" -C "${PWD}/var/wordpress" --strip-components=1; then
      echo "Failed to unzip the latest WordPress version."
      exit 1
    fi
  fi
}

function run_wp_cli_command() {
  docker run --rm -v "${PWD}/var/wordpress:/var/www/html" \
    --network "wpbrowser_php_${PHP_VERSION}" \
    -w /var/www/html \
    -u "${USER_UID}:${USER_GID}" \
    "wp-browser-wordpress:php${PHP_VERSION}-apache" \
    wp --allow-root --url=http://wordpress.test --path=/var/www/html "$@"
}

function ensure_wordpress_configured() {
  if [ -f "${PWD}/var/wordpress/wp-config.php" ]; then
    return
  fi

  # If the var/wordpress/wp-config.php file is not found, configure WordPress using wp-cli.
  # Configure WordPress using wp-cli.
  if ! docker run --rm -v "${PWD}/var/wordpress:/var/www/html" \
    --network "wpbrowser_php_${PHP_VERSION}" \
    -w /var/www/html \
    -u "${USER_UID}:${USER_GID}" \
    "wp-browser-wordpress:php${PHP_VERSION}-apache" \
    bash -c "wp --allow-root core config --dbname=wordpress --dbuser=root --dbpass=password --dbhost=database --dbprefix=wp_ --extra-php <<PHP
define( 'WP_DEBUG', true );
define( 'WP_DEBUG_LOG', true );
define( 'WP_DEBUG_DISPLAY', false );
define( 'DISABLE_CRON', true );
define( 'WP_HTTP_BLOCK_EXTERNAL', true );
PHP"; then
    echo "Failed to configure WordPress."
    exit 1
  fi
}

function ensure_wordpress_installed() {
  # If WordPress is already installed, then return. Use wp-cli to check if WordPress is installed.
  if run_wp_cli_command core is-installed; then
    return
  fi

  # The above check might have failed due to the site not being installed on this PHP version database.
  # If the installed.sql file exists, then import it.
  if [ -f "${PWD}/var/wordpress/installed.sql" ]; then
    run_wp_cli_command db import "/var/www/html/installed.sql" || exit 1
    return
  fi

  # Install WordPress using wp-cli.
  if ! run_wp_cli_command core install --url=http://wordpress.test --title="TEST" --admin_user=admin --admin_password=password --admin_email=admin@wordpress.test --skip-email; then
    echo "Failed to install WordPress."
    exit 1
  fi

  # Convert the site to multisite using wp-cli.
  if ! run_wp_cli_command core multisite-convert; then
    echo "Failed to convert the site to multisite."
    exit 1
  fi

  # Export the database to the installed.sql file to speed up future builds.
  run_wp_cli_command db export "/var/www/html/installed.sql" || exit 1
}

function build() {
  [ ! -d "${PWD}/var/cache/composer" ] && mkdir -p "${PWD}/var/cache/composer"
  docker compose pull --ignore-buildable || exit 1
  docker compose build wordpress || exit 1
  docker compose build codecept || exit 1
  docker compose up -d --force-recreate --wait database || exit 1
  ensure_wordpress_scaffolded
  ensure_wordpress_configured
  ensure_wordpress_installed
  docker compose up -d --wait wordpress
  docker compose up -d --wait chrome
  docker compose up -d --wait codecept
  ensure_test_databases
  ensure_twentytwenty_theme
}

function clean() {
  for version in "${SUPPORTED_PHP_VERSIONS[@]}"; do
    PHP_VERSION=$version docker compose down -v
    PHP_VERSION=$version docker compose rm -f
    docker rmi "wp-browser-wordpress:php${version}-apache"
    docker rmi "wp-browser-wordpress:php${version}-codeception"
  done

  rm -rf var/wordpress
}

function clean_tmp() {
  if [[ "$OSTYPE" == "darwin"* ]] && [ -f docker-compose.override.yml ] && [ -d /Volumes/WP-Browser-Ram-Disk/ ]; then
    rm -rf /Volumes/WP-Browser-Ram-Disk/*
  else
    rm -rf "$(pwd)/var/tmp"
  fi
}

function config() {
  docker compose config
}

function composer_update() {
  docker compose exec \
    -u "$(id -u):$(id -g)" \
    -w "$(pwd)" \
    codecept \
    bash -c "composer update --with codeception/codeception:^${CODECEPTION_VERSION}.0"
}

function run_tests() {
  ensure_test_databases
  xdebug_off
  suites=$(find "${PWD}/tests" -name '*.suite.dist.yml' -print0 | xargs -0 -n1 basename | cut -d. -f1)
  for suite in $suites; do
    echo "Running tests for suite $suite ... "
    echo "=============================================================================="
    docker compose exec -u "$(id -u):$(id -g)" -w "$(pwd)" \
      codecept bash -c "php vendor/bin/codecept run $suite --ext DotReporter" || exit 1
  done
}

function xdebug_off() {
  docker compose exec -u "$(id -u):$(id -g)" wordpress bash xdebug-off || exit 1
  docker compose exec -u "$(id -u):$(id -g)" codecept bash xdebug-off || exit 1
}

function xdebug_on() {
  docker compose exec -u "$(id -u):$(id -g)" wordpress bash xdebug-on || exit 1
  docker compose exec -u "$(id -u):$(id -g)" codecept bash xdebug-on || exit 1
}

function create_macos_ramdisk() {
  if [[ "$OSTYPE" != "darwin"* ]]; then
    echo "Not a macOs system."
    return
  fi

  if [ -d "/Volumes/WP-Browser-Ram-Disk" ]; then
    echo "The /Volumes/WP-Browser-Ram-Disk directory already exists: skipping creation."
    return
  fi

  echo "Creating a 6Gb RAM disk at /Volumes/WP-Browser-Ram-Disk ..."
  sudo diskutil erasevolume HFS+ "WP-Browser-Ram-Disk" $(hdiutil attach -nomount ram://12582912) || exit 1
}

function remove_macos_ramdisk() {
  if [[ "$OSTYPE" != "darwin"* ]]; then
    echo "Not a macOs system."
    return
  fi

  if [ ! -d "/Volumes/WP-Browser-Ram-Disk" ]; then
    echo "The /Volumes/WP-Browser-Ram-Disk directory does not exist."
    return
  fi

  echo "Removing the /Volumes/WP-Browser-Ram-Disk volume and directory ..."
  diskutil unmount force /Volumes/WP-Browser-Ram-Disk &&
    rm -rf /Volumes/WP-Browser-Ram-Disk || exit 1
}

function place_docker_compose_macos_overrides() {
  if [[ "$OSTYPE" != "darwin"* ]]; then
    echo "Not a macOs system."
    return
  fi

  cp config/docker-compose.macos-override.yml docker-compose.override.yml
}

COMMAND=${1:-help}

case $COMMAND in
build)
  build
  ;;
clean)
  clean
  remove_macos_ramdisk
  rm -f docker-compose.override.yml
  ;;
clean_tmp)
  clean_tmp
  ;;
composer_update)
  composer_update
  ;;
config)
  config
  ;;
create_macos_ramdisk)
  create_macos_ramdisk
  ;;
dc)
  shift
  docker compose "${@}"
  ;;
deep_clean)
  clean
  rm -rf var && mkdir -p var
  ;;
down)
  shift
  docker compose down "${@}"
  ;;
exec)
  service=${2:-codecept}
  docker compose exec -u "$(id -u):$(id -g)" -it -w "$(pwd)" "$service" "${@:2}"
  ;;
help)
  print_help
  ;;
logs)
  docker compose logs -f
  ;;
macos_overrides)
  create_macos_ramdisk
  place_docker_compose_macos_overrides
  ;;
ps)
  docker compose ps
  ;;
remove_macos_ramdisk)
  remove_macos_ramdisk
  ;;
ssh)
  service=${2:-codecept}
  # If ROOT is set, set the user to "0:0", else set the user to the current user.
  if [ "${ROOT}" ]; then
    docker_user="0:0"
  else
    docker_user="$(id -u):$(id -g)"
  fi
  docker compose exec -u "${docker_user}" -it "$service" bash
  ;;
test)
  run_tests
  ;;
up)
  shift
  docker compose up "${@}"
  ;;
xdebug-off)
  xdebug_off
  ;;
xdebug-on)
  xdebug_on
  ;;
*)
  echo "Unknown command: ${COMMAND}"
  print_help
  ;;
esac
