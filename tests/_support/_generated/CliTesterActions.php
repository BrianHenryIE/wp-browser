<?php  //[STAMP] c9de177c8f7d83d52ffb3c04a53b63ac
// phpcs:ignoreFile
namespace _generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build

use Codeception\Scenario;
use Codeception\Step\Action;
use Codeception\Step\Assertion;
use Codeception\Step\Condition;
use Codeception\Step\ConditionalAssertion;

trait CliTesterActions
{
    /**
     * @return Scenario
     */
    abstract protected function getScenario(): Scenario;


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Executes a shell command.
     * Fails if exit code is > 0. You can disable this by passing `false` as second argument
     *
     * ```php
     * <?php
     * $I->runShellCommand('phpunit');
     *
     * // do not fail test when command fails
     * $I->runShellCommand('phpunit', false);
     * ```
     * @see \Codeception\Module\Cli::runShellCommand()
     */
    public function runShellCommand(string $command, bool $failNonZero = true): void {
        $this->getScenario()->runStep(new Action('runShellCommand', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that output from last executed command contains text
     * @see \Codeception\Module\Cli::seeInShellOutput()
     */
    public function seeInShellOutput(string $text): void {
        $this->getScenario()->runStep(new Assertion('seeInShellOutput', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that output from last executed command contains text
     * @see \Codeception\Module\Cli::seeInShellOutput()
     */
    public function canSeeInShellOutput(string $text): void {
        $this->getScenario()->runStep(new ConditionalAssertion('seeInShellOutput', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that output from latest command doesn't contain text
     * @see \Codeception\Module\Cli::dontSeeInShellOutput()
     */
    public function dontSeeInShellOutput(string $text): void {
        $this->getScenario()->runStep(new Action('dontSeeInShellOutput', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that output from latest command doesn't contain text
     * @see \Codeception\Module\Cli::dontSeeInShellOutput()
     */
    public function cantSeeInShellOutput(string $text): void {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeInShellOutput', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @see \Codeception\Module\Cli::seeShellOutputMatches()
     */
    public function seeShellOutputMatches(string $regex): void {
        $this->getScenario()->runStep(new Assertion('seeShellOutputMatches', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     *
     * @see \Codeception\Module\Cli::seeShellOutputMatches()
     */
    public function canSeeShellOutputMatches(string $regex): void {
        $this->getScenario()->runStep(new ConditionalAssertion('seeShellOutputMatches', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Returns the output from latest command
     * @see \Codeception\Module\Cli::grabShellOutput()
     */
    public function grabShellOutput(): string {
        return $this->getScenario()->runStep(new Action('grabShellOutput', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks result code. To verify a result code > 0, you need to pass `false` as second argument to `runShellCommand()`
     *
     * ```php
     * <?php
     * $I->seeResultCodeIs(0);
     * ```
     * @see \Codeception\Module\Cli::seeResultCodeIs()
     */
    public function seeResultCodeIs(int $code): void {
        $this->getScenario()->runStep(new Assertion('seeResultCodeIs', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks result code. To verify a result code > 0, you need to pass `false` as second argument to `runShellCommand()`
     *
     * ```php
     * <?php
     * $I->seeResultCodeIs(0);
     * ```
     * @see \Codeception\Module\Cli::seeResultCodeIs()
     */
    public function canSeeResultCodeIs(int $code): void {
        $this->getScenario()->runStep(new ConditionalAssertion('seeResultCodeIs', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks result code
     *
     * ```php
     * <?php
     * $I->seeResultCodeIsNot(0);
     * ```
     * @see \Codeception\Module\Cli::seeResultCodeIsNot()
     */
    public function seeResultCodeIsNot(int $code): void {
        $this->getScenario()->runStep(new Assertion('seeResultCodeIsNot', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks result code
     *
     * ```php
     * <?php
     * $I->seeResultCodeIsNot(0);
     * ```
     * @see \Codeception\Module\Cli::seeResultCodeIsNot()
     */
    public function canSeeResultCodeIsNot(int $code): void {
        $this->getScenario()->runStep(new ConditionalAssertion('seeResultCodeIsNot', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Enters a directory In local filesystem.
     * Project root directory is used by default
     * @see \Codeception\Module\Filesystem::amInPath()
     */
    public function amInPath(string $path): void {
        $this->getScenario()->runStep(new Condition('amInPath', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Opens a file and stores it's content.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeInThisFile('codeception/codeception');
     * ```
     * @see \Codeception\Module\Filesystem::openFile()
     */
    public function openFile(string $filename): void {
        $this->getScenario()->runStep(new Action('openFile', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Deletes a file
     *
     * ``` php
     * <?php
     * $I->deleteFile('composer.lock');
     * ```
     * @see \Codeception\Module\Filesystem::deleteFile()
     */
    public function deleteFile(string $filename): void {
        $this->getScenario()->runStep(new Action('deleteFile', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Deletes directory with all subdirectories
     *
     * ``` php
     * <?php
     * $I->deleteDir('vendor');
     * ```
     * @see \Codeception\Module\Filesystem::deleteDir()
     */
    public function deleteDir(string $dirname): void {
        $this->getScenario()->runStep(new Action('deleteDir', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Copies directory with all contents
     *
     * ``` php
     * <?php
     * $I->copyDir('vendor','old_vendor');
     * ```
     * @see \Codeception\Module\Filesystem::copyDir()
     */
    public function copyDir(string $src, string $dst): void {
        $this->getScenario()->runStep(new Action('copyDir', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks If opened file has `text` in it.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeInThisFile('codeception/codeception');
     * ```
     * @see \Codeception\Module\Filesystem::seeInThisFile()
     */
    public function seeInThisFile(string $text): void {
        $this->getScenario()->runStep(new Assertion('seeInThisFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks If opened file has `text` in it.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeInThisFile('codeception/codeception');
     * ```
     * @see \Codeception\Module\Filesystem::seeInThisFile()
     */
    public function canSeeInThisFile(string $text): void {
        $this->getScenario()->runStep(new ConditionalAssertion('seeInThisFile', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks If opened file has the `number` of new lines.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeNumberNewLines(5);
     * ```
     *
     * @param int $number New lines
     * @see \Codeception\Module\Filesystem::seeNumberNewLines()
     */
    public function seeNumberNewLines(int $number): void {
        $this->getScenario()->runStep(new Assertion('seeNumberNewLines', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks If opened file has the `number` of new lines.
     *
     * Usage:
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->seeNumberNewLines(5);
     * ```
     *
     * @param int $number New lines
     * @see \Codeception\Module\Filesystem::seeNumberNewLines()
     */
    public function canSeeNumberNewLines(int $number): void {
        $this->getScenario()->runStep(new ConditionalAssertion('seeNumberNewLines', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that contents of currently opened file matches $regex
     * @see \Codeception\Module\Filesystem::seeThisFileMatches()
     */
    public function seeThisFileMatches(string $regex): void {
        $this->getScenario()->runStep(new Assertion('seeThisFileMatches', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks that contents of currently opened file matches $regex
     * @see \Codeception\Module\Filesystem::seeThisFileMatches()
     */
    public function canSeeThisFileMatches(string $regex): void {
        $this->getScenario()->runStep(new ConditionalAssertion('seeThisFileMatches', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks the strict matching of file contents.
     * Unlike `seeInThisFile` will fail if file has something more than expected lines.
     * Better to use with HEREDOC strings.
     * Matching is done after removing "\r" chars from file content.
     *
     * ``` php
     * <?php
     * $I->openFile('process.pid');
     * $I->seeFileContentsEqual('3192');
     * ```
     * @see \Codeception\Module\Filesystem::seeFileContentsEqual()
     */
    public function seeFileContentsEqual(string $text): void {
        $this->getScenario()->runStep(new Assertion('seeFileContentsEqual', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks the strict matching of file contents.
     * Unlike `seeInThisFile` will fail if file has something more than expected lines.
     * Better to use with HEREDOC strings.
     * Matching is done after removing "\r" chars from file content.
     *
     * ``` php
     * <?php
     * $I->openFile('process.pid');
     * $I->seeFileContentsEqual('3192');
     * ```
     * @see \Codeception\Module\Filesystem::seeFileContentsEqual()
     */
    public function canSeeFileContentsEqual(string $text): void {
        $this->getScenario()->runStep(new ConditionalAssertion('seeFileContentsEqual', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks If opened file doesn't contain `text` in it
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->dontSeeInThisFile('codeception/codeception');
     * ```
     * @see \Codeception\Module\Filesystem::dontSeeInThisFile()
     */
    public function dontSeeInThisFile(string $text): void {
        $this->getScenario()->runStep(new Action('dontSeeInThisFile', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks If opened file doesn't contain `text` in it
     *
     * ``` php
     * <?php
     * $I->openFile('composer.json');
     * $I->dontSeeInThisFile('codeception/codeception');
     * ```
     * @see \Codeception\Module\Filesystem::dontSeeInThisFile()
     */
    public function cantSeeInThisFile(string $text): void {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeInThisFile', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Deletes a file
     * @see \Codeception\Module\Filesystem::deleteThisFile()
     */
    public function deleteThisFile(): void {
        $this->getScenario()->runStep(new Action('deleteThisFile', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if file exists in path.
     * Opens a file when it's exists
     *
     * ``` php
     * <?php
     * $I->seeFileFound('UserModel.php','app/models');
     * ```
     * @see \Codeception\Module\Filesystem::seeFileFound()
     */
    public function seeFileFound(string $filename, string $path = ""): void {
        $this->getScenario()->runStep(new Assertion('seeFileFound', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if file exists in path.
     * Opens a file when it's exists
     *
     * ``` php
     * <?php
     * $I->seeFileFound('UserModel.php','app/models');
     * ```
     * @see \Codeception\Module\Filesystem::seeFileFound()
     */
    public function canSeeFileFound(string $filename, string $path = ""): void {
        $this->getScenario()->runStep(new ConditionalAssertion('seeFileFound', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if file does not exist in path
     * @see \Codeception\Module\Filesystem::dontSeeFileFound()
     */
    public function dontSeeFileFound(string $filename, string $path = ""): void {
        $this->getScenario()->runStep(new Action('dontSeeFileFound', func_get_args()));
    }
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * [!] Conditional Assertion: Test won't be stopped on fail
     * Checks if file does not exist in path
     * @see \Codeception\Module\Filesystem::dontSeeFileFound()
     */
    public function cantSeeFileFound(string $filename, string $path = ""): void {
        $this->getScenario()->runStep(new ConditionalAssertion('dontSeeFileFound', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Erases directory contents
     *
     * ``` php
     * <?php
     * $I->cleanDir('logs');
     * ```
     * @see \Codeception\Module\Filesystem::cleanDir()
     */
    public function cleanDir(string $dirname): void {
        $this->getScenario()->runStep(new Action('cleanDir', func_get_args()));
    }


    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Saves contents to file
     * @see \Codeception\Module\Filesystem::writeToFile()
     */
    public function writeToFile(string $filename, string $contents): void {
        $this->getScenario()->runStep(new Action('writeToFile', func_get_args()));
    }
}
