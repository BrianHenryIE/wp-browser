#!/bin/bash
# Stops the stacks images.

source utils.sh

render_dockerfile() {
    local php_version=$1
    local xdebug_version=$(get_xdebug_version ${php_version})
    local php_extensions=$(get_php_extensions ${php_version})

    sedStr="
      s!{{php_version}}!$php_version!g;
      s!{{xdebug_version}}!$xdebug_version!g;
      s!{{php_extensions}}!$php_extensions!g;
    "

    sed "$sedStr" $2
}

# Some defaults
OUTPUT_COMMAND=0
PHP_VERSION=${PHP_VERSION:-5.6}
XDEBUG_VERSION=${XDEBUG_VERSION:-5.5}
XDEBUG_VERSION_STRING=''

# Check for positional arguments
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
	-h|--help)
	echo "Rebuilds the stack images.

Usage: stack-build [-o|--output-command]
--php-version       Defines the PHP version that should be used to
                    in the WordPress container; one of 5.6, 7.0, 7.1, 7.2.
-o|--output-command Outputs the command instead of running it."
	exit 0
	;;
    --php-version)
    shift # past argument
    PHP_VERSION=$1
    shift # past value
   	;;
    -o|--output-command)
    OUTPUT_COMMAND=1
    shift # past argument
   	;;
    *) # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

# Check the PHP version to make sure it's supported.
available_php_versions=( "5.6" "7.0" "7.1" "7.2" )
found=0

for version in "${available_php_versions[@]}"; do
    if [[ $PHP_VERSION == $version ]]; then
        found=1
        break
    fi
done

if [[ $found == 0 ]]; then
    echo "The PHP version specified with the --php-version option ($PHP_VERSION) is not valid."
    echo Supported PHP versions are $(implode ", " "${available_php_versions[@]}").
    exit 1;
fi

# Depending on the PHP Version we set he XDebub version.
XDEBUG_VERSION=$(get_xdebug_version ${PHP_VERSION})

echo OUTPUT_COMMAND  = "${OUTPUT_COMMAND}"
echo PHP_VERSION = "${PHP_VERSION}"
echo XDEBUG_VERSION = "${XDEBUG_VERSION}"

SCRIPTDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
cd "$SCRIPTDIR";

if [[ "$OSTYPE" == "darwin"* ]]; then
	COMPOSE="docker-compose"
elif [[ $(which docker.exe) ]]; then
	COMPOSE="docker-compose.exe"
else
	COMPOSE="docker-compose"
fi;

if [ ${OUTPUT_COMMAND} -eq 1 ]; then
    if [[ -n ${XDEBUG_VERSION} ]]; then
       XDEBUG_VERSION_STRING="XDEBUG_VERSION=${XDEBUG_VERSION} "
    fi
    PHP_VERSION_STRING="PHP_VERSION=${PHP_VERSION}"

	echo "Command: ${XDEBUG_VERSION_STRING}${PHP_VERSION_STRING} ${COMPOSE} -f stack.yml build $@"

	exit 0
fi

render_dockerfile ${PHP_VERSION} ./wordpress/Dockerfile.tpl > ./wordpress/Dockerfile

${COMPOSE} -f stack.yml build "$@"
