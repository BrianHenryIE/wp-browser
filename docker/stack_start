#!/bin/bash
# Starts the stack with options.

# Some Defaults
OUTPUT_COMMAND=0
WITH_XDEBUG=0
XDEBUG_REMOTE_HOST=''
WP_ROOT=/var/www/html
WP_PORT=8081
DB_PORT=4407
MH_PORT=9026
ADMINER_PORT=8091
CHROMEDRIVER_PORT=4444
# Force container recreation
FORCE=" --force-recreate --always-recreate-deps --renew-anon-volumes --remove-orphans"
CACHING=''
COMPOSER_UPDATE=1


# Check for positional arguments
POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
	-h|--help)
	echo "Start the CI stack with options.

Usage: start [-x|--with-xdebug] [-o|--output-command] [--wp-port <port>]
           [--db-port <port>] [--mh-port <port>] [--caching <caching>]
           [--no-composer-update]

-w|--wp-root 	     Bind the specified local folder as root folder of the WordPress
					 installation in the container; escape spaces in the path prepending
					 a '\' char. If no WordPress installation is bound then the container
					 will download, configure and install a fresh copy of the latest WordPress
					 version.
-x|--with-xdebug     Starts the stack activating XDebug; uses the get_ip
			         script to fetch the host machine IP address.
-o|--output-command  Outputs the command instead of running it.
--wp-port            Sets the stack WordPress HTTP port value; defaults to 8081.
--db-port            Sets the stack Database port value; defaults to 4407.
--mh-port            Sets the stack Mailhog Web UI port; defaults to 9026.
--cd-port            Sets the stack Chmromedriver port; defaults to 4444.
--adminer-port       Sets the stack Adminer Web UI port; defaults to 8091.
--caching            Sets the volumes caching mode, see https://docs.docker.com/compose/compose-file/#caching-options-for-volume-mounts-docker-for-mac  for more information; defaults to none and use the Docker default method.
--no-composer-update Do not run composer update in the project folder during the container start phase.
"
	exit 0
	;;
    -x|--with-xdebug)
    WITH_XDEBUG=1
   	export XDEBUG_REMOTE_HOST=$(source get_ip)
    shift # past argument
    ;;
    -w|--wp-root)
    shift # past argument
   	WP_ROOT="$1"
   	export WP_ROOT="${WP_ROOT}"
    shift # past value
    ;;
    --wp-port)
    shift # past arg
    WP_PORT="$1"
    shift # past value
    ;;
    --db-port)
    shift # past arg
    DB_PORT="$1"
    shift # past value
    ;;
    --mh-port)
    shift # past arg
    MH_PORT="$1"
    shift # past value
    ;;
    --adminer-port)
    shift # past arg
    ADMINER_PORT="$1"
    shift # past value
    ;;
    --caching)
    shift # past arg
    CACHING="$1"
    shift # past value
    ;;
    --no-composer-update)
    shift # past arg
    COMPOSER_UPDATE=0
    ;;
    -o|--output-command)
    OUTPUT_COMMAND=1
    shift # past argument
   	;;
    *) # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

echo WITH_XDEBUG  = "${WITH_XDEBUG}"
if [ $WITH_XDEBUG -eq 1 ]; then
	echo XDEBUG_REMOTE_HOST  = "${XDEBUG_REMOTE_HOST}"
fi
echo OUTPUT_COMMAND  = "${OUTPUT_COMMAND}"
echo WP_ROOT = "${WP_ROOT}"
echo WP_PORT = "${WP_PORT}"
echo DB_PORT = "${DB_PORT}"
echo MH_PORT = "${MH_PORT}"
echo ADMINER_PORT = "${ADMINER_PORT}"
echo CACHING = "${CACHING}"
echo COMPOSER_UPDATE = "${COMPOSER_UPDATE}"

SCRIPTDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
cd "$SCRIPTDIR";

if [[ "$OSTYPE" == "darwin"* ]]; then
	COMPOSE="docker-compose"
elif [[ $(which docker.exe) ]]; then
	COMPOSE="docker-compose.exe"
else
	COMPOSE="docker-compose"
fi;

if [ ${OUTPUT_COMMAND} -eq 1 ]; then
	HOST_LINE=""
	WP_LINE=""
	VAR_LINE="WP_PORT=${WP_PORT} DB_PORT=${DB_PORT} MH_PORT=${MH_PORT} ADMINER_PORT=${ADMINER_PORT} CACHING=${CACHING} COMPOSER_UPDATE=${COMPOSER_UPDATE} CHROMEDRIVER_PORT=${CHROMEDRIVER_PORT}"

	if [ ${WITH_XDEBUG} -eq 1 ]; then
		HOST_LINE="XDEBUG_REMOTE_HOST=${XDEBUG_REMOTE_HOST} "
	fi

	if [ "$WP_ROOT" != '' ]; then
		WP_LINE="WP_ROOT=${WP_ROOT} "
	fi


	echo "Command: ${VAR_LINE} ${HOST_LINE}${WP_LINE}${COMPOSE} -f stack.yml up${FORCE}"

	exit 0
fi

export WP_PORT="${WP_PORT}"
export DB_PORT="${DB_PORT}"
export MH_PORT="${MH_PORT}"
export ADMINER_PORT="${ADMINER_PORT}"
export CACHING="${CACHING}"
export COMPOSER_UPDATE="${COMPOSER_UPDATE}"
export CHROMEDRIVER_PORT=${CHROMEDRIVER_PORT}

${COMPOSE} -f stack.yml up${FORCE}
