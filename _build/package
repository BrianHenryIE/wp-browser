#!/usr/bin/env php
<?php
/**
 * Release a major, minor or patch update w/ release notes from the CHANGELOG.md file.
 */

namespace tad\WPBrowser\Cli;

use lucatume\Cli\App;
use lucatume\Cli\Command;
use lucatume\Cli\Models\Changelog;

$root = dirname(__DIR__);

require_once $root . '/vendor/autoload.php';

$app = new App('package', '1.0.0');
$app->addCommand(new Command(
    'release',
    'Release a new version of the package, requires git and hub CLI tools.',
    [
        'type' => 'The release type, one of major, minor or patch.',
        '[-f|--file=]' => 'The changelog file to use, defaults to CHANGELOG.md if not specified.',
        '[-d|--dry-run]' => 'Run the script in dry-run mode, without actually modifying anything.',
        '[--no-changelog-update]' => 'Skip the changelog file update.',
        '[--no-check-diff]' => 'Skip the check for uncommitted work in the current branch.',
        '[--no-check-unpushed]' => 'Skip the check for unpushed work between local and remote branch.',
        '[-q|--no-interactive]' => 'Run the script without requiring any interaction.'
    ]
));

$args = $app->parseElse(static function ($message) use ($app) {
    echo $message . "\n";
    $app->printHelp();
    exit(0);
});

$changelogFile = $args('file', $root . '/CHANGELOG.md');
$releaseType = $args('type', 'major');

if (!in_array($releaseType, ['major', 'minor', 'patch'], true)) {
    $app->styledOutput('<magenta>The release type has to be one of major, minor or patch.</magenta>');
    exit(1);
}

$dryRun = $args('dry-run', false);
$interactive = $args('no-interactive', false) === true;

if (!$dryRun) {
    $currentGitBranch = $app->exec(['git', 'rev-parse', '--abbrev-ref', 'HEAD']);
    if ($currentGitBranch !== 'master') {
        $app->styledOutput("<magenta>Can release only from master branch.</magenta>\n");
        exit(1);
    }
    $app->styledOutput("Current git branch: <green>{$currentGitBranch}</green>\n");
}

$changelog = new Changelog($changelogFile);
$nextVersion = $changelog->getNextVersion($releaseType);
$releaseNotes = $changelog->getNextVersionReleaseNotes($releaseType);
$latestVersion = $changelog->getLatestVersion();

$template = <<< TEMPLATE
Latest release: <green>%s</green>
Release type: <green>%s</green>
Next release: <green>%s</green>

Release notes: 

---
%s
---


TEMPLATE;

$app->styledOutput(sprintf($template, $latestVersion, $releaseType, $nextVersion, $releaseNotes));

if (!$args('no-changelog-update', false)) {
    $app->styledOutput($changelog->getUpdatePreview($nextVersion));

    if (!$dryRun && $interactive && $app->confirm("Would you like ot update the changelog?", true)) {
        $changelog->updateContents($nextVersion);
        passthru('git commit -m "doc(CHANGELOG.md) update to version ' . $version . '" -- ' . $changelog);
    }

}

if ($args('no-check-diff', true) && !$dryRun) {
    $gitDirty = trim(shell_exec('git diff HEAD'));
    if (!empty($gitDirty)) {
        echo "\e[31mYou have uncommited work.\e[0m\n";
        exit(1);
    }
}

function confirm($question)
{
    $question = "\n{$question} ";
    return preg_match('/y/i', readline($question));
}

if (!$args('no-check-unpushed', false) && !$dryRun) {
    $gitDiff = trim(shell_exec('git log origin/master..HEAD'));
    if (!empty($gitDiff)) {
        echo "\e[31mYou have unpushed changes.\e[0m\n";
        if (confirm('Would you like to push them now?')) {
            passthru('git push');
        } else {
            exit(1);
        }
    }
}

file_put_contents($root . '/.rel', $releaseNotes);

$releaseCommand = 'hub release create -F .rel ' . $nextVersion;

echo "Releasing with command: \e[32m" . $releaseCommand . "\e[0m\n\n";

if ($dryRun || $args('no-interactive', false) || confirm('Do you want to proceed?')) {
    if (!$dryRun) {
        passthru($releaseCommand);
    }
} else {
    echo "Canceling\n";
}

unlink($root . '/.rel');
