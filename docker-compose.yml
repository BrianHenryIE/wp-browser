# This file relies on a .env.testing configuration file to work.
# Debug this file values using the `docker-compose config` command and see what variable substitution would end up with.

version: "3"

networks:
  test:
    ipam:
      driver: default
      config:
        - subnet: "172.${TEST_SUBNET:-28}.0.0/16"

volumes:
  wordpress:
  wordpress_src:

services:

  db:
    image: mariadb
    env_file: .env.testing.docker
    networks:
      - test

  wordpress:
    image: wordpress:latest
    env_file: .env.testing.docker
    # Run as the current user.
    user: ${DOCKER_RUN_USER:-}:${DOCKER_RUN_GROUP:-}
    sysctls:
      # Allow any user to bind ports <= 1024.
      # This is required as we're running the container as the host user and that user might not be in the root
      # wheel in the container.
      net.ipv4.ip_unprivileged_port_start: 0
    entrypoint:
      # Modify the ENTRYPOINT, and as a consequence the COMMAND too, to create the `docker` user.
      # Apache will run as the user specified in the `user` parameter of the service.
      - /bin/bash
      - -c
      - |
        addgroup --gid 1000 docker
        adduser --uid 1000 --ingroup docker --home /home/docker --shell /bin/sh --disabled-password --gecos "" docker
        docker-entrypoint.sh apache2-foreground
    networks:
      test:
        ipv4_address: 172.${TEST_SUBNET:-28}.1.1
    depends_on:
      - db
    environment:
      WORDPRESS_CONFIG_EXTRA: |
        /* Multisite */
        define( 'DOMAIN_CURRENT_SITE', '${WORDPRESS_URL:-wordpress.test}' );
        define( 'WP_ALLOW_MULTISITE', true );
        define( 'MULTISITE', true );
        define( 'SUBDOMAIN_INSTALL', true );
        define( 'PATH_CURRENT_SITE', '/' );
        define( 'SITE_ID_CURRENT_SITE', 1 );
        define( 'BLOG_ID_CURRENT_SITE', 1 );
    volumes:
      - wordpress:/var/www/html:cached
      # Populate a second volume with WordPress source files.
      # See: https://github.com/docker-library/wordpress/blob/master/Dockerfile-debian.template
      - wordpress_src:/usr/src/wordpress:cached

  # This container will not start any web-server and will not try to configure WordPress database access: its sole
  # function is to provide WordPress source files.
  wordpress_src:
    image: wordpress:latest
    env_file: .env.testing.docker
    # Run as the current user.
    user: ${DOCKER_RUN_USER:-}:${DOCKER_RUN_GROUP:-}
    networks:
      test:
    # Make the WordPress files source directory world writeable, readable and executable, then exit.
    entrypoint: [ "chmod", "-R" ,"a+rwx", "/usr/src/wordpress" ]
    volumes:
      # Populate the volume with WordPress source files.
      # See: https://github.com/docker-library/wordpress/blob/master/Dockerfile-debian.template
      - wordpress_src:/usr/src/wordpress:cached

  chrome:
    image: selenium/standalone-chrome:3.141.59-oxygen
    env_file: .env.testing.docker
    networks:
      - test
    extra_hosts:
      - "wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "test1.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "test2.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "blog0.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "blog1.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "blog2.wordpress.test:172.${TEST_SUBNET:-28}.1.1"

  codeception:
    image: lucatume/codeception:cc3.1.0
    env_file: .env.testing.docker
    # Run as the current user.
    user: ${DOCKER_RUN_USER:-}:${DOCKER_RUN_GROUP:-}
    networks:
      - test
    extra_hosts:
      - "wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "test1.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "test2.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "blog0.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "blog1.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "blog2.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
    environment:
      FIXUID: "${FIXUID:-1}"
      # Add an arbitrary wait before launching the tests to wait for the database.
      CODECEPTION_WAIT: ${CODECEPTION_WAIT:-0}
      # Configure this to debug the tests with XDebug.
      PHP_IDE_CONFIG: "serverName=${XDK:-wpbrowser_cc}"
      XDEBUG_CONFIG: "idekey=${XDK:-wpbrowser_cc} remote_enable=${XDE:-1} remote_host=${XDH:-host.docker.internal} remote_port=${XDP:-9001}"
      # Setting this value to `1` will disable the XDebug extension completely.
      XDEBUG_DISABLE: ${XDEBUG_DISABLE:-0}
    depends_on:
      - wordpress
      - chrome
    volumes:
      - .:/project:cached
      - wordpress:/project/vendor/wordpress/wordpress:cached

  # Functional version of the Codeception container, w/o Chrome.
  ccf:
    image: lucatume/codeception:cc3.1.0
    env_file: .env.testing.docker
    # Run as the current user.
    user: ${DOCKER_RUN_USER:-}:${DOCKER_RUN_GROUP:-}
    networks:
      - test
    extra_hosts:
      - "wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "test1.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "test2.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "blog0.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "blog1.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "blog2.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
    environment:
      FIXUID: "${FIXUID:-1}"
      # Configure this to debug the tests with XDebug.
      # Add an arbitrary wait before launching the tests to wait for the database.
      PHP_IDE_CONFIG: "serverName=${XDK:-wpbrowser_cc}"
      XDEBUG_CONFIG: "idekey=${XDK:-wpbrowser_cc} remote_enable=${XDE:-1} remote_host=${XDH:-host.docker.internal} remote_port=${XDP:-9001}"
      # Setting this value to `1` will disable the XDebug extension completely.
      XDEBUG_DISABLE: ${XDEBUG_DISABLE:-0}
    depends_on:
      - wordpress
    volumes:
      - .:/project:cached
      - wordpress:/project/vendor/wordpress/wordpress:cached

  # The unit version of the Codeception container.
  ccu:
    image: lucatume/codeception:cc3.1.0
    env_file: .env.testing.docker
    # Run as the current user.
    user: ${DOCKER_RUN_USER:-}:${DOCKER_RUN_GROUP:-}
    networks:
      - test
    depends_on:
      # This container does not need a running installation of WordPress, just its source files.
      - wordpress_src
    environment:
      FIXUID: "${FIXUID:-1}"
      # Do not run any checks for the database or the web-server before running the tests.
      CODECEPTION_SKIP_DB_CHECK: 1
      CODECEPTION_SKIP_URL_CHECK: 1
      # Configure this to debug the tests with XDebug.
      PHP_IDE_CONFIG: "serverName=${XDK:-wpbrowser_cc}"
      XDEBUG_CONFIG: "idekey=${XDK:-wpbrowser_cc} remote_enable=${XDE:-1} remote_host=${XDH:-host.docker.internal} remote_port=${XDP:-9001}"
      # Setting this value to `1` will disable the XDebug extension completely.
      XDEBUG_DISABLE: ${XDEBUG_DISABLE:-0}
    volumes:
      - .:/project:cached
      # The unit tests will require the WordPress source files (to test extensions), pull then from the source files.
      - wordpress_src:/project/vendor/wordpress/wordpress:cached

  # The Codeception on PHP 5.6 container.
  cc56:
    image: lucatume/codeception-php-5.6
    env_file: .env.testing.docker
    # Run as the current user.
    user: ${DOCKER_RUN_USER:-}:${DOCKER_RUN_GROUP:-}
    networks:
      - test
    extra_hosts:
      - "wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "test1.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "test2.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "blog0.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "blog1.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
      - "blog2.wordpress.test:172.${TEST_SUBNET:-28}.1.1"
    environment:
      FIXUID: "${FIXUID:-1}"
      # Add an arbitrary wait before launching the tests to wait for the database.
      CODECEPTION_WAIT: ${CODECEPTION_WAIT:-3}
      # Configure this to debug the tests with XDebug.
      PHP_IDE_CONFIG: "serverName=${XDK:-wpbrowser_cc}"
      XDEBUG_CONFIG: "idekey=${XDK:-wpbrowser_cc} remote_enable=${XDE:-1} remote_host=${XDH:-host.docker.internal} remote_port=${XDP:-9001}"
      # Setting this value to `1` will disable the XDebug extension completely.
      XDEBUG_DISABLE: ${XDEBUG_DISABLE:-0}
    depends_on:
      - wordpress
      - chrome
    volumes:
      - .:/project:cached
      - wordpress:/project/vendor/wordpress/wordpress:cached

  busybox:
    image: busybox
    # Run as the current user.
    user: ${DOCKER_RUN_USER:-}:${DOCKER_RUN_GROUP:-}
    volumes:
      - .:/project:cached
      - wordpress:/project/vendor/wordpress/wordpress:cached

  cli :
    image: wordpress:cli
    networks:
      - test
    volumes:
      - ./vendor/wordpress/wordpress:/var/www/html
      - .:/project:cached
